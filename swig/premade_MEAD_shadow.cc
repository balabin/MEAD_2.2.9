/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3u-20001225-2300 (Alpha 5)
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#define _USE_MATH_DEFINES
#include <string.h>

#if defined(_WIN32) || defined(__WIN32__)
#       if defined(_MSC_VER)
#               if defined(STATIC_LINKED)
#                       define SWIGEXPORT(a) a
#               else
#                       define SWIGEXPORT(a) __declspec(dllexport) a
#               endif
#       else
#               if defined(__BORLANDC__)
#                       define SWIGEXPORT(a) a _export
#               else
#                       define SWIGEXPORT(a) a
#       endif
#endif
#else
#       define SWIGEXPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef struct swig_type_info {
  char  *name;                 
  void *(*converter)(void *);
  char  *str;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE
SWIGEXPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGEXPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGEXPORT(void *) SWIG_TypeCast(swig_type_info *, void *);
#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti)
{
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
 l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty)
{
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  while (s) {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
	s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      return s;
    }
    if (s == s->next) break;
    s = s->next;
  }
  return 0;
}

/* Cast a pointer (needed for C++ inheritance */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) 
{
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Search for a swig_type_info structure */
SWIGRUNTIME(void *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

#endif

#ifdef __cplusplus
}
#endif



/***********************************************************************
 * python.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

#include <stdlib.h>
#include "Python.h"

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

#ifdef SWIG_NOINCLUDE

SWIGEXPORT(PyObject *)        SWIG_newvarlink();
SWIGEXPORT(void)              SWIG_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
SWIGEXPORT(int)               SWIG_ConvertPtr(PyObject *, void **, swig_type_info *, int);
SWIGEXPORT(void)              SWIG_MakePtr(char *c, void *, swig_type_info *);
SWIGEXPORT(PyObject *)        SWIG_NewPointerObj(void *, swig_type_info *);
SWIGEXPORT(void)              SWIG_InstallConstants(PyObject *d, swig_const_info constants[]);

#else

/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */

typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

static PyObject *
swig_varlink_repr(swig_varlinkobject *v) {
  v = v;
  return PyString_FromString("<Global variables>");
}

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
  swig_globalvar  *var;
  flags = flags;
  fprintf(fp,"Global variables { ");
  for (var = v->vars; var; var=var->next) {
    fprintf(fp,"%s", var->name);
    if (var->next) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->get_attr)();
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return NULL;
}

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->set_attr)(p);
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return 1;
}

statichere PyTypeObject varlinktype = {
  PyObject_HEAD_INIT(0)              
  0,
  "swigvarlink",                      /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */
SWIGRUNTIME(PyObject *)
SWIG_newvarlink(void) {
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  result->vars = 0;
  result->ob_refcnt = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGRUNTIME(void)
SWIG_addvarlink(PyObject *p, char *name,
	   PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v;
  swig_globalvar *gv;
  v= (swig_varlinkobject *) p;
  gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  gv->name = (char *) malloc(strlen(name)+1);
  strcpy(gv->name,name);
  gv->get_attr = get_attr;
  gv->set_attr = set_attr;
  gv->next = v->vars;
  v->vars = gv;
}
/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  unsigned long p;
  register int d;
  swig_type_info *tc;
  char  *c;
  static PyObject *SWIG_this = 0;
  int    newref = 0;

  if (!obj || (obj == Py_None)) {
    *ptr = 0;
    return 0;
  }
#ifdef SWIG_COBJECT_TYPES
  if (!(PyCObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_InternFromString("this");
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyCObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  *ptr = PyCObject_AsVoidPtr(obj);
  c = (char *) PyCObject_GetDesc(obj);
  if (newref) Py_DECREF(obj);
  goto cobject;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_InternFromString("this");
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AsString(obj);
  p = 0;
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) {
      if (newref) Py_DECREF(obj);
      return 0;
    } else {
      if (newref) Py_DECREF(obj);
      goto type_error;
    }
  }
  c++;
  /* Extract hex value from pointer */
  while ((d = *c)) {
    if ((d >= '0') && (d <= '9'))
      p = (p << 4) + (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      p = (p << 4) + (d - ('a'-10));
    else
      break; 
    c++;
  }
  *ptr = (void *) p;
  if (newref) Py_DECREF(obj);
#endif

#ifdef SWIG_COBJECT_TYPES
cobject:
#endif

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,(void*)p);
  }
  return 0;

type_error:

  if (flags) {
    if (ty) {
      char *temp = (char *) malloc(64+strlen(ty->name));
      sprintf(temp,"Type error. Expected %s", ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Take a pointer and convert it to a string */
SWIGRUNTIME(void) 
SWIG_MakePtr(char *c, void *ptr, swig_type_info *ty) {
  static char hex[17] = "0123456789abcdef";
  unsigned long p, s;
  char result[32], *r; 
  r = result;
  p = (unsigned long) ptr;
  if (p > 0) {
    while (p > 0) {
      s = p & 0xf;
      *(r++) = hex[s];
      p = p >> 4;
    }
    *r = '_';
    while (r >= result)
      *(c++) = *(r--);
    strcpy (c, ty->name);
  } else {
    strcpy (c, "NULL");
  }
}

/* Create a new pointer object */
SWIGRUNTIME(PyObject *)
SWIG_NewPointerObj(void *ptr, swig_type_info *type) {
  char result[512];
  PyObject *robj;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PyCObject_FromVoidPtrAndDesc((void *) ptr, type->name, NULL);
#else
  SWIG_MakePtr(result,ptr,type);
  robj = PyString_FromString(result);
#endif
  return robj;
}

/* Install Constants */
SWIGRUNTIME(void)
SWIG_InstallConstants(PyObject *d, swig_const_info constants[]) {
  int i;
  PyObject *obj;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_PY_INT:
      obj = PyInt_FromLong(constants[i].lvalue);
      break;
    case SWIG_PY_FLOAT:
      obj = PyFloat_FromDouble(constants[i].dvalue);
      break;
    case SWIG_PY_STRING:
      obj = PyString_FromString((char *) constants[i].pvalue);
      break;
    case SWIG_PY_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype);
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      PyDict_SetItemString(d,constants[i].name,obj);
      Py_DECREF(obj);
    }
  }
}

#endif

#ifdef __cplusplus
}
#endif



/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_ElstatPotCombination swig_types[0] 
#define  SWIGTYPE_p_Atom swig_types[1] 
#define  SWIGTYPE_p_Legendre swig_types[2] 
#define  SWIGTYPE_p_AtomSet swig_types[3] 
#define  SWIGTYPE_p_FinDiffMethod swig_types[4] 
#define  SWIGTYPE_p_vector_double swig_types[5] 
#define  SWIGTYPE_p_ElectrolyteByAtoms swig_types[6] 
#define  SWIGTYPE_p_ThreeValueDielectricByAtoms swig_types[7] 
#define  SWIGTYPE_p_TwoValueDielectricByAtoms swig_types[8] 
#define  SWIGTYPE_p_ElstatPot_lett swig_types[9] 
#define  SWIGTYPE_p_ChargeDist_lett swig_types[10] 
#define  SWIGTYPE_p_SolvAccVol swig_types[11] 
#define  SWIGTYPE_p_string swig_types[12] 
#define  SWIGTYPE_p_OnePointCharge swig_types[13] 
#define  SWIGTYPE_p_ManyPointCharge swig_types[14] 
#define  SWIGTYPE_p_PointCharge swig_types[15] 
#define  SWIGTYPE_p_AnalySlab swig_types[16] 
#define  SWIGTYPE_p_TwoValueDielMembAtoms swig_types[17] 
#define  SWIGTYPE_p_DielectricSlab swig_types[18] 
#define  SWIGTYPE_p_CubeLatSpec swig_types[19] 
#define  SWIGTYPE_p_ElstatPot swig_types[20] 
#define  SWIGTYPE_p_FinDiffElstatPot swig_types[21] 
#define  SWIGTYPE_p_ElySphere swig_types[22] 
#define  SWIGTYPE_p_DielectricSphere swig_types[23] 
#define  SWIGTYPE_p_DielectricEnvironment_lett swig_types[24] 
#define  SWIGTYPE_p_ElectrolyteEnvironment_lett swig_types[25] 
#define  SWIGTYPE_p_ostream swig_types[26] 
#define  SWIGTYPE_p_AnalySphere swig_types[27] 
#define  SWIGTYPE_p_ThreeValueDielMembAtomsAtoms swig_types[28] 
#define  SWIGTYPE_p_Poly swig_types[29] 
#define  SWIGTYPE_p_Debye swig_types[30] 
#define  SWIGTYPE_p_Coord swig_types[31] 
#define  SWIGTYPE_p_Moments swig_types[32] 
#define  SWIGTYPE_p_PhysCond swig_types[33] 
#define  SWIGTYPE_p_float swig_types[34] 
#define  SWIGTYPE_p_AtomID swig_types[35] 
#define  SWIGTYPE_p_UniformDielectric swig_types[36] 
#define  SWIGTYPE_p_Blab swig_types[37] 
#define  SWIGTYPE_p_AtomChargeSet swig_types[38] 
#define  SWIGTYPE_p_UniformElectrolyte swig_types[39] 
static swig_type_info *swig_types[41];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= MEADc.so
  ------------------------------------------------*/
#define SWIG_init    initMEADc

#define SWIG_name    "MEADc"

#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99

static void _SWIG_exception(int code, char *msg) {
  switch(code) {
  case SWIG_MemoryError:
    PyErr_SetString(PyExc_MemoryError,msg);
    break;
  case SWIG_IOError:
    PyErr_SetString(PyExc_IOError,msg);
    break;
  case SWIG_RuntimeError:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  case SWIG_IndexError:
    PyErr_SetString(PyExc_IndexError,msg);
    break;
  case SWIG_TypeError:
    PyErr_SetString(PyExc_TypeError,msg);
    break;
  case SWIG_DivisionByZero:
    PyErr_SetString(PyExc_ZeroDivisionError,msg);
    break;
  case SWIG_OverflowError:
    PyErr_SetString(PyExc_OverflowError,msg);
    break;
  case SWIG_SyntaxError:
    PyErr_SetString(PyExc_SyntaxError,msg);
    break;
  case SWIG_ValueError:
    PyErr_SetString(PyExc_ValueError,msg);
    break;
  case SWIG_SystemError:
    PyErr_SetString(PyExc_SystemError,msg);
    break;
  default:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  }
}

#define SWIG_exception(a,b) { _SWIG_exception(a,b); return NULL; }

#ifdef __cplusplus
#define BEGIN_CPLUSPLUS_SECTION	}
#else
#define BEGIN_CPLUSPLUS_SECTION
#endif

#ifdef __cplusplus
#define END_CPLUSPLUS_SECTION extern "C" {
#else
#define END_CPLUSPLUS_SECTION
#endif

#ifdef USE_EXCEPTIONS
#include "MEAD/MEADexcept.h"

#define MEAD_try_catch(func)					\
  try {								\
    func;							\
  }								\
  catch(MEADexcept e) {						\
    string error = e.get_error1();				\
    if (error == "") {						\
      error = "The MEAD library has thrown a MEADexcept";	\
    }								\
    else {							\
      error += (e.get_error2() + e.get_error3());		\
    }								\
    SWIG_exception(SWIG_RuntimeError, (char *) error.c_str());	\
    return NULL;						\
  }
#else
#define MEAD_try_catch(func) func
#endif


#include "./Python_funcs.h"

#include "stringobject.h"

#define SWIG_module_name "MEAD"
static PyObject *ThisModuleName;

#include "Numeric/arrayobject.h"

#include <vector>
#include "MEAD/Coord.h"
typedef std::vector<Coord> vector_Coord;
typedef std::vector<string> vector_string;
typedef std::vector<int> vector_int;
typedef std::vector<float> vector_float;
typedef std::vector<double> vector_double;

#include <list>
#include "MEAD/Atom.h"

static PyObject *AtomPtr_o=NULL;
PyObject *AtomPtr(void *source,int own) {
    char cbuf[512];
    PyObject *o;
    if(AtomPtr_o==NULL)AtomPtr_o=PyObject_GetAttrString(ThisModuleName,"Atom""Ptr");
    SWIG_MakePtr(cbuf,(void*)(source),SWIGTYPE_p_Atom);
    o=PyObject_CallFunction(AtomPtr_o, "(s)",cbuf);
    if(own){
       PyObject *val = PyInt_FromLong(1L);
       PyObject_SetAttrString(o, "thisown", val);
    }
    return o;
}

#include <map>
#include "MEAD/AtomID.h"
typedef std::map<AtomID,Atom> map_AtomID_Atom;

static PyObject *AtomIDPtr_o=NULL;
PyObject *AtomIDPtr(void *source,int own) {
    char cbuf[512];
    PyObject *o;
    if(AtomIDPtr_o==NULL)AtomIDPtr_o=PyObject_GetAttrString(ThisModuleName,"AtomID""Ptr");
    SWIG_MakePtr(cbuf,(void*)(source),SWIGTYPE_p_AtomID);
    o=PyObject_CallFunction(AtomIDPtr_o, "(s)",cbuf);
    if(own){
       PyObject *val = PyInt_FromLong(1L);
       PyObject_SetAttrString(o, "thisown", val);
    }
    return o;
}

typedef std::list<AtomID> list_AtomID;

typedef std::list<Atom*> list_AtomPtr;

#include "MEAD/PointCharge.h"

static PyObject *PointChargePtr_o=NULL;
PyObject *PointChargePtr(void *source,int own) {
    char cbuf[512];
    PyObject *o;
    if(PointChargePtr_o==NULL)PointChargePtr_o=PyObject_GetAttrString(ThisModuleName,"PointCharge""Ptr");
    SWIG_MakePtr(cbuf,(void*)(source),SWIGTYPE_p_PointCharge);
    o=PyObject_CallFunction(PointChargePtr_o, "(s)",cbuf);
    if(own){
       PyObject *val = PyInt_FromLong(1L);
       PyObject_SetAttrString(o, "thisown", val);
    }
    return o;
}

#include "MEAD/CubeLatSpec.h"
typedef std::list<CubeLatSpec> list_CubeLatSpec;

static PyObject *CubeLatSpecPtr_o=NULL;
PyObject *CubeLatSpecPtr(void *source,int own) {
    char cbuf[512];
    PyObject *o;
    if(CubeLatSpecPtr_o==NULL)CubeLatSpecPtr_o=PyObject_GetAttrString(ThisModuleName,"CubeLatSpec""Ptr");
    SWIG_MakePtr(cbuf,(void*)(source),SWIGTYPE_p_CubeLatSpec);
    o=PyObject_CallFunction(CubeLatSpecPtr_o, "(s)",cbuf);
    if(own){
       PyObject *val = PyInt_FromLong(1L);
       PyObject_SetAttrString(o, "thisown", val);
    }
    return o;
}

#include "MEAD/SphericalHarmonic.h"
typedef std::vector<Legendre> vector_Legendre;

static PyObject *LegendrePtr_o=NULL;
PyObject *LegendrePtr(void *source,int own) {
    char cbuf[512];
    PyObject *o;
    if(LegendrePtr_o==NULL)LegendrePtr_o=PyObject_GetAttrString(ThisModuleName,"Legendre""Ptr");
    SWIG_MakePtr(cbuf,(void*)(source),SWIGTYPE_p_Legendre);
    o=PyObject_CallFunction(LegendrePtr_o, "(s)",cbuf);
    if(own){
       PyObject *val = PyInt_FromLong(1L);
       PyObject_SetAttrString(o, "thisown", val);
    }
    return o;
}

typedef float Numeric_3D_Array_FLOAT;
typedef int Numeric_3D_Array_INT;
typedef float Numeric_1D_Array_FLOAT;
typedef int Numeric_1D_Array_INT;

#include "MEAD/Coord.h"

#include "MEAD/ChargeDist.h"

#include "MEAD/DielectricEnvironment.h"

#include "MEAD/ElectrolyteEnvironment.h"

#include "MEAD/ElstatPot.h"

#include "MEAD/Atom.h"

#include "MEAD/AtomID.h"

#include "MEAD/AtomSet.h"

#include "MEAD/PointCharge.h"

#include "MEAD/AtomChargeSet.h"

#include "MEAD/ManyPointCharge.h"

#include "MEAD/OnePointCharge.h"

#include "MEAD/UniformDielectric.h"

#include "MEAD/DielectricSphere.h"

#include "MEAD/DielectricSlab.h"

#include "MEAD/DielByAtoms.h"

#include "MEAD/DielMembAtoms.h"

#include "MEAD/UniformElectrolyte.h"

#include "MEAD/ElySphere.h"

#include "MEAD/ElectrolyteByAtoms.h"

#include "MEAD/SolvAccVol.h"


  class AccTag_enum {
  public:
    enum { interior , exterior , undecided , in_tube };
  };


#include "MEAD/SphericalHarmonic.h"

int create_legendre_series(int lmax, vector_Legendre* vL)
{ make_legendre_series(lmax, vL); return 1; }


#include "MEAD/CubeLatSpec.h"


  class CenteringStyle_enum {
  public:
    enum { ON_ORIGIN, ON_CENT_OF_INTR, ON_GEOM_CENT, SPECIFIC };
  };


#include "MEAD/PhysCond.h"

  class Blab {
  public:
    Blab() : level(0) {}
    int get_level() {return level;}
    void set_level(int l) {level=l;}
  private:
    int level;
  };

#include "MEAD/FinDiffMethod.h"

#include "MEAD/AnalySphere.h"

#include "MEAD/AnalySlab.h"

#include "MEAD/Debye.h"

#include "MEAD/FinDiffElstatPot.h"

#include "MEAD/ElstatPotCombination.h"

#include "MEAD/MomentAnalysis.h"



typedef PyArrayObject Numeric_Nby4_DOUBLE;

Moments
alt_momentsOfChargeDist(Numeric_Nby4_DOUBLE* numarr, unsigned maxell,
			Coord center)
{
  ManyPointCharge * mpcp = new ManyPointCharge;
  for (int i=0; i < numarr->dimensions[0]; ++i) {
    double x = * (double*) (numarr->data
			    + i*numarr->strides[0]);
    double y = * (double*) (numarr->data
			    + i*numarr->strides[0]
			    + 1*numarr->strides[1]);
    double z = * (double*) (numarr->data
			    + i*numarr->strides[0]
			    + 2*numarr->strides[1]);
    double q = * (double*) (numarr->data
			    + i*numarr->strides[0]
			    + 3*numarr->strides[1]);
    mpcp->push_back(PointCharge(Coord(x,y,z), q));
  }
  ChargeDist rho(mpcp);
  return momentsOfChargeDist(rho, maxell, center);
}

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
}
#endif

Coord  Coord___mul__(Coord *oprnd1, float  oprnd2) {
   return operator* (*oprnd1, oprnd2);
}
float  Coord___mul__(Coord *oprnd1, const Coord& oprnd2) {
   return operator* (*oprnd1, oprnd2);
}

#ifdef __cplusplus
extern "C" {
#endif


#ifdef __cplusplus
}
#endif

ElstatPotCombination  ElstatPot_lett___add__(ElstatPot_lett *oprnd1, ElstatPot_lett& oprnd2) {
   return operator+ (*oprnd1, oprnd2);
}
ElstatPotCombination  ElstatPot_lett___add__(ElstatPot_lett *oprnd1, ElstatPotCombination& oprnd2) {
   return operator+ (*oprnd1, oprnd2);
}

#ifdef __cplusplus
extern "C" {
#endif


// ...provide the wrapped constructor with the default argument supplied
AtomID * new_AtomID(int residue_number, const string& atom_name){
  return new AtomID(residue_number, atom_name, "");
}
// Provide the read-only get/set functions for the aboved wrapped attributes
void AtomID_resnum_set(AtomID *self, int resnum){
   _SWIG_exception(SWIG_ValueError, "The resnum attribute is read-only");
}
void AtomID_atname_set(AtomID *self, string *atname){
   _SWIG_exception(SWIG_ValueError, "The atname attribute is read-only");
}
void AtomID_chainid_set(AtomID *self, string *chainid){
   _SWIG_exception(SWIG_ValueError, "The chainid attribute is read-only");
}
int AtomID_resnum_get(AtomID *self){return self->get_resnum();}
// These strings are returned by reference, so create global placeholders
// to stash the results to be returned (read-only).
// Note that this works fine from Python since assignment of
// simple objects like numbers and strings effectively creates a copy.
// However, using these global references certainly is not thread safe!
string _AtomID_atname_readonly;
string _AtomID_chainid_readonly;
string * AtomID_atname_get(AtomID *self){_AtomID_atname_readonly = self->get_atname(); return &_AtomID_atname_readonly;}
string * AtomID_chainid_get(AtomID *self){_AtomID_chainid_readonly = self->get_chainid(); return &_AtomID_chainid_readonly;}

//
// Provide the read-only get/set functions for the aboved wrapped attribute
void AtomSet_name_set(AtomSet *self, string *name){
   _SWIG_exception(SWIG_ValueError, "The name attribute is read-only");
}
// This type is returned by reference, so create a global placeholder
// to stash the result to be returned (read-only)
// Note that this works OK from Python since assignment of
// simple objects like numbers and strings effectively creates a copy.
// However, using this global reference certainly is not thread safe!
string _AtomSet_name_readonly;
string * AtomSet_name_get(AtomSet *self){_AtomSet_name_readonly = self->get_name(); return &_AtomSet_name_readonly;}



BEGIN_CPLUSPLUS_SECTION

// Define our special __mul__ functions here
AtomChargeSet * AtomChargeSet___mul__ (const AtomChargeSet *acs, float a)
{ return ::multiplyChargeDist(*acs, a); }
AtomChargeSet * AtomChargeSet___rmul__ (const AtomChargeSet *acs, float a)
{ return ::multiplyChargeDist(*acs, a); }
AtomChargeSet * AtomChargeSet___div__ (const AtomChargeSet *acs, float a)
{ return ::divideChargeDist(*acs, a); }

// Define our special __add__ functions here
AtomChargeSet * AtomChargeSet___add__ (const AtomChargeSet *acs1, const AtomChargeSet& acs2)
{ return ::addChargeDist(*acs1, acs2); }
ManyPointCharge * AtomChargeSet___add__ (const AtomChargeSet *acs, const ManyPointCharge& mpc)
{ return ::addChargeDist(*acs, mpc); }
ManyPointCharge * AtomChargeSet___add__ (const AtomChargeSet *acs, const OnePointCharge& opc)
{ return ::addChargeDist(*acs, opc); }

END_CPLUSPLUS_SECTION


#ifdef __cplusplus
}
#endif

float  AtomChargeSet___mul__(AtomChargeSet *oprnd1, const ElstatPot_lett& oprnd2) {
   return operator* (*oprnd1, oprnd2);
}
float  AtomChargeSet___mul__(AtomChargeSet *oprnd1, const ElstatPotCombination& oprnd2) {
   return operator* (*oprnd1, oprnd2);
}

#ifdef __cplusplus
extern "C" {
#endif



BEGIN_CPLUSPLUS_SECTION

// Define our special __mul__ functions here
ManyPointCharge* ManyPointCharge___mul__ (const ManyPointCharge *mpc, float a)
{ return ::multiplyChargeDist(*mpc, a); }
ManyPointCharge* ManyPointCharge___rmul__ (const ManyPointCharge *mpc, float a)
{ return ::multiplyChargeDist(*mpc, a); }
ManyPointCharge* ManyPointCharge___div__ (const ManyPointCharge *mpc, float a)
{ return ::divideChargeDist(*mpc, a); }

// Define our special __add__ functions here
ManyPointCharge * ManyPointCharge___add__ (const ManyPointCharge *mpc, const AtomChargeSet& acs)
{ return ::addChargeDist(acs, *mpc); }
ManyPointCharge * ManyPointCharge___add__ (const ManyPointCharge *mpc1, const ManyPointCharge& mpc2)
{ return ::addChargeDist(*mpc1, mpc2); }
ManyPointCharge * ManyPointCharge___add__ (const ManyPointCharge *mpc, const OnePointCharge& opc)
{ return ::addChargeDist(*mpc, opc); }

END_CPLUSPLUS_SECTION


#ifdef __cplusplus
}
#endif

float  ManyPointCharge___mul__(ManyPointCharge *oprnd1, const ElstatPot_lett& oprnd2) {
   return operator* (*oprnd1, oprnd2);
}
float  ManyPointCharge___mul__(ManyPointCharge *oprnd1, const ElstatPotCombination& oprnd2) {
   return operator* (*oprnd1, oprnd2);
}

#ifdef __cplusplus
extern "C" {
#endif



BEGIN_CPLUSPLUS_SECTION

// Define our special __mul__ functions here
OnePointCharge* OnePointCharge___mul__ (const OnePointCharge *opc, float a)
{ return ::multiplyChargeDist(*opc, a); }
OnePointCharge* OnePointCharge___rmul__ (const OnePointCharge *opc, float a)
{ return ::multiplyChargeDist(*opc, a); }
OnePointCharge* OnePointCharge___div__ (const OnePointCharge *opc, float a)
{ return ::divideChargeDist(*opc, a); }

// Define our special __add__ functions here
ManyPointCharge * OnePointCharge___add__ (const OnePointCharge *opc, const AtomChargeSet& acs)
{ return ::addChargeDist(acs, *opc); }
ManyPointCharge * OnePointCharge___add__ (const OnePointCharge *opc, const ManyPointCharge& mpc)
{ return ::addChargeDist(mpc, *opc); }
//
// This is a bit unusual, since it can return either a One or Many.
// We'll always make it a Many!
ManyPointCharge * OnePointCharge___add__ (const OnePointCharge *opc1, const OnePointCharge& opc2)
{
  ChargeDist_lett *cdp = ::addChargeDist(*opc1, opc2);
  int npoints = cdp->number_points();
  if (npoints > 1) {
    // We know this has to be a ManyPointCharge!
    return static_cast<ManyPointCharge *> (cdp);
  }
  else {
    // We know this has to be a OnePointCharge!
    // But for some reason this cast does not always work.
    // OnePointCharge *opc = static_cast<OnePointCharge *> (cdp);
    // float chg = opc->get_charge();
    float chg = opc1->get_charge() + opc2.get_charge();
    Coord crd = opc1->get_coord();
    ManyPointCharge *mpc = new ManyPointCharge(1, &chg, &crd);
    delete cdp;
    return mpc;
  }
}

END_CPLUSPLUS_SECTION


#ifdef __cplusplus
}
#endif

float  OnePointCharge___mul__(OnePointCharge *oprnd1, const ElstatPot_lett& oprnd2) {
   return operator* (*oprnd1, oprnd2);
}
float  OnePointCharge___mul__(OnePointCharge *oprnd1, const ElstatPotCombination& oprnd2) {
   return operator* (*oprnd1, oprnd2);
}

#ifdef __cplusplus
extern "C" {
#endif



BEGIN_CPLUSPLUS_SECTION

// Provide the wrapped constructors with the default arguments supplied
ElectrolyteByAtoms * new_ElectrolyteByAtoms(const AtomSet& ats)
{
  return new ElectrolyteByAtoms(ats, PhysCond::get_ionicstr(), PhysCond::get_sterln());
}
ElectrolyteByAtoms * new_ElectrolyteByAtoms(const AtomSet& ats, float ionic_strnth)
{
  return new ElectrolyteByAtoms(ats, ionic_strnth, PhysCond::get_sterln());
}

END_CPLUSPLUS_SECTION

static PyObject *_wrap_order_one_Legendre(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Legendre *result ;
    
    if(!PyArg_ParseTuple(args,":order_one_Legendre")) return NULL;
    {
        MEAD_try_catch(result = new Legendre (order_one_Legendre());)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Legendre);
    return resultobj;
}


static PyObject *_wrap_next_Legendre_using_prev2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Legendre *arg0 ;
    Legendre *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    Legendre *result ;
    
    if(!PyArg_ParseTuple(args,"OO:next_Legendre_using_prev2",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Legendre,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Legendre,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Legendre (next_Legendre_using_prev2((Legendre const &)*arg0,(Legendre const &)*arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Legendre);
    return resultobj;
}


static PyObject *_wrap_create_legendre_series(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg0 ;
    vector_Legendre *arg1 ;
    vector_Legendre vpe ;
    PyObject * obj1  = 0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"iO:create_legendre_series",&arg0,&obj1)) return NULL;
    {
        if (PyList_Check(obj1)) {
            int size = PyList_Size(obj1);      for (int i=0; i<size; ++i) {
                PyObject *o = PyList_GetItem(obj1, i);        Legendre *peptr;        if ((SWIG_ConvertPtr(o,(void **) & peptr, SWIGTYPE_p_Legendre,1)) != -1) {
                    vpe.push_back(*peptr);        
                }        else {
                    PyErr_SetString(PyExc_TypeError, "Conversion of vector element to Legendre failed");          return NULL;        
                }      
            }      arg1 = &vpe;    
        }    else {
            PyErr_SetString(PyExc_TypeError, "not a list");      return NULL;    
        }  
    }
    {
        MEAD_try_catch(result = (int )create_legendre_series(arg0,arg1);
        )
    }resultobj = PyInt_FromLong((long)result);
    {
        PyObject *newlist = PyList_New(0);    if (!newlist) return NULL;    for (vector_Legendre::const_iterator p = arg1->begin(); p!=arg1->end(); ++p) {
            Legendre *fp = new Legendre(*p);      PyObject *optr = LegendrePtr((void *) fp, 1);      PyList_Append(newlist, optr);      Py_DECREF(optr);    
        }    PyList_SetSlice(obj1, 0, PyList_Size(obj1), newlist);    Py_DECREF(newlist);  
    }
    return resultobj;
}



#ifdef __cplusplus
}
#endif

Poly  Poly___mul__(Poly *self, const Poly& oprnd2) {
   return self->operator* (oprnd2);
}
Poly  Poly___mul__(Poly *self, double  oprnd2) {
   return self->operator* (oprnd2);
}

#ifdef __cplusplus
extern "C" {
#endif


//
// The wrapped constructor with CenteringStyle as an int
// Note: There is no range checking for the enum assignment, so the
//       result could be undefined if an out-of-range int is used.
//
CubeLatSpec * new_CubeLatSpec(int ngrd, float spc, int sty){
  CenteringStyle style = CenteringStyle(sty);
  return new CubeLatSpec(ngrd, spc, style);
}



// Get/Set functions for Blab level
void Blab_level_set(Blab *self, int l){
  switch (l) {
    case 0:
      blab1pt = &cnull;
      blab2pt = &cnull;
      blab3pt = &cnull;
      self->set_level(l);
      break;
    case 1:
      blab1pt = &cout;
      blab2pt = &cnull;
      blab3pt = &cnull;
      self->set_level(l);
      break;
    case 2:
      blab1pt = &cout;
      blab2pt = &cout;
      blab3pt = &cnull;
      self->set_level(l);
      break;
    case 3:
      blab1pt = &cout;
      blab2pt = &cout;
      blab3pt = &cout;
      self->set_level(l);
      break;
    default:
      _SWIG_exception(SWIG_ValueError, "The blab level must be between 0 and 3");
      break;
    }
}
int Blab_level_get(Blab *self) {return self->get_level();}

// Provide the get/set functions for the aboved wrapped attributes
void PhysCond_epsext_set(PhysCond *self, float x) {PhysCond::set_epsext(x);}
void PhysCond_solrad_set(PhysCond *self, float x) {PhysCond::set_solrad(x);}
void PhysCond_sterln_set(PhysCond *self, float x) {PhysCond::set_sterln(x);}
void PhysCond_ionicstr_set(PhysCond *self, float x) {PhysCond::set_ionicstr(x);}
void PhysCond_T_set(PhysCond *self, float x) {PhysCond::set_T(x);}
void PhysCond_kBolt_set(PhysCond *self, float x) {PhysCond::set_kBolt(x);}
void PhysCond_conconv_set(PhysCond *self, float x) {PhysCond::set_conconv(x);}
void PhysCond_econv_set(PhysCond *self, float x) {PhysCond::set_econv(x);}
void PhysCond_bohr_radius_set(PhysCond *self, float x) {PhysCond::set_bohr_radius(x);}
void PhysCond_proton_charge_set(PhysCond *self, float x) {PhysCond::set_proton_charge(x);}
void PhysCond_hueck_set(PhysCond *self, float x) {
  _SWIG_exception(SWIG_ValueError, "The hueck attribute is read-only");
}
void PhysCond_kappasq_set(PhysCond *self, float x) {
  _SWIG_exception(SWIG_ValueError, "The kappasq attribute is read-only");
}
void PhysCond_ln10kT_set(PhysCond *self, float x) {
  _SWIG_exception(SWIG_ValueError, "The ln10kT attribute is read-only");
}

float PhysCond_epsext_get(PhysCond *self) {return PhysCond::get_epsext();}
float PhysCond_solrad_get(PhysCond *self) {return PhysCond::get_solrad();}
float PhysCond_sterln_get(PhysCond *self) {return PhysCond::get_sterln();}
float PhysCond_ionicstr_get(PhysCond *self) {return PhysCond::get_ionicstr();}
float PhysCond_T_get(PhysCond *self) {return PhysCond::get_T();}
float PhysCond_kBolt_get(PhysCond *self) {return PhysCond::get_kBolt();}
float PhysCond_conconv_get(PhysCond *self) {return PhysCond::get_conconv();}
float PhysCond_econv_get(PhysCond *self) {return PhysCond::get_econv();}
float PhysCond_bohr_radius_get(PhysCond *self) {return PhysCond::get_bohr_radius();}
float PhysCond_proton_charge_get(PhysCond *self) {return PhysCond::get_proton_charge();}
float PhysCond_hueck_get(PhysCond *self) {return PhysCond::get_hueck();}
float PhysCond_kappasq_get(PhysCond *self) {return PhysCond::get_kappasq();}
float PhysCond_ln10kT_get(PhysCond *self) {return PhysCond::get_ln10kT();}


//
// The wrapped (overloaded) add_level method for CenteringStyle as int
// Note: There is no range checking for the enum assignment, so the
//       result could be undefined if an out-of-range int is used.
//
void FinDiffMethod_add_level(FinDiffMethod* self, int ngrd, float spc, int sty)
{
  CenteringStyle style = CenteringStyle(sty);
  self->add_level(ngrd, spc, style);
}



BEGIN_CPLUSPLUS_SECTION

// Provide the wrapped constructors.
AnalySphere * new_AnalySphere(DielectricSphere* ds, ChargeDist_lett* cd, ElySphere* esp, int l){
  return new AnalySphere(ds, cd, esp, l);
}
AnalySphere * new_AnalySphere(DielectricSphere* ds, ChargeDist_lett* cd, ElySphere* esp){
  return new AnalySphere(ds, cd, esp, ANALYSPHERE_MAXTERM);
}

END_CPLUSPLUS_SECTION


#ifdef __cplusplus
}
#endif

float  AnalySphere___mul__(AnalySphere *oprnd1, const ChargeDist_lett& oprnd2) {
   return operator* (*oprnd1, oprnd2);
}
ElstatPotCombination  AnalySphere___mul__(AnalySphere *oprnd1, float  oprnd2) {
   return operator* (*oprnd1, oprnd2);
}

#ifdef __cplusplus
extern "C" {
#endif



BEGIN_CPLUSPLUS_SECTION

// Provide the wrapped constructors.
AnalySlab * new_AnalySlab (DielectricSlab* ds, ChargeDist_lett* cd, ElectrolyteEnvironment_lett* ee, int maxterm){
  return new AnalySlab(ds, cd, ee, maxterm);
}
AnalySlab * new_AnalySlab (DielectricSlab* ds, ChargeDist_lett* cd, ElectrolyteEnvironment_lett* ee){
  return new AnalySlab(ds, cd, ee, ANALYSLAB_MAXTERM);
}

END_CPLUSPLUS_SECTION


#ifdef __cplusplus
}
#endif

float  AnalySlab___mul__(AnalySlab *oprnd1, const ChargeDist_lett& oprnd2) {
   return operator* (*oprnd1, oprnd2);
}
ElstatPotCombination  AnalySlab___mul__(AnalySlab *oprnd1, float  oprnd2) {
   return operator* (*oprnd1, oprnd2);
}

#ifdef __cplusplus
extern "C" {
#endif


#ifdef __cplusplus
}
#endif

float  Debye___mul__(Debye *oprnd1, const ChargeDist_lett& oprnd2) {
   return operator* (*oprnd1, oprnd2);
}
ElstatPotCombination  Debye___mul__(Debye *oprnd1, float  oprnd2) {
   return operator* (*oprnd1, oprnd2);
}

#ifdef __cplusplus
extern "C" {
#endif


#ifdef __cplusplus
}
#endif

float  FinDiffElstatPot___mul__(FinDiffElstatPot *oprnd1, const ChargeDist_lett& oprnd2) {
   return operator* (*oprnd1, oprnd2);
}
ElstatPotCombination  FinDiffElstatPot___mul__(FinDiffElstatPot *oprnd1, float  oprnd2) {
   return operator* (*oprnd1, oprnd2);
}

#ifdef __cplusplus
extern "C" {
#endif


#ifdef __cplusplus
}
#endif

ElstatPotCombination&  ElstatPotCombination___iadd__(ElstatPotCombination *self, const ElstatPotCombination& oprnd2) {
   return self->operator+= (oprnd2);
}
ElstatPotCombination&  ElstatPotCombination___iadd__(ElstatPotCombination *self, ElstatPot_lett& oprnd2) {
   return self->operator+= (oprnd2);
}
ElstatPotCombination  ElstatPotCombination___add__(ElstatPotCombination *oprnd1, const ElstatPotCombination& oprnd2) {
   return operator+ (*oprnd1, oprnd2);
}
ElstatPotCombination  ElstatPotCombination___add__(ElstatPotCombination *oprnd1, ElstatPot_lett& oprnd2) {
   return operator+ (*oprnd1, oprnd2);
}
ElstatPotCombination  ElstatPotCombination___mul__(ElstatPotCombination *oprnd1, float  oprnd2) {
   return operator* (*oprnd1, oprnd2);
}
float  ElstatPotCombination___mul__(ElstatPotCombination *oprnd1, const ChargeDist_lett& oprnd2) {
   return operator* (*oprnd1, oprnd2);
}

#ifdef __cplusplus
extern "C" {
#endif

static PyObject *_wrap_momentsOfElstatPot(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ElstatPot *arg0 ;
    unsigned int arg1 ;
    float arg2 ;
    Coord *arg3 ;
    PyObject * argo0 =0 ;
    PyObject * argo3 =0 ;
    Moments *result ;
    
    if(!PyArg_ParseTuple(args,"OifO:momentsOfElstatPot",&argo0,&arg1,&arg2,&argo3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ElstatPot,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo3,(void **) &arg3,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Moments (momentsOfElstatPot(*arg0,arg1,arg2,*arg3));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Moments);
    return resultobj;
}


static PyObject *_wrap_print_moments(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Moments *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:print_moments",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Moments,1)) == -1) return NULL;
    {
        MEAD_try_catch(print_moments(*arg0);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_compare_moments(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Moments *arg0 ;
    Moments *arg1 ;
    string *arg2 ;
    string *arg3 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    string str ;
    PyObject * obj2  = 0 ;
    string str0 ;
    PyObject * obj3  = 0 ;
    
    if(!PyArg_ParseTuple(args,"OOOO:compare_moments",&argo0,&argo1,&obj2,&obj3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Moments,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Moments,1)) == -1) return NULL;
    {
        if (PyString_Check(obj2)) {
            str = string(PyString_AsString(obj2));
            arg2 = &str;
        }
        else {
            PyErr_SetString(PyExc_TypeError, "arg must be a string");
            return NULL;
        }
    }
    {
        if (PyString_Check(obj3)) {
            str0 = string(PyString_AsString(obj3));
            arg3 = &str0;
        }
        else {
            PyErr_SetString(PyExc_TypeError, "arg must be a string");
            return NULL;
        }
    }
    {
        MEAD_try_catch(compare_moments((Moments const &)*arg0,(Moments const &)*arg1,*arg2,*arg3);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_momentsOfChargeDist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Numeric_Nby4_DOUBLE *arg0 ;
    unsigned int arg1 ;
    Coord *arg2 ;
    PyObject * obj0  = 0 ;
    PyObject * argo2 =0 ;
    Moments *result ;
    
    if(!PyArg_ParseTuple(args,"OiO:momentsOfChargeDist",&obj0,&arg1,&argo2)) return NULL;
    {
        if (PyArray_Check(obj0)) {
            PyArrayObject *array = (PyArrayObject *) obj0;
            if (array->nd != 2) {
                PyErr_SetString(PyExc_TypeError,
                "array must be two-diminsional");
                return NULL;
            }
            if (array->dimensions[1] != 4) {
                PyErr_SetString(PyExc_TypeError,
                "array's second diminsion size must be 4");
                return NULL;
            }
            if (array->descr->type_num != PyArray_DOUBLE) {
                PyErr_SetString(PyExc_TypeError,
                "array contents must be of type double");
                return NULL;
            }
            arg0 = array;
        }
        else {
            PyErr_SetString(PyExc_TypeError, "not an array");
            return NULL;
        }
    }
    if ((SWIG_ConvertPtr(argo2,(void **) &arg2,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Moments (alt_momentsOfChargeDist(arg0,arg1,*arg2));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Moments);
    return resultobj;
}


static PyObject *_wrap_new_Coord(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Coord *result ;
    
    if(!PyArg_ParseTuple(args,":new_Coord")) return NULL;
    {
        MEAD_try_catch(result = (Coord *)new Coord();
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Coord);
    return resultobj;
}


static PyObject *_wrap_new_Coord__L16(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    float arg0 ;
    float arg1 ;
    float arg2 ;
    Coord *result ;
    
    if(!PyArg_ParseTuple(args,"fff:new_Coord__L16",&arg0,&arg1,&arg2)) return NULL;
    {
        MEAD_try_catch(result = (Coord *)new Coord(arg0,arg1,arg2);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Coord);
    return resultobj;
}


static PyObject *_wrap_new_Coord__deepcopy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Coord *arg0 ;
    PyObject * argo0 =0 ;
    Coord *result ;
    
    if(!PyArg_ParseTuple(args,"O:new_Coord__deepcopy",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (Coord *)new Coord((Coord const &)*arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Coord);
    return resultobj;
}


static PyObject *_wrap_new_Coord__L17(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Coord *arg0 ;
    PyObject * argo0 =0 ;
    Coord *result ;
    
    if(!PyArg_ParseTuple(args,"O:new_Coord__L17",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (Coord *)new Coord((Coord const &)*arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Coord);
    return resultobj;
}


static PyObject *_wrap_delete_Coord(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Coord *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_Coord",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(delete arg0;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_Coord_x_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Coord *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Of:Coord_x_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(arg0->x = arg1;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_Coord_x_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Coord *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:Coord_x_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float ) (arg0->x);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_Coord_y_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Coord *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Of:Coord_y_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(arg0->y = arg1;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_Coord_y_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Coord *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:Coord_y_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float ) (arg0->y);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_Coord_z_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Coord *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Of:Coord_z_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(arg0->z = arg1;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_Coord_z_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Coord *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:Coord_z_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float ) (arg0->z);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


void  Coord_write(Coord *self) {
    {
        self->print(cout); 
    }
}


static PyObject *_wrap_Coord_write(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Coord *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:Coord_write",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(Coord_write(arg0);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


BEGIN_CPLUSPLUS_SECTION
Coord  Coord_cross(Coord *self,Coord const &b) {
    {
        return cross(*self, b);
    }
}
END_CPLUSPLUS_SECTION


static PyObject *_wrap_Coord_cross(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Coord *arg0 ;
    Coord *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    Coord *result ;
    
    if(!PyArg_ParseTuple(args,"OO:Coord_cross",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Coord (Coord_cross(arg0,(Coord const &)*arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Coord);
    return resultobj;
}


double  Coord_dot(Coord *self,Coord const &b) {
    {
        return dot(*self, b);
    }
}


static PyObject *_wrap_Coord_dot(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Coord *arg0 ;
    Coord *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    double result ;
    
    if(!PyArg_ParseTuple(args,"OO:Coord_dot",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (double )Coord_dot(arg0,(Coord const &)*arg1);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


Coord & Coord___iadd__(Coord *self,Coord const &oprnd2) {
    {
        return *self += oprnd2;
    }
}


static PyObject *_wrap_Coord___iadd__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Coord *arg0 ;
    Coord *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    Coord *result ;
    
    if(!PyArg_ParseTuple(args,"OO:Coord___iadd__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(Coord &_result_ref = Coord___iadd__(arg0,(Coord const &)*arg1);
        result = (Coord *) &_result_ref;
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Coord);
    return resultobj;
}


Coord & Coord___isub__(Coord *self,Coord const &oprnd2) {
    {
        return *self -= oprnd2;
    }
}


static PyObject *_wrap_Coord___isub__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Coord *arg0 ;
    Coord *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    Coord *result ;
    
    if(!PyArg_ParseTuple(args,"OO:Coord___isub__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(Coord &_result_ref = Coord___isub__(arg0,(Coord const &)*arg1);
        result = (Coord *) &_result_ref;
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Coord);
    return resultobj;
}


Coord & Coord___imul__(Coord *self,float oprnd2) {
    {
        return *self *= oprnd2;
    }
}


static PyObject *_wrap_Coord___imul__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Coord *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    Coord *result ;
    
    if(!PyArg_ParseTuple(args,"Of:Coord___imul__",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(Coord &_result_ref = Coord___imul__(arg0,arg1);
        result = (Coord *) &_result_ref;
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Coord);
    return resultobj;
}


Coord & Coord___idiv__(Coord *self,float oprnd2) {
    {
        return *self /= oprnd2;
    }
}


static PyObject *_wrap_Coord___idiv__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Coord *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    Coord *result ;
    
    if(!PyArg_ParseTuple(args,"Of:Coord___idiv__",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(Coord &_result_ref = Coord___idiv__(arg0,arg1);
        result = (Coord *) &_result_ref;
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Coord);
    return resultobj;
}


BEGIN_CPLUSPLUS_SECTION
Coord  Coord___neg__(Coord *self) {
    {
        return -(*self);
    }
}
END_CPLUSPLUS_SECTION


static PyObject *_wrap_Coord___neg__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Coord *arg0 ;
    PyObject * argo0 =0 ;
    Coord *result ;
    
    if(!PyArg_ParseTuple(args,"O:Coord___neg__",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Coord (Coord___neg__(arg0));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Coord);
    return resultobj;
}


int  Coord___gt__(Coord *self,Coord const &oprnd2) {
    {
        return *self > oprnd2;
    }
}


static PyObject *_wrap_Coord___gt__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Coord *arg0 ;
    Coord *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"OO:Coord___gt__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int )Coord___gt__(arg0,(Coord const &)*arg1);
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


int  Coord___lt__(Coord *self,Coord const &oprnd2) {
    {
        return *self < oprnd2;
    }
}


static PyObject *_wrap_Coord___lt__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Coord *arg0 ;
    Coord *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"OO:Coord___lt__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int )Coord___lt__(arg0,(Coord const &)*arg1);
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


BEGIN_CPLUSPLUS_SECTION
Coord  Coord___add__(Coord *self,Coord const &oprnd2) {
    {
        return *self + oprnd2;
    }
}
END_CPLUSPLUS_SECTION


static PyObject *_wrap_Coord___add__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Coord *arg0 ;
    Coord *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    Coord *result ;
    
    if(!PyArg_ParseTuple(args,"OO:Coord___add__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Coord (Coord___add__(arg0,(Coord const &)*arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Coord);
    return resultobj;
}


BEGIN_CPLUSPLUS_SECTION
Coord  Coord___sub__(Coord *self,Coord const &oprnd2) {
    {
        return *self - oprnd2;
    }
}
END_CPLUSPLUS_SECTION


static PyObject *_wrap_Coord___sub__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Coord *arg0 ;
    Coord *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    Coord *result ;
    
    if(!PyArg_ParseTuple(args,"OO:Coord___sub__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Coord (Coord___sub__(arg0,(Coord const &)*arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Coord);
    return resultobj;
}


static PyObject *_wrap_Coord___mul__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Coord *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    Coord *result ;
    
    if(!PyArg_ParseTuple(args,"Of:Coord___mul__",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Coord (Coord___mul__(arg0,arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Coord);
    return resultobj;
}


BEGIN_CPLUSPLUS_SECTION
Coord  Coord___rmul__(Coord *self,float oprnd2) {
    {
        return *self * oprnd2;
    }
}
END_CPLUSPLUS_SECTION


static PyObject *_wrap_Coord___rmul__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Coord *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    Coord *result ;
    
    if(!PyArg_ParseTuple(args,"Of:Coord___rmul__",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Coord (Coord___rmul__(arg0,arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Coord);
    return resultobj;
}


static PyObject *_wrap_Coord___mul____L86(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Coord *arg0 ;
    Coord *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"OO:Coord___mul____L86",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )Coord___mul__(arg0,(Coord const &)*arg1);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


BEGIN_CPLUSPLUS_SECTION
Coord  Coord___div__(Coord *self,float oprnd2) {
    {
        return *self / oprnd2;
    }
}
END_CPLUSPLUS_SECTION


static PyObject *_wrap_Coord___div__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Coord *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    Coord *result ;
    
    if(!PyArg_ParseTuple(args,"Of:Coord___div__",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Coord (Coord___div__(arg0,arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Coord);
    return resultobj;
}


bool  Coord___eq__(Coord *self,Coord const &oprnd2) {
    {
        return *self == oprnd2;
    }
}


static PyObject *_wrap_Coord___eq__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Coord *arg0 ;
    Coord *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"OO:Coord___eq__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (bool )Coord___eq__(arg0,(Coord const &)*arg1);
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


bool  Coord___ne__(Coord *self,Coord const &oprnd2) {
    {
        return *self != oprnd2;
    }
}


static PyObject *_wrap_Coord___ne__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Coord *arg0 ;
    Coord *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"OO:Coord___ne__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (bool )Coord___ne__(arg0,(Coord const &)*arg1);
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


BEGIN_CPLUSPLUS_SECTION
Coord  Coord___pos__(Coord *self) {
    {
        return *self;
    }
}
END_CPLUSPLUS_SECTION


static PyObject *_wrap_Coord___pos__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Coord *arg0 ;
    PyObject * argo0 =0 ;
    Coord *result ;
    
    if(!PyArg_ParseTuple(args,"O:Coord___pos__",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Coord (Coord___pos__(arg0));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Coord);
    return resultobj;
}


int  Coord___cmp__(Coord *self,Coord const &oprnd2) {
    {
        int retval;
        if (*self == oprnd2)
        retval = 0;
        else if (*self < oprnd2)
        retval = -1;
        else if (*self > oprnd2)
        retval = 1;
        return retval;
    }
}


static PyObject *_wrap_Coord___cmp__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Coord *arg0 ;
    Coord *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"OO:Coord___cmp__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int )Coord___cmp__(arg0,(Coord const &)*arg1);
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


Numeric_3D_Array_FLOAT * DielectricEnvironment_lett_get_cuberep(DielectricEnvironment_lett *self,CubeLatSpec const &cls) {
    {
        int ngr = cls.get_grid_dim();
        int nsq = ngr * ngr;
        int ncube = nsq * ngr;
        Numeric_3D_Array_FLOAT *array_data = new Numeric_3D_Array_FLOAT [ncube];
        if (array_data != 0) {
            const DielCubeRep dcr = self->get_cuberep(cls);
            int h = 0;
            for (int i = 0; i < ngr; ++i) {
                for (int j = 0; j < ngr; ++j) {
                    for (int k = 0; k < ngr; ++k) {
                        int fortind = i + j*ngr + k*nsq;
                        array_data[fortind] = dcr[h];
                        ++h;
                    }
                }
            }
        }
        return array_data;
    }
}


static PyObject *_wrap_DielectricEnvironment_lett_get_cuberep(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DielectricEnvironment_lett *arg0 ;
    CubeLatSpec *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    Numeric_3D_Array_FLOAT *result ;
    
    if(!PyArg_ParseTuple(args,"OO:DielectricEnvironment_lett_get_cuberep",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_DielectricEnvironment_lett,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_CubeLatSpec,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (Numeric_3D_Array_FLOAT *)DielectricEnvironment_lett_get_cuberep(arg0,(CubeLatSpec const &)*arg1);
        )
    }{
        if (result != 0) {
            int dims[3];      dims[0] = dims[1] = dims[2] = arg1->get_grid_dim();      PyArrayObject * array_data = (PyArrayObject *) PyArray_FromDimsAndData (3, dims, PyArray_FLOAT, (char *) result);      if (!array_data) return NULL;      array_data->flags |= OWN_DATA;      resultobj = (PyObject *) array_data;    
        }    else {
            PyErr_SetString (PyExc_RuntimeError, "Numeric_Array_""FLOAT"": memory alloc failed");      resultobj = 0;    
        }  
    }
    return resultobj;
}


Numeric_3D_Array_INT * ElectrolyteEnvironment_lett_get_cuberep(ElectrolyteEnvironment_lett *self,CubeLatSpec const &cls) {
    {
        int ngr = cls.get_grid_dim();
        int nsq = ngr * ngr;
        int ncube = nsq * ngr;
        Numeric_3D_Array_INT *array_data = new Numeric_3D_Array_INT [ncube];
        if (array_data != 0) {
            ElyCubeRep *ecr = self->get_cuberep(cls);
            int h = 0;
            for (int i = 0; i < ngr; ++i) {
                for (int j = 0; j < ngr; ++j) {
                    for (int k = 0; k < ngr; ++k) {
                        int fortind = i + j*ngr + k*nsq;
                        array_data[fortind] = ecr->is_guoy(h);
                        ++h;
                    }
                }
            }
            delete ecr;
        }
        return array_data;
    }
}


static PyObject *_wrap_ElectrolyteEnvironment_lett_get_cuberep(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ElectrolyteEnvironment_lett *arg0 ;
    CubeLatSpec *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    Numeric_3D_Array_INT *result ;
    
    if(!PyArg_ParseTuple(args,"OO:ElectrolyteEnvironment_lett_get_cuberep",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ElectrolyteEnvironment_lett,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_CubeLatSpec,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (Numeric_3D_Array_INT *)ElectrolyteEnvironment_lett_get_cuberep(arg0,(CubeLatSpec const &)*arg1);
        )
    }{
        if (result != 0) {
            int dims[3];      dims[0] = dims[1] = dims[2] = arg1->get_grid_dim();      PyArrayObject * array_data = (PyArrayObject *) PyArray_FromDimsAndData (3, dims, PyArray_INT, (char *) result);      if (!array_data) return NULL;      array_data->flags |= OWN_DATA;      resultobj = (PyObject *) array_data;    
        }    else {
            PyErr_SetString (PyExc_RuntimeError, "Numeric_Array_""INT"": memory alloc failed");      resultobj = 0;    
        }  
    }
    return resultobj;
}


Numeric_3D_Array_FLOAT * ElstatPot_lett_get_cuberep(ElstatPot_lett *self,CubeLatSpec const &cls) {
    {
        int grid_dim = cls.get_grid_dim();
        int nsq = grid_dim * grid_dim;
        int ncube = nsq * grid_dim;
        Numeric_3D_Array_FLOAT *array_data = new Numeric_3D_Array_FLOAT [ncube];
        if (array_data != 0) {
            float grlen = (float) (grid_dim - 1);
            float spacing = cls.get_spacing();
            float halfgrlen = grlen/2;
            Coord gridcenter_in_grid(halfgrlen, halfgrlen, halfgrlen);
            Coord gridcenter_in_space = cls.get_center();
            Coord gridpoint_in_space;
            for (int i=0; i<grid_dim; ++i) {
                gridpoint_in_space.x =
                spacing * ((float) i - gridcenter_in_grid.x)
                + gridcenter_in_space.x;
                for (int j=0; j<grid_dim; ++j) {
                    gridpoint_in_space.y = spacing * ((float) j - gridcenter_in_grid.y)
                    + gridcenter_in_space.y;
                    for (int k=0; k<grid_dim; ++k) {
                        gridpoint_in_space.z = spacing * ((float) k - gridcenter_in_grid.z)
                        + gridcenter_in_space.z;
                        int fortind = i + j*grid_dim + k*nsq;
                        array_data[fortind] = self->value(gridpoint_in_space);
                    }
                }
            }
        }
        return array_data;
    }
}


static PyObject *_wrap_ElstatPot_lett_get_cuberep(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ElstatPot_lett *arg0 ;
    CubeLatSpec *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    Numeric_3D_Array_FLOAT *result ;
    
    if(!PyArg_ParseTuple(args,"OO:ElstatPot_lett_get_cuberep",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ElstatPot_lett,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_CubeLatSpec,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (Numeric_3D_Array_FLOAT *)ElstatPot_lett_get_cuberep(arg0,(CubeLatSpec const &)*arg1);
        )
    }{
        if (result != 0) {
            int dims[3];      dims[0] = dims[1] = dims[2] = arg1->get_grid_dim();      PyArrayObject * array_data = (PyArrayObject *) PyArray_FromDimsAndData (3, dims, PyArray_FLOAT, (char *) result);      if (!array_data) return NULL;      array_data->flags |= OWN_DATA;      resultobj = (PyObject *) array_data;    
        }    else {
            PyErr_SetString (PyExc_RuntimeError, "Numeric_Array_""FLOAT"": memory alloc failed");      resultobj = 0;    
        }  
    }
    return resultobj;
}


static PyObject *_wrap_ElstatPot_lett___add__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ElstatPot_lett *arg0 ;
    ElstatPot_lett *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    ElstatPotCombination *result ;
    
    if(!PyArg_ParseTuple(args,"OO:ElstatPot_lett___add__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ElstatPot_lett,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_ElstatPot_lett,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new ElstatPotCombination (ElstatPot_lett___add__(arg0,*arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_ElstatPotCombination);
    return resultobj;
}


static PyObject *_wrap_ElstatPot_lett___add____L80(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ElstatPot_lett *arg0 ;
    ElstatPotCombination *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    ElstatPotCombination *result ;
    
    if(!PyArg_ParseTuple(args,"OO:ElstatPot_lett___add____L80",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ElstatPot_lett,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_ElstatPotCombination,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new ElstatPotCombination (ElstatPot_lett___add__(arg0,*arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_ElstatPotCombination);
    return resultobj;
}


static PyObject *_wrap_Atom_coord_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Atom *arg0 ;
    Coord *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:Atom_coord_set",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Atom,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(arg0->coord = *arg1;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_Atom_coord_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Atom *arg0 ;
    PyObject * argo0 =0 ;
    Coord *result ;
    
    if(!PyArg_ParseTuple(args,"O:Atom_coord_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Atom,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (Coord *)& (arg0->coord);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Coord);
    return resultobj;
}


static PyObject *_wrap_Atom_rad_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Atom *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Of:Atom_rad_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Atom,1)) == -1) return NULL;
    {
        MEAD_try_catch(arg0->rad = arg1;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_Atom_rad_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Atom *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:Atom_rad_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Atom,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float ) (arg0->rad);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_Atom_charge_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Atom *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Of:Atom_charge_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Atom,1)) == -1) return NULL;
    {
        MEAD_try_catch(arg0->charge = arg1;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_Atom_charge_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Atom *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:Atom_charge_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Atom,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float ) (arg0->charge);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_Atom_atname_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Atom *arg0 ;
    string *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,"OO:Atom_atname_set",&argo0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Atom,1)) == -1) return NULL;
    {
        arg1 = new string (PyString_AsString (obj1)); 
    }
    {
        MEAD_try_catch(arg0->atname = *arg1;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_Atom_atname_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Atom *arg0 ;
    PyObject * argo0 =0 ;
    string *result ;
    
    if(!PyArg_ParseTuple(args,"O:Atom_atname_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Atom,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (string *)& (arg0->atname);
        )
    }{
        resultobj = PyString_FromString (result->c_str()); 
    }
    return resultobj;
}


static PyObject *_wrap_Atom_resname_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Atom *arg0 ;
    string *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,"OO:Atom_resname_set",&argo0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Atom,1)) == -1) return NULL;
    {
        arg1 = new string (PyString_AsString (obj1)); 
    }
    {
        MEAD_try_catch(arg0->resname = *arg1;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_Atom_resname_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Atom *arg0 ;
    PyObject * argo0 =0 ;
    string *result ;
    
    if(!PyArg_ParseTuple(args,"O:Atom_resname_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Atom,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (string *)& (arg0->resname);
        )
    }{
        resultobj = PyString_FromString (result->c_str()); 
    }
    return resultobj;
}


static PyObject *_wrap_Atom_chainid_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Atom *arg0 ;
    string *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,"OO:Atom_chainid_set",&argo0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Atom,1)) == -1) return NULL;
    {
        arg1 = new string (PyString_AsString (obj1)); 
    }
    {
        MEAD_try_catch(arg0->chainid = *arg1;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_Atom_chainid_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Atom *arg0 ;
    PyObject * argo0 =0 ;
    string *result ;
    
    if(!PyArg_ParseTuple(args,"O:Atom_chainid_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Atom,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (string *)& (arg0->chainid);
        )
    }{
        resultobj = PyString_FromString (result->c_str()); 
    }
    return resultobj;
}


static PyObject *_wrap_Atom_resnum_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Atom *arg0 ;
    int arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Oi:Atom_resnum_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Atom,1)) == -1) return NULL;
    {
        MEAD_try_catch(arg0->resnum = arg1;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_Atom_resnum_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Atom *arg0 ;
    PyObject * argo0 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"O:Atom_resnum_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Atom,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int ) (arg0->resnum);
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_new_Atom(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Atom *result ;
    
    if(!PyArg_ParseTuple(args,":new_Atom")) return NULL;
    {
        MEAD_try_catch(result = (Atom *)new Atom();
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Atom);
    return resultobj;
}


static PyObject *_wrap_new_Atom__deepcopy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Atom *arg0 ;
    PyObject * argo0 =0 ;
    Atom *result ;
    
    if(!PyArg_ParseTuple(args,"O:new_Atom__deepcopy",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Atom,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (Atom *)new Atom((Atom const &)*arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Atom);
    return resultobj;
}


static PyObject *_wrap_new_Atom__L23(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Atom *arg0 ;
    PyObject * argo0 =0 ;
    Atom *result ;
    
    if(!PyArg_ParseTuple(args,"O:new_Atom__L23",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Atom,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (Atom *)new Atom((Atom const &)*arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Atom);
    return resultobj;
}


static PyObject *_wrap_delete_Atom(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Atom *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_Atom",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Atom,1)) == -1) return NULL;
    {
        MEAD_try_catch(delete arg0;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


void  Atom_write(Atom *self) {
    {
        self->print(cout); 
    }
}


static PyObject *_wrap_Atom_write(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Atom *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:Atom_write",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Atom,1)) == -1) return NULL;
    {
        MEAD_try_catch(Atom_write(arg0);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


bool  Atom___eq__(Atom *self,Atom const &oprnd2) {
    {
        return *self == oprnd2;
    }
}


static PyObject *_wrap_Atom___eq__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Atom *arg0 ;
    Atom *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"OO:Atom___eq__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Atom,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Atom,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (bool )Atom___eq__(arg0,(Atom const &)*arg1);
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


bool  Atom___ne__(Atom *self,Atom const &oprnd2) {
    {
        return *self != oprnd2;
    }
}


static PyObject *_wrap_Atom___ne__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Atom *arg0 ;
    Atom *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"OO:Atom___ne__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Atom,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Atom,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (bool )Atom___ne__(arg0,(Atom const &)*arg1);
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


bool  Atom___lt__(Atom *self,Atom const &oprnd2) {
    {
        return *self < oprnd2;
    }
}


static PyObject *_wrap_Atom___lt__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Atom *arg0 ;
    Atom *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"OO:Atom___lt__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Atom,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Atom,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (bool )Atom___lt__(arg0,(Atom const &)*arg1);
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


bool  Atom___gt__(Atom *self,Atom const &oprnd2) {
    {
        return *self > oprnd2;
    }
}


static PyObject *_wrap_Atom___gt__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Atom *arg0 ;
    Atom *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"OO:Atom___gt__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Atom,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Atom,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (bool )Atom___gt__(arg0,(Atom const &)*arg1);
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


int  Atom___cmp__(Atom *self,Atom const &oprnd2) {
    {
        int retval;
        if (*self == oprnd2)
        retval = 0;
        else if (*self < oprnd2)
        retval = -1;
        else if (*self > oprnd2)
        retval = 1;
        return retval;
    }
}


static PyObject *_wrap_Atom___cmp__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Atom *arg0 ;
    Atom *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"OO:Atom___cmp__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Atom,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Atom,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int )Atom___cmp__(arg0,(Atom const &)*arg1);
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_new_AtomID(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomID *result ;
    
    if(!PyArg_ParseTuple(args,":new_AtomID")) return NULL;
    {
        MEAD_try_catch(result = (AtomID *)new AtomID();
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_AtomID);
    return resultobj;
}


static PyObject *_wrap_new_AtomID__L16(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg0 ;
    string *arg1 ;
    string *arg2 ;
    string str ;
    PyObject * obj1  = 0 ;
    string str0 ;
    PyObject * obj2  = 0 ;
    AtomID *result ;
    
    if(!PyArg_ParseTuple(args,"iOO:new_AtomID__L16",&arg0,&obj1,&obj2)) return NULL;
    {
        if (PyString_Check(obj1)) {
            str = string(PyString_AsString(obj1));
            arg1 = &str;
        }
        else {
            PyErr_SetString(PyExc_TypeError, "arg must be a string");
            return NULL;
        }
    }
    {
        if (PyString_Check(obj2)) {
            str0 = string(PyString_AsString(obj2));
            arg2 = &str0;
        }
        else {
            PyErr_SetString(PyExc_TypeError, "arg must be a string");
            return NULL;
        }
    }
    {
        MEAD_try_catch(result = (AtomID *)new AtomID(arg0,(string const &)*arg1,(string const &)*arg2);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_AtomID);
    return resultobj;
}


static PyObject *_wrap_new_AtomID__deepcopy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomID *arg0 ;
    PyObject * argo0 =0 ;
    AtomID *result ;
    
    if(!PyArg_ParseTuple(args,"O:new_AtomID__deepcopy",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomID,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (AtomID *)new AtomID((AtomID const &)*arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_AtomID);
    return resultobj;
}


static PyObject *_wrap_new_AtomID__L17(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomID *arg0 ;
    PyObject * argo0 =0 ;
    AtomID *result ;
    
    if(!PyArg_ParseTuple(args,"O:new_AtomID__L17",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomID,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (AtomID *)new AtomID((AtomID const &)*arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_AtomID);
    return resultobj;
}


static PyObject *_wrap_new_AtomID__L18(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Atom *arg0 ;
    PyObject * argo0 =0 ;
    AtomID *result ;
    
    if(!PyArg_ParseTuple(args,"O:new_AtomID__L18",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Atom,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (AtomID *)new AtomID((Atom const &)*arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_AtomID);
    return resultobj;
}


static PyObject *_wrap_delete_AtomID(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomID *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_AtomID",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomID,1)) == -1) return NULL;
    {
        MEAD_try_catch(delete arg0;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_AtomID_resnum_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomID *arg0 ;
    int arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Oi:AtomID_resnum_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomID,1)) == -1) return NULL;
    {
        MEAD_try_catch(AtomID_resnum_set(arg0,arg1);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_AtomID_resnum_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomID *arg0 ;
    PyObject * argo0 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"O:AtomID_resnum_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomID,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int )AtomID_resnum_get(arg0);
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_AtomID_atname_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomID *arg0 ;
    string *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,"OO:AtomID_atname_set",&argo0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomID,1)) == -1) return NULL;
    {
        arg1 = new string (PyString_AsString (obj1)); 
    }
    {
        MEAD_try_catch(AtomID_atname_set(arg0,arg1);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_AtomID_atname_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomID *arg0 ;
    PyObject * argo0 =0 ;
    string *result ;
    
    if(!PyArg_ParseTuple(args,"O:AtomID_atname_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomID,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (string *)AtomID_atname_get(arg0);
        )
    }{
        resultobj = PyString_FromString (result->c_str()); 
    }
    return resultobj;
}


static PyObject *_wrap_AtomID_chainid_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomID *arg0 ;
    string *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,"OO:AtomID_chainid_set",&argo0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomID,1)) == -1) return NULL;
    {
        arg1 = new string (PyString_AsString (obj1)); 
    }
    {
        MEAD_try_catch(AtomID_chainid_set(arg0,arg1);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_AtomID_chainid_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomID *arg0 ;
    PyObject * argo0 =0 ;
    string *result ;
    
    if(!PyArg_ParseTuple(args,"O:AtomID_chainid_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomID,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (string *)AtomID_chainid_get(arg0);
        )
    }{
        resultobj = PyString_FromString (result->c_str()); 
    }
    return resultobj;
}


static PyObject *_wrap_new_AtomID__L41(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg0 ;
    string *arg1 ;
    string str ;
    PyObject * obj1  = 0 ;
    AtomID *result ;
    
    if(!PyArg_ParseTuple(args,"iO:new_AtomID__L41",&arg0,&obj1)) return NULL;
    {
        if (PyString_Check(obj1)) {
            str = string(PyString_AsString(obj1));
            arg1 = &str;
        }
        else {
            PyErr_SetString(PyExc_TypeError, "arg must be a string");
            return NULL;
        }
    }
    {
        MEAD_try_catch(result = (AtomID *)new_AtomID(arg0,(string const &)*arg1);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_AtomID);
    return resultobj;
}


bool  AtomID___eq__(AtomID *self,AtomID const &oprnd2) {
    {
        return *self == oprnd2;
    }
}


static PyObject *_wrap_AtomID___eq__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomID *arg0 ;
    AtomID *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"OO:AtomID___eq__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomID,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_AtomID,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (bool )AtomID___eq__(arg0,(AtomID const &)*arg1);
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


bool  AtomID___ne__(AtomID *self,AtomID const &oprnd2) {
    {
        return *self != oprnd2;
    }
}


static PyObject *_wrap_AtomID___ne__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomID *arg0 ;
    AtomID *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"OO:AtomID___ne__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomID,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_AtomID,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (bool )AtomID___ne__(arg0,(AtomID const &)*arg1);
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


bool  AtomID___lt__(AtomID *self,AtomID const &oprnd2) {
    {
        return *self < oprnd2;
    }
}


static PyObject *_wrap_AtomID___lt__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomID *arg0 ;
    AtomID *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"OO:AtomID___lt__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomID,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_AtomID,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (bool )AtomID___lt__(arg0,(AtomID const &)*arg1);
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


bool  AtomID___gt__(AtomID *self,AtomID const &oprnd2) {
    {
        return *self > oprnd2;
    }
}


static PyObject *_wrap_AtomID___gt__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomID *arg0 ;
    AtomID *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"OO:AtomID___gt__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomID,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_AtomID,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (bool )AtomID___gt__(arg0,(AtomID const &)*arg1);
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


int  AtomID___cmp__(AtomID *self,AtomID const &oprnd2) {
    {
        int retval;
        if (*self == oprnd2)
        retval = 0;
        else if (*self < oprnd2)
        retval = -1;
        else if (*self > oprnd2)
        retval = 1;
        return retval;
    }
}


static PyObject *_wrap_AtomID___cmp__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomID *arg0 ;
    AtomID *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"OO:AtomID___cmp__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomID,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_AtomID,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int )AtomID___cmp__(arg0,(AtomID const &)*arg1);
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_new_AtomSet(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *result ;
    
    if(!PyArg_ParseTuple(args,":new_AtomSet")) return NULL;
    {
        MEAD_try_catch(result = (AtomSet *)new AtomSet();
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_AtomSet);
    return resultobj;
}


static PyObject *_wrap_new_AtomSet__L16(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg0 ;
    string str ;
    PyObject * obj0  = 0 ;
    AtomSet *result ;
    
    if(!PyArg_ParseTuple(args,"O:new_AtomSet__L16",&obj0)) return NULL;
    {
        if (PyString_Check(obj0)) {
            str = string(PyString_AsString(obj0));
            arg0 = &str;
        }
        else {
            PyErr_SetString(PyExc_TypeError, "arg must be a string");
            return NULL;
        }
    }
    {
        MEAD_try_catch(result = (AtomSet *)new AtomSet((string const &)*arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_AtomSet);
    return resultobj;
}


static PyObject *_wrap_new_AtomSet__L17(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    list_Atom *arg0 ;
    list_Atom vi ;
    PyObject * obj0  = 0 ;
    AtomSet *result ;
    
    if(!PyArg_ParseTuple(args,"O:new_AtomSet__L17",&obj0)) return NULL;
    {
        if (PyList_Check(obj0)) {
            int size = PyList_Size(obj0);      for (int i=0; i<size; ++i) {
                PyObject *o = PyList_GetItem(obj0, i);        Atom *a=0;        if ((SWIG_ConvertPtr(o,(void **) &a,SWIGTYPE_p_Atom,1)) == -1) {
                    PyErr_SetString(PyExc_TypeError,                          "Conversion of list item to Atom failed");          return NULL;        
                }        vi.push_back(*a);      
            }      arg0 = &vi;    
        }    else {
            PyErr_SetString(PyExc_TypeError, "not a list");      return NULL;    
        }  
    }
    {
        MEAD_try_catch(result = (AtomSet *)new AtomSet((list_Atom const &)*arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_AtomSet);
    return resultobj;
}


static PyObject *_wrap_new_AtomSet__deepcopy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *arg0 ;
    PyObject * argo0 =0 ;
    AtomSet *result ;
    
    if(!PyArg_ParseTuple(args,"O:new_AtomSet__deepcopy",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (AtomSet *)new AtomSet((AtomSet const &)*arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_AtomSet);
    return resultobj;
}


static PyObject *_wrap_new_AtomSet__L18(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *arg0 ;
    PyObject * argo0 =0 ;
    AtomSet *result ;
    
    if(!PyArg_ParseTuple(args,"O:new_AtomSet__L18",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (AtomSet *)new AtomSet((AtomSet const &)*arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_AtomSet);
    return resultobj;
}


static PyObject *_wrap_delete_AtomSet(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_AtomSet",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(delete arg0;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_AtomSet_read(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:AtomSet_read",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(arg0->read();
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_AtomSet_read__L21(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *arg0 ;
    string *arg1 ;
    PyObject * argo0 =0 ;
    string str ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,"OO:AtomSet_read__L21",&argo0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    {
        if (PyString_Check(obj1)) {
            str = string(PyString_AsString(obj1));
            arg1 = &str;
        }
        else {
            PyErr_SetString(PyExc_TypeError, "arg must be a string");
            return NULL;
        }
    }
    {
        MEAD_try_catch(arg0->read((string const &)*arg1);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_AtomSet_geom_cent(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *arg0 ;
    PyObject * argo0 =0 ;
    Coord *result ;
    
    if(!PyArg_ParseTuple(args,"O:AtomSet_geom_cent",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Coord (arg0->geom_cent());)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Coord);
    return resultobj;
}


static PyObject *_wrap_AtomSet_set_coords_to(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *arg0 ;
    class AtomSet *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:AtomSet_set_coords_to",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(arg0->set_coords_to((class AtomSet const &)*arg1);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_AtomSet_name_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *arg0 ;
    string *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,"OO:AtomSet_name_set",&argo0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    {
        arg1 = new string (PyString_AsString (obj1)); 
    }
    {
        MEAD_try_catch(AtomSet_name_set(arg0,arg1);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_AtomSet_name_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *arg0 ;
    PyObject * argo0 =0 ;
    string *result ;
    
    if(!PyArg_ParseTuple(args,"O:AtomSet_name_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (string *)AtomSet_name_get(arg0);
        )
    }{
        resultobj = PyString_FromString (result->c_str()); 
    }
    return resultobj;
}


void  AtomSet_build_from_vectors(AtomSet *self,vector_string &rnames,vector_string &anames,vector_int &rnums,vector_Coord &coords,vector_float &radii,vector_float &charges) {
    {
        self->build_from_vectors (rnames, anames, rnums, coords, radii, charges);
    }
}


static PyObject *_wrap_AtomSet_build_from_vectors(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *arg0 ;
    vector_string *arg1 ;
    vector_string *arg2 ;
    vector_int *arg3 ;
    vector_Coord *arg4 ;
    vector_float *arg5 ;
    vector_float *arg6 ;
    PyObject * argo0 =0 ;
    vector_string vpe ;
    PyObject * obj1  = 0 ;
    vector_string vpe0 ;
    PyObject * obj2  = 0 ;
    vector_int vpe1 ;
    PyObject * obj3  = 0 ;
    vector_Coord vpe2 ;
    PyObject * obj4  = 0 ;
    vector_float vpe3 ;
    PyObject * obj5  = 0 ;
    vector_float vpe4 ;
    PyObject * obj6  = 0 ;
    
    if(!PyArg_ParseTuple(args,"OOOOOOO:AtomSet_build_from_vectors",&argo0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    {
        if (PyList_Check(obj1)) {
            int size = PyList_Size(obj1);      for (int i=0; i<size; ++i) {
                PyObject *o = PyList_GetItem(obj1, i);        if (PyString_Check(o)) {
                    vpe.push_back( string(PyString_AsString (o)));        
                }        else {
                    PyErr_SetString(PyExc_TypeError, "Conversion of vector element to string failed");          return NULL;        
                }      
            }      arg1 = &vpe;    
        }    else {
            PyErr_SetString(PyExc_TypeError, "not a list");      return NULL;    
        }  
    }
    {
        if (PyList_Check(obj2)) {
            int size = PyList_Size(obj2);      for (int i=0; i<size; ++i) {
                PyObject *o = PyList_GetItem(obj2, i);        if (PyString_Check(o)) {
                    vpe0.push_back( string(PyString_AsString (o)));        
                }        else {
                    PyErr_SetString(PyExc_TypeError, "Conversion of vector element to string failed");          return NULL;        
                }      
            }      arg2 = &vpe0;    
        }    else {
            PyErr_SetString(PyExc_TypeError, "not a list");      return NULL;    
        }  
    }
    {
        if (PyList_Check(obj3)) {
            int size = PyList_Size(obj3);      for (int i=0; i<size; ++i) {
                PyObject *o = PyList_GetItem(obj3, i);        if (PyInt_Check(o)) {
                    vpe1.push_back( int(PyInt_AsLong (o)));        
                }        else {
                    PyErr_SetString(PyExc_TypeError, "Conversion of vector element to int failed");          return NULL;        
                }      
            }      arg3 = &vpe1;    
        }    else {
            PyErr_SetString(PyExc_TypeError, "not a list");      return NULL;    
        }  
    }
    {
        if (PyList_Check(obj4)) {
            int size = PyList_Size(obj4);      for (int i=0; i<size; ++i) {
                PyObject *o = PyList_GetItem(obj4, i);        Coord *peptr;        if ((SWIG_ConvertPtr(o,(void **) & peptr, SWIGTYPE_p_Coord,1)) != -1) {
                    vpe2.push_back(*peptr);        
                }        else {
                    PyErr_SetString(PyExc_TypeError, "Conversion of vector element to Coord failed");          return NULL;        
                }      
            }      arg4 = &vpe2;    
        }    else {
            PyErr_SetString(PyExc_TypeError, "not a list");      return NULL;    
        }  
    }
    {
        if (PyList_Check(obj5)) {
            int size = PyList_Size(obj5);      for (int i=0; i<size; ++i) {
                PyObject *o = PyList_GetItem(obj5, i);        if (PyFloat_Check(o)) {
                    vpe3.push_back( float(PyFloat_AsDouble (o)));        
                }        else {
                    PyErr_SetString(PyExc_TypeError, "Conversion of vector element to float failed");          return NULL;        
                }      
            }      arg5 = &vpe3;    
        }    else {
            PyErr_SetString(PyExc_TypeError, "not a list");      return NULL;    
        }  
    }
    {
        if (PyList_Check(obj6)) {
            int size = PyList_Size(obj6);      for (int i=0; i<size; ++i) {
                PyObject *o = PyList_GetItem(obj6, i);        if (PyFloat_Check(o)) {
                    vpe4.push_back( float(PyFloat_AsDouble (o)));        
                }        else {
                    PyErr_SetString(PyExc_TypeError, "Conversion of vector element to float failed");          return NULL;        
                }      
            }      arg6 = &vpe4;    
        }    else {
            PyErr_SetString(PyExc_TypeError, "not a list");      return NULL;    
        }  
    }
    {
        MEAD_try_catch(AtomSet_build_from_vectors(arg0,*arg1,*arg2,*arg3,*arg4,*arg5,*arg6);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


void  AtomSet_insert(AtomSet *self,Atom const &a) {
    {
        self->insert(a); 
    }
}


static PyObject *_wrap_AtomSet_insert(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *arg0 ;
    Atom *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:AtomSet_insert",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Atom,1)) == -1) return NULL;
    {
        MEAD_try_catch(AtomSet_insert(arg0,(Atom const &)*arg1);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


void  AtomSet_clear(AtomSet *self) {
    {
        dict_clear(self); 
    }
}


static PyObject *_wrap_AtomSet_clear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:AtomSet_clear",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(AtomSet_clear(arg0);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


AtomSet * AtomSet_copy(AtomSet *self) {
    {
        return new AtomSet(*self); 
    }
}


static PyObject *_wrap_AtomSet_copy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *arg0 ;
    PyObject * argo0 =0 ;
    AtomSet *result ;
    
    if(!PyArg_ParseTuple(args,"O:AtomSet_copy",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (AtomSet *)AtomSet_copy(arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_AtomSet);
    return resultobj;
}


int  AtomSet_has_key(AtomSet *self,AtomID const &k) {
    {
        return dict_has_key(self, k); 
    }
}


static PyObject *_wrap_AtomSet_has_key(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *arg0 ;
    AtomID *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"OO:AtomSet_has_key",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_AtomID,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int )AtomSet_has_key(arg0,(AtomID const &)*arg1);
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


int  AtomSet___len__(AtomSet *self) {
    {
        return dict___len__(self); 
    }
}


static PyObject *_wrap_AtomSet___len__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *arg0 ;
    PyObject * argo0 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"O:AtomSet___len__",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int )AtomSet___len__(arg0);
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


void  AtomSet___delitem__(AtomSet *self,AtomID const &k) {
    {
        dict___delitem__(self, k); 
    }
}


static PyObject *_wrap_AtomSet___delitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *arg0 ;
    AtomID *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:AtomSet___delitem__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_AtomID,1)) == -1) return NULL;
    {
        MEAD_try_catch(AtomSet___delitem__(arg0,(AtomID const &)*arg1);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


void  AtomSet_update(AtomSet *self,AtomSet const &ats) {
    {
        dict_update(self, ats); 
    }
}


static PyObject *_wrap_AtomSet_update(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *arg0 ;
    AtomSet *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:AtomSet_update",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(AtomSet_update(arg0,(AtomSet const &)*arg1);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


list_AtomID * AtomSet_keys(AtomSet *self) {
    {
        return dict_keys(self); 
    }
}


static PyObject *_wrap_AtomSet_keys(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *arg0 ;
    PyObject * argo0 =0 ;
    list_AtomID *result ;
    
    if(!PyArg_ParseTuple(args,"O:AtomSet_keys",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (list_AtomID *)AtomSet_keys(arg0);
        )
    }{
        resultobj = PyList_New(0);    if (!resultobj) return NULL;    for (list_AtomID::const_iterator p = result->begin(); p!=result->end(); ++p) {
            AtomID *fp = new AtomID(*p);      PyObject *optr = AtomIDPtr((void *) fp, 1);      PyList_Append(resultobj, optr);      Py_DECREF(optr);    
        }    delete result;  
    }
    return resultobj;
}


list_AtomPtr * AtomSet_values(AtomSet *self) {
    {
        return dict_values(self); 
    }
}


static PyObject *_wrap_AtomSet_values(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *arg0 ;
    PyObject * argo0 =0 ;
    list_AtomPtr *result ;
    
    if(!PyArg_ParseTuple(args,"O:AtomSet_values",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (list_AtomPtr *)AtomSet_values(arg0);
        )
    }{
        resultobj = PyList_New(0);    if (!resultobj) return NULL;    for (list_AtomPtr::const_iterator p = result->begin(); p!=result->end(); ++p) {
            PyObject *optr = AtomPtr((void *) &(*p), 0);      PyList_Append(resultobj, optr);      Py_DECREF(optr);    
        }    delete result;  
    }
    return resultobj;
}


Atom * AtomSet___getitem__(AtomSet *self,AtomID const &oprnd2) {
    {
        return &(*self)[oprnd2];
    }
}


static PyObject *_wrap_AtomSet___getitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *arg0 ;
    AtomID *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    Atom *result ;
    
    if(!PyArg_ParseTuple(args,"OO:AtomSet___getitem__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_AtomID,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (Atom *)AtomSet___getitem__(arg0,(AtomID const &)*arg1);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Atom);
    return resultobj;
}


void  AtomSet___setitem__(AtomSet *self,AtomID const &oprnd2,Atom _value) {
    {
        (*self)[oprnd2]=_value;
    }
}


static PyObject *_wrap_AtomSet___setitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *arg0 ;
    AtomID *arg1 ;
    Atom *arg2 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    PyObject * argo2 =0 ;
    
    if(!PyArg_ParseTuple(args,"OOO:AtomSet___setitem__",&argo0,&argo1,&argo2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_AtomID,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo2,(void **) &arg2,SWIGTYPE_p_Atom,1)) == -1) return NULL;
    {
        MEAD_try_catch(AtomSet___setitem__(arg0,(AtomID const &)*arg1,*arg2);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_PointCharge(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PointCharge *result ;
    
    if(!PyArg_ParseTuple(args,":new_PointCharge")) return NULL;
    {
        MEAD_try_catch(result = (PointCharge *)new PointCharge();
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_PointCharge);
    return resultobj;
}


static PyObject *_wrap_new_PointCharge__L16(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    float arg0 ;
    Coord *arg1 ;
    PyObject * argo1 =0 ;
    PointCharge *result ;
    
    if(!PyArg_ParseTuple(args,"fO:new_PointCharge__L16",&arg0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (PointCharge *)new PointCharge(arg0,(Coord const &)*arg1);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_PointCharge);
    return resultobj;
}


static PyObject *_wrap_new_PointCharge__L17(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Coord *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    PointCharge *result ;
    
    if(!PyArg_ParseTuple(args,"Of:new_PointCharge__L17",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (PointCharge *)new PointCharge((Coord const &)*arg0,arg1);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_PointCharge);
    return resultobj;
}


static PyObject *_wrap_delete_PointCharge(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PointCharge *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_PointCharge",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_PointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(delete arg0;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_PointCharge_charge_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PointCharge *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Of:PointCharge_charge_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_PointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(arg0->charge = arg1;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_PointCharge_charge_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PointCharge *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:PointCharge_charge_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_PointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float ) (arg0->charge);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_PointCharge_coord_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PointCharge *arg0 ;
    Coord *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:PointCharge_coord_set",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_PointCharge,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(arg0->coord = *arg1;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_PointCharge_coord_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PointCharge *arg0 ;
    PyObject * argo0 =0 ;
    Coord *result ;
    
    if(!PyArg_ParseTuple(args,"O:PointCharge_coord_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_PointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (Coord *)& (arg0->coord);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Coord);
    return resultobj;
}


bool  PointCharge___eq__(PointCharge *self,PointCharge const &oprnd2) {
    {
        return *self == oprnd2;
    }
}


static PyObject *_wrap_PointCharge___eq__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PointCharge *arg0 ;
    PointCharge *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"OO:PointCharge___eq__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_PointCharge,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_PointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (bool )PointCharge___eq__(arg0,(PointCharge const &)*arg1);
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_new_AtomChargeSet(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomChargeSet *result ;
    
    if(!PyArg_ParseTuple(args,":new_AtomChargeSet")) return NULL;
    {
        MEAD_try_catch(result = (AtomChargeSet *)new AtomChargeSet();
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_AtomChargeSet);
    return resultobj;
}


static PyObject *_wrap_new_AtomChargeSet__L16(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *arg0 ;
    PyObject * argo0 =0 ;
    AtomChargeSet *result ;
    
    if(!PyArg_ParseTuple(args,"O:new_AtomChargeSet__L16",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (AtomChargeSet *)new AtomChargeSet((AtomSet const &)*arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_AtomChargeSet);
    return resultobj;
}


static PyObject *_wrap_new_AtomChargeSet__deepcopy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomChargeSet *arg0 ;
    PyObject * argo0 =0 ;
    AtomChargeSet *result ;
    
    if(!PyArg_ParseTuple(args,"O:new_AtomChargeSet__deepcopy",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomChargeSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (AtomChargeSet *)new AtomChargeSet((AtomChargeSet const &)*arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_AtomChargeSet);
    return resultobj;
}


static PyObject *_wrap_new_AtomChargeSet__L17(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomChargeSet *arg0 ;
    PyObject * argo0 =0 ;
    AtomChargeSet *result ;
    
    if(!PyArg_ParseTuple(args,"O:new_AtomChargeSet__L17",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomChargeSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (AtomChargeSet *)new AtomChargeSet((AtomChargeSet const &)*arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_AtomChargeSet);
    return resultobj;
}


static PyObject *_wrap_delete_AtomChargeSet(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomChargeSet *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_AtomChargeSet",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomChargeSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(delete arg0;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_AtomChargeSet_total_charge(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomChargeSet *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:AtomChargeSet_total_charge",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomChargeSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )arg0->total_charge();
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_AtomChargeSet_has_charges(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomChargeSet *arg0 ;
    PyObject * argo0 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"O:AtomChargeSet_has_charges",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomChargeSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int )arg0->has_charges();
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_AtomChargeSet_vacuum_coulomb(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomChargeSet *arg0 ;
    Coord *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"OO:AtomChargeSet_vacuum_coulomb",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomChargeSet,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )arg0->vacuum_coulomb((Coord const &)*arg1);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_AtomChargeSet_number_points(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomChargeSet *arg0 ;
    PyObject * argo0 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"O:AtomChargeSet_number_points",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomChargeSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int )arg0->number_points();
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_AtomChargeSet___mul__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomChargeSet *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    AtomChargeSet *result ;
    
    if(!PyArg_ParseTuple(args,"Of:AtomChargeSet___mul__",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomChargeSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (AtomChargeSet *)AtomChargeSet___mul__(arg0,arg1);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_AtomChargeSet);
    return resultobj;
}


static PyObject *_wrap_AtomChargeSet___rmul__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomChargeSet *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    AtomChargeSet *result ;
    
    if(!PyArg_ParseTuple(args,"Of:AtomChargeSet___rmul__",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomChargeSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (AtomChargeSet *)AtomChargeSet___rmul__(arg0,arg1);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_AtomChargeSet);
    return resultobj;
}


static PyObject *_wrap_AtomChargeSet___div__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomChargeSet *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    AtomChargeSet *result ;
    
    if(!PyArg_ParseTuple(args,"Of:AtomChargeSet___div__",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomChargeSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (AtomChargeSet *)AtomChargeSet___div__(arg0,arg1);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_AtomChargeSet);
    return resultobj;
}


static PyObject *_wrap_AtomChargeSet___add__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomChargeSet *arg0 ;
    AtomChargeSet *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    AtomChargeSet *result ;
    
    if(!PyArg_ParseTuple(args,"OO:AtomChargeSet___add__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomChargeSet,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_AtomChargeSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (AtomChargeSet *)AtomChargeSet___add__(arg0,(AtomChargeSet const &)*arg1);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_AtomChargeSet);
    return resultobj;
}


static PyObject *_wrap_AtomChargeSet___add____L68(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomChargeSet *arg0 ;
    ManyPointCharge *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    ManyPointCharge *result ;
    
    if(!PyArg_ParseTuple(args,"OO:AtomChargeSet___add____L68",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomChargeSet,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_ManyPointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (ManyPointCharge *)AtomChargeSet___add__(arg0,(ManyPointCharge const &)*arg1);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ManyPointCharge);
    return resultobj;
}


static PyObject *_wrap_AtomChargeSet___add____L69(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomChargeSet *arg0 ;
    OnePointCharge *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    ManyPointCharge *result ;
    
    if(!PyArg_ParseTuple(args,"OO:AtomChargeSet___add____L69",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomChargeSet,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_OnePointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (ManyPointCharge *)AtomChargeSet___add__(arg0,(OnePointCharge const &)*arg1);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ManyPointCharge);
    return resultobj;
}


list_PointCharge * AtomChargeSet_pointcharges(AtomChargeSet *self) {
    {
        list_PointCharge *lpc = new list_PointCharge(0);
        for (AtomSet::const_iterator ind = self->begin(); ind != self->end(); ++ind)
        {
            const Atom& a = ind->second;
            lpc->push_back(PointCharge(a.coord, a.charge));
        }
        return lpc;
    }
}


static PyObject *_wrap_AtomChargeSet_pointcharges(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomChargeSet *arg0 ;
    PyObject * argo0 =0 ;
    list_PointCharge *result ;
    
    if(!PyArg_ParseTuple(args,"O:AtomChargeSet_pointcharges",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomChargeSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (list_PointCharge *)AtomChargeSet_pointcharges(arg0);
        )
    }{
        resultobj = PyList_New(0);    if (!resultobj) return NULL;    for (list_PointCharge::const_iterator p = result->begin(); p!=result->end(); ++p) {
            PointCharge *fp = new PointCharge(*p);      PyObject *optr = PointChargePtr((void *) fp, 1);      PyList_Append(resultobj, optr);      Py_DECREF(optr);    
        }    delete result;  
    }
    return resultobj;
}


static PyObject *_wrap_AtomChargeSet___mul____L113(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomChargeSet *arg0 ;
    ElstatPot_lett *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"OO:AtomChargeSet___mul____L113",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomChargeSet,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_ElstatPot_lett,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )AtomChargeSet___mul__(arg0,(ElstatPot_lett const &)*arg1);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_AtomChargeSet___mul____L114(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomChargeSet *arg0 ;
    ElstatPotCombination *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"OO:AtomChargeSet___mul____L114",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomChargeSet,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_ElstatPotCombination,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )AtomChargeSet___mul__(arg0,(ElstatPotCombination const &)*arg1);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_new_ManyPointCharge(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ManyPointCharge *result ;
    
    if(!PyArg_ParseTuple(args,":new_ManyPointCharge")) return NULL;
    {
        MEAD_try_catch(result = (ManyPointCharge *)new ManyPointCharge();
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ManyPointCharge);
    return resultobj;
}


static PyObject *_wrap_new_ManyPointCharge__L16(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    list_PointCharge *arg0 ;
    list_PointCharge vi ;
    PyObject * obj0  = 0 ;
    ManyPointCharge *result ;
    
    if(!PyArg_ParseTuple(args,"O:new_ManyPointCharge__L16",&obj0)) return NULL;
    {
        if (PyList_Check(obj0)) {
            int size = PyList_Size(obj0);      for (int i=0; i<size; ++i) {
                PyObject *o = PyList_GetItem(obj0, i);        PointCharge *a=0;        if ((SWIG_ConvertPtr(o,(void **) &a,SWIGTYPE_p_PointCharge,1)) == -1) {
                    PyErr_SetString(PyExc_TypeError,                          "Conversion of list item to PointCharge failed");          return NULL;        
                }        vi.push_back(*a);      
            }      arg0 = &vi;    
        }    else {
            PyErr_SetString(PyExc_TypeError, "not a list");      return NULL;    
        }  
    }
    {
        MEAD_try_catch(result = (ManyPointCharge *)new ManyPointCharge((list_PointCharge const &)*arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ManyPointCharge);
    return resultobj;
}


static PyObject *_wrap_new_ManyPointCharge__L17(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg0 ;
    float *arg1 ;
    Coord *arg2 ;
    PyObject * argo1 =0 ;
    PyObject * argo2 =0 ;
    ManyPointCharge *result ;
    
    if(!PyArg_ParseTuple(args,"iOO:new_ManyPointCharge__L17",&arg0,&argo1,&argo2)) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_float,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo2,(void **) &arg2,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (ManyPointCharge *)new ManyPointCharge(arg0,arg1,arg2);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ManyPointCharge);
    return resultobj;
}


static PyObject *_wrap_delete_ManyPointCharge(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ManyPointCharge *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_ManyPointCharge",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ManyPointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(delete arg0;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_ManyPointCharge_total_charge(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ManyPointCharge *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:ManyPointCharge_total_charge",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ManyPointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )arg0->total_charge();
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_ManyPointCharge_has_charges(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ManyPointCharge *arg0 ;
    PyObject * argo0 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"O:ManyPointCharge_has_charges",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ManyPointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int )arg0->has_charges();
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_ManyPointCharge_vacuum_coulomb(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ManyPointCharge *arg0 ;
    Coord *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"OO:ManyPointCharge_vacuum_coulomb",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ManyPointCharge,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )arg0->vacuum_coulomb((Coord const &)*arg1);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_ManyPointCharge_number_points(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ManyPointCharge *arg0 ;
    PyObject * argo0 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"O:ManyPointCharge_number_points",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ManyPointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int )arg0->number_points();
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_ManyPointCharge___mul__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ManyPointCharge *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    ManyPointCharge *result ;
    
    if(!PyArg_ParseTuple(args,"Of:ManyPointCharge___mul__",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ManyPointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (ManyPointCharge *)ManyPointCharge___mul__(arg0,arg1);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ManyPointCharge);
    return resultobj;
}


static PyObject *_wrap_ManyPointCharge___rmul__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ManyPointCharge *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    ManyPointCharge *result ;
    
    if(!PyArg_ParseTuple(args,"Of:ManyPointCharge___rmul__",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ManyPointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (ManyPointCharge *)ManyPointCharge___rmul__(arg0,arg1);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ManyPointCharge);
    return resultobj;
}


static PyObject *_wrap_ManyPointCharge___div__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ManyPointCharge *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    ManyPointCharge *result ;
    
    if(!PyArg_ParseTuple(args,"Of:ManyPointCharge___div__",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ManyPointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (ManyPointCharge *)ManyPointCharge___div__(arg0,arg1);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ManyPointCharge);
    return resultobj;
}


static PyObject *_wrap_ManyPointCharge___add__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ManyPointCharge *arg0 ;
    AtomChargeSet *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    ManyPointCharge *result ;
    
    if(!PyArg_ParseTuple(args,"OO:ManyPointCharge___add__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ManyPointCharge,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_AtomChargeSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (ManyPointCharge *)ManyPointCharge___add__(arg0,(AtomChargeSet const &)*arg1);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ManyPointCharge);
    return resultobj;
}


static PyObject *_wrap_ManyPointCharge___add____L55(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ManyPointCharge *arg0 ;
    ManyPointCharge *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    ManyPointCharge *result ;
    
    if(!PyArg_ParseTuple(args,"OO:ManyPointCharge___add____L55",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ManyPointCharge,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_ManyPointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (ManyPointCharge *)ManyPointCharge___add__(arg0,(ManyPointCharge const &)*arg1);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ManyPointCharge);
    return resultobj;
}


static PyObject *_wrap_ManyPointCharge___add____L56(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ManyPointCharge *arg0 ;
    OnePointCharge *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    ManyPointCharge *result ;
    
    if(!PyArg_ParseTuple(args,"OO:ManyPointCharge___add____L56",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ManyPointCharge,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_OnePointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (ManyPointCharge *)ManyPointCharge___add__(arg0,(OnePointCharge const &)*arg1);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ManyPointCharge);
    return resultobj;
}


list_PointCharge * ManyPointCharge_pointcharges(ManyPointCharge *self) {
    {
        return new list_PointCharge(self->begin(), self->end());
    }
}


static PyObject *_wrap_ManyPointCharge_pointcharges(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ManyPointCharge *arg0 ;
    PyObject * argo0 =0 ;
    list_PointCharge *result ;
    
    if(!PyArg_ParseTuple(args,"O:ManyPointCharge_pointcharges",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ManyPointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (list_PointCharge *)ManyPointCharge_pointcharges(arg0);
        )
    }{
        resultobj = PyList_New(0);    if (!resultobj) return NULL;    for (list_PointCharge::const_iterator p = result->begin(); p!=result->end(); ++p) {
            PointCharge *fp = new PointCharge(*p);      PyObject *optr = PointChargePtr((void *) fp, 1);      PyList_Append(resultobj, optr);      Py_DECREF(optr);    
        }    delete result;  
    }
    return resultobj;
}


void  ManyPointCharge_append(ManyPointCharge *self,PointCharge const &pc) {
    {
        list_append(self, pc); 
    }
}


static PyObject *_wrap_ManyPointCharge_append(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ManyPointCharge *arg0 ;
    PointCharge *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:ManyPointCharge_append",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ManyPointCharge,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_PointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(ManyPointCharge_append(arg0,(PointCharge const &)*arg1);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


int  ManyPointCharge___len__(ManyPointCharge *self) {
    {
        return list___len__(self); 
    }
}


static PyObject *_wrap_ManyPointCharge___len__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ManyPointCharge *arg0 ;
    PyObject * argo0 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"O:ManyPointCharge___len__",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ManyPointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int )ManyPointCharge___len__(arg0);
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


void  ManyPointCharge_extend(ManyPointCharge *self,ManyPointCharge const &mpc) {
    {
        list_extend(self, mpc); 
    }
}


static PyObject *_wrap_ManyPointCharge_extend(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ManyPointCharge *arg0 ;
    ManyPointCharge *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:ManyPointCharge_extend",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ManyPointCharge,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_ManyPointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(ManyPointCharge_extend(arg0,(ManyPointCharge const &)*arg1);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


int  ManyPointCharge_count(ManyPointCharge *self,PointCharge const &pc) {
    {
        return list_count(self, pc); 
    }
}


static PyObject *_wrap_ManyPointCharge_count(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ManyPointCharge *arg0 ;
    PointCharge *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"OO:ManyPointCharge_count",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ManyPointCharge,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_PointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int )ManyPointCharge_count(arg0,(PointCharge const &)*arg1);
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


int  ManyPointCharge_index(ManyPointCharge *self,PointCharge const &pc) {
    {
        return list_index(self, pc); 
    }
}


static PyObject *_wrap_ManyPointCharge_index(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ManyPointCharge *arg0 ;
    PointCharge *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"OO:ManyPointCharge_index",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ManyPointCharge,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_PointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int )ManyPointCharge_index(arg0,(PointCharge const &)*arg1);
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


void  ManyPointCharge_insert(ManyPointCharge *self,int index,PointCharge const &pc) {
    {
        list_insert(self, index, pc); 
    }
}


static PyObject *_wrap_ManyPointCharge_insert(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ManyPointCharge *arg0 ;
    int arg1 ;
    PointCharge *arg2 ;
    PyObject * argo0 =0 ;
    PyObject * argo2 =0 ;
    
    if(!PyArg_ParseTuple(args,"OiO:ManyPointCharge_insert",&argo0,&arg1,&argo2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ManyPointCharge,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo2,(void **) &arg2,SWIGTYPE_p_PointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(ManyPointCharge_insert(arg0,arg1,(PointCharge const &)*arg2);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


void  ManyPointCharge_remove(ManyPointCharge *self,PointCharge const &pc) {
    {
        list_remove(self, pc); 
    }
}


static PyObject *_wrap_ManyPointCharge_remove(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ManyPointCharge *arg0 ;
    PointCharge *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:ManyPointCharge_remove",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ManyPointCharge,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_PointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(ManyPointCharge_remove(arg0,(PointCharge const &)*arg1);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


BEGIN_CPLUSPLUS_SECTION
PointCharge  ManyPointCharge___getitem__(ManyPointCharge *self,int index) {
    {
        return list___getitem__(self, index); 
    }
}
END_CPLUSPLUS_SECTION


static PyObject *_wrap_ManyPointCharge___getitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ManyPointCharge *arg0 ;
    int arg1 ;
    PyObject * argo0 =0 ;
    PointCharge *result ;
    
    if(!PyArg_ParseTuple(args,"Oi:ManyPointCharge___getitem__",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ManyPointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new PointCharge (ManyPointCharge___getitem__(arg0,arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_PointCharge);
    return resultobj;
}


void  ManyPointCharge___setitem__(ManyPointCharge *self,int index,PointCharge const &value) {
    {
        list___setitem__(self, index, value); 
    }
}


static PyObject *_wrap_ManyPointCharge___setitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ManyPointCharge *arg0 ;
    int arg1 ;
    PointCharge *arg2 ;
    PyObject * argo0 =0 ;
    PyObject * argo2 =0 ;
    
    if(!PyArg_ParseTuple(args,"OiO:ManyPointCharge___setitem__",&argo0,&arg1,&argo2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ManyPointCharge,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo2,(void **) &arg2,SWIGTYPE_p_PointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(ManyPointCharge___setitem__(arg0,arg1,(PointCharge const &)*arg2);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


void  ManyPointCharge___delitem__(ManyPointCharge *self,int index) {
    {
        list___delitem__(self, index); 
    }
}


static PyObject *_wrap_ManyPointCharge___delitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ManyPointCharge *arg0 ;
    int arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Oi:ManyPointCharge___delitem__",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ManyPointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(ManyPointCharge___delitem__(arg0,arg1);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_ManyPointCharge___mul____L119(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ManyPointCharge *arg0 ;
    ElstatPot_lett *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"OO:ManyPointCharge___mul____L119",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ManyPointCharge,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_ElstatPot_lett,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )ManyPointCharge___mul__(arg0,(ElstatPot_lett const &)*arg1);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_ManyPointCharge___mul____L120(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ManyPointCharge *arg0 ;
    ElstatPotCombination *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"OO:ManyPointCharge___mul____L120",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ManyPointCharge,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_ElstatPotCombination,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )ManyPointCharge___mul__(arg0,(ElstatPotCombination const &)*arg1);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_new_OnePointCharge(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OnePointCharge *result ;
    
    if(!PyArg_ParseTuple(args,":new_OnePointCharge")) return NULL;
    {
        MEAD_try_catch(result = (OnePointCharge *)new OnePointCharge();
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_OnePointCharge);
    return resultobj;
}


static PyObject *_wrap_new_OnePointCharge__L16(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    float arg0 ;
    Coord *arg1 ;
    PyObject * argo1 =0 ;
    OnePointCharge *result ;
    
    if(!PyArg_ParseTuple(args,"fO:new_OnePointCharge__L16",&arg0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (OnePointCharge *)new OnePointCharge(arg0,*arg1);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_OnePointCharge);
    return resultobj;
}


static PyObject *_wrap_delete_OnePointCharge(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OnePointCharge *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_OnePointCharge",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_OnePointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(delete arg0;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_OnePointCharge_vacuum_coulomb(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OnePointCharge *arg0 ;
    Coord *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"OO:OnePointCharge_vacuum_coulomb",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_OnePointCharge,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )arg0->vacuum_coulomb((Coord const &)*arg1);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_OnePointCharge_total_charge(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OnePointCharge *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:OnePointCharge_total_charge",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_OnePointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )arg0->total_charge();
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_OnePointCharge_has_charges(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OnePointCharge *arg0 ;
    PyObject * argo0 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"O:OnePointCharge_has_charges",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_OnePointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int )arg0->has_charges();
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_OnePointCharge_number_points(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OnePointCharge *arg0 ;
    PyObject * argo0 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"O:OnePointCharge_number_points",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_OnePointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int )arg0->number_points();
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_OnePointCharge_get_charge(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OnePointCharge *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:OnePointCharge_get_charge",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_OnePointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )arg0->get_charge();
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_OnePointCharge_get_coord(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OnePointCharge *arg0 ;
    PyObject * argo0 =0 ;
    Coord *result ;
    
    if(!PyArg_ParseTuple(args,"O:OnePointCharge_get_coord",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_OnePointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Coord (arg0->get_coord());)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Coord);
    return resultobj;
}


BEGIN_CPLUSPLUS_SECTION
PointCharge  OnePointCharge_pointcharge(OnePointCharge *self) {
    {
        return PointCharge (*self); 
    }
}
END_CPLUSPLUS_SECTION


static PyObject *_wrap_OnePointCharge_pointcharge(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OnePointCharge *arg0 ;
    PyObject * argo0 =0 ;
    PointCharge *result ;
    
    if(!PyArg_ParseTuple(args,"O:OnePointCharge_pointcharge",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_OnePointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new PointCharge (OnePointCharge_pointcharge(arg0));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_PointCharge);
    return resultobj;
}


static PyObject *_wrap_OnePointCharge___mul__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OnePointCharge *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    OnePointCharge *result ;
    
    if(!PyArg_ParseTuple(args,"Of:OnePointCharge___mul__",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_OnePointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (OnePointCharge *)OnePointCharge___mul__(arg0,arg1);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_OnePointCharge);
    return resultobj;
}


static PyObject *_wrap_OnePointCharge___rmul__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OnePointCharge *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    OnePointCharge *result ;
    
    if(!PyArg_ParseTuple(args,"Of:OnePointCharge___rmul__",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_OnePointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (OnePointCharge *)OnePointCharge___rmul__(arg0,arg1);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_OnePointCharge);
    return resultobj;
}


static PyObject *_wrap_OnePointCharge___div__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OnePointCharge *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    OnePointCharge *result ;
    
    if(!PyArg_ParseTuple(args,"Of:OnePointCharge___div__",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_OnePointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (OnePointCharge *)OnePointCharge___div__(arg0,arg1);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_OnePointCharge);
    return resultobj;
}


static PyObject *_wrap_OnePointCharge___add__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OnePointCharge *arg0 ;
    AtomChargeSet *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    ManyPointCharge *result ;
    
    if(!PyArg_ParseTuple(args,"OO:OnePointCharge___add__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_OnePointCharge,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_AtomChargeSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (ManyPointCharge *)OnePointCharge___add__(arg0,(AtomChargeSet const &)*arg1);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ManyPointCharge);
    return resultobj;
}


static PyObject *_wrap_OnePointCharge___add____L66(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OnePointCharge *arg0 ;
    ManyPointCharge *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    ManyPointCharge *result ;
    
    if(!PyArg_ParseTuple(args,"OO:OnePointCharge___add____L66",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_OnePointCharge,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_ManyPointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (ManyPointCharge *)OnePointCharge___add__(arg0,(ManyPointCharge const &)*arg1);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ManyPointCharge);
    return resultobj;
}


static PyObject *_wrap_OnePointCharge___add____L69(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OnePointCharge *arg0 ;
    OnePointCharge *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    ManyPointCharge *result ;
    
    if(!PyArg_ParseTuple(args,"OO:OnePointCharge___add____L69",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_OnePointCharge,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_OnePointCharge,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (ManyPointCharge *)OnePointCharge___add__(arg0,(OnePointCharge const &)*arg1);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ManyPointCharge);
    return resultobj;
}


static PyObject *_wrap_OnePointCharge___mul____L123(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OnePointCharge *arg0 ;
    ElstatPot_lett *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"OO:OnePointCharge___mul____L123",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_OnePointCharge,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_ElstatPot_lett,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )OnePointCharge___mul__(arg0,(ElstatPot_lett const &)*arg1);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_OnePointCharge___mul____L124(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OnePointCharge *arg0 ;
    ElstatPotCombination *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"OO:OnePointCharge___mul____L124",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_OnePointCharge,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_ElstatPotCombination,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )OnePointCharge___mul__(arg0,(ElstatPotCombination const &)*arg1);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_new_UniformDielectric(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    float arg0 ;
    UniformDielectric *result ;
    
    if(!PyArg_ParseTuple(args,"f:new_UniformDielectric",&arg0)) return NULL;
    {
        MEAD_try_catch(result = (UniformDielectric *)new UniformDielectric(arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_UniformDielectric);
    return resultobj;
}


static PyObject *_wrap_delete_UniformDielectric(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    UniformDielectric *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_UniformDielectric",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_UniformDielectric,1)) == -1) return NULL;
    {
        MEAD_try_catch(delete arg0;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_UniformDielectric_epsext_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    UniformDielectric *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:UniformDielectric_epsext_value",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_UniformDielectric,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )arg0->epsext_value();
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_new_DielectricSphere(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    float arg0 ;
    float arg1 ;
    float arg2 ;
    Coord *arg3 ;
    PyObject * argo3 =0 ;
    DielectricSphere *result ;
    
    if(!PyArg_ParseTuple(args,"fffO:new_DielectricSphere",&arg0,&arg1,&arg2,&argo3)) return NULL;
    if ((SWIG_ConvertPtr(argo3,(void **) &arg3,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (DielectricSphere *)new DielectricSphere(arg0,arg1,arg2,*arg3);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_DielectricSphere);
    return resultobj;
}


static PyObject *_wrap_delete_DielectricSphere(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DielectricSphere *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_DielectricSphere",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_DielectricSphere,1)) == -1) return NULL;
    {
        MEAD_try_catch(delete arg0;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_DielectricSphere_epsext_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DielectricSphere *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:DielectricSphere_epsext_value",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_DielectricSphere,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )arg0->epsext_value();
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_DielectricSphere_radius_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DielectricSphere *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:DielectricSphere_radius_value",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_DielectricSphere,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )arg0->radius_value();
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_DielectricSphere_epsin_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DielectricSphere *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:DielectricSphere_epsin_value",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_DielectricSphere,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )arg0->epsin_value();
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_DielectricSphere_get_center(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DielectricSphere *arg0 ;
    PyObject * argo0 =0 ;
    Coord *result ;
    
    if(!PyArg_ParseTuple(args,"O:DielectricSphere_get_center",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_DielectricSphere,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Coord (arg0->get_center());)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Coord);
    return resultobj;
}


static PyObject *_wrap_new_DielectricSlab(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    float arg0 ;
    float arg1 ;
    float arg2 ;
    float arg3 ;
    DielectricSlab *result ;
    
    if(!PyArg_ParseTuple(args,"ffff:new_DielectricSlab",&arg0,&arg1,&arg2,&arg3)) return NULL;
    {
        MEAD_try_catch(result = (DielectricSlab *)new DielectricSlab(arg0,arg1,arg2,arg3);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_DielectricSlab);
    return resultobj;
}


static PyObject *_wrap_delete_DielectricSlab(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DielectricSlab *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_DielectricSlab",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_DielectricSlab,1)) == -1) return NULL;
    {
        MEAD_try_catch(delete arg0;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_DielectricSlab_epsslab_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DielectricSlab *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:DielectricSlab_epsslab_value",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_DielectricSlab,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )arg0->epsslab_value();
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_DielectricSlab_epsext_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DielectricSlab *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:DielectricSlab_epsext_value",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_DielectricSlab,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )arg0->epsext_value();
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_DielectricSlab_zupper_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DielectricSlab *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:DielectricSlab_zupper_value",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_DielectricSlab,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )arg0->zupper_value();
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_DielectricSlab_zlower_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DielectricSlab *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:DielectricSlab_zlower_value",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_DielectricSlab,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )arg0->zlower_value();
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_new_TwoValueDielectricByAtoms(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    TwoValueDielectricByAtoms *result ;
    
    if(!PyArg_ParseTuple(args,"Of:new_TwoValueDielectricByAtoms",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (TwoValueDielectricByAtoms *)new TwoValueDielectricByAtoms((AtomSet const &)*arg0,arg1);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_TwoValueDielectricByAtoms);
    return resultobj;
}


static PyObject *_wrap_new_TwoValueDielectricByAtoms__L17(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *arg0 ;
    float arg1 ;
    float arg2 ;
    float arg3 ;
    PyObject * argo0 =0 ;
    TwoValueDielectricByAtoms *result ;
    
    if(!PyArg_ParseTuple(args,"Offf:new_TwoValueDielectricByAtoms__L17",&argo0,&arg1,&arg2,&arg3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (TwoValueDielectricByAtoms *)new TwoValueDielectricByAtoms((AtomSet const &)*arg0,arg1,arg2,arg3);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_TwoValueDielectricByAtoms);
    return resultobj;
}


static PyObject *_wrap_new_TwoValueDielectricByAtoms__L18(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SolvAccVol *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    TwoValueDielectricByAtoms *result ;
    
    if(!PyArg_ParseTuple(args,"Of:new_TwoValueDielectricByAtoms__L18",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_SolvAccVol,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (TwoValueDielectricByAtoms *)new TwoValueDielectricByAtoms((SolvAccVol const &)*arg0,arg1);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_TwoValueDielectricByAtoms);
    return resultobj;
}


static PyObject *_wrap_new_TwoValueDielectricByAtoms__L19(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SolvAccVol *arg0 ;
    float arg1 ;
    float arg2 ;
    PyObject * argo0 =0 ;
    TwoValueDielectricByAtoms *result ;
    
    if(!PyArg_ParseTuple(args,"Off:new_TwoValueDielectricByAtoms__L19",&argo0,&arg1,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_SolvAccVol,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (TwoValueDielectricByAtoms *)new TwoValueDielectricByAtoms((SolvAccVol const &)*arg0,arg1,arg2);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_TwoValueDielectricByAtoms);
    return resultobj;
}


static PyObject *_wrap_delete_TwoValueDielectricByAtoms(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TwoValueDielectricByAtoms *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_TwoValueDielectricByAtoms",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_TwoValueDielectricByAtoms,1)) == -1) return NULL;
    {
        MEAD_try_catch(delete arg0;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_TwoValueDielectricByAtoms_epsext_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TwoValueDielectricByAtoms *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:TwoValueDielectricByAtoms_epsext_value",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_TwoValueDielectricByAtoms,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )arg0->epsext_value();
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_TwoValueDielectricByAtoms_epsin_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TwoValueDielectricByAtoms *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:TwoValueDielectricByAtoms_epsin_value",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_TwoValueDielectricByAtoms,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )arg0->epsin_value();
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_new_ThreeValueDielectricByAtoms(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *arg0 ;
    float arg1 ;
    AtomSet *arg2 ;
    float arg3 ;
    PyObject * argo0 =0 ;
    PyObject * argo2 =0 ;
    ThreeValueDielectricByAtoms *result ;
    
    if(!PyArg_ParseTuple(args,"OfOf:new_ThreeValueDielectricByAtoms",&argo0,&arg1,&argo2,&arg3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo2,(void **) &arg2,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (ThreeValueDielectricByAtoms *)new ThreeValueDielectricByAtoms((AtomSet const &)*arg0,arg1,(AtomSet const &)*arg2,arg3);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ThreeValueDielectricByAtoms);
    return resultobj;
}


static PyObject *_wrap_new_ThreeValueDielectricByAtoms__L29(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *arg0 ;
    float arg1 ;
    float arg2 ;
    AtomSet *arg3 ;
    float arg4 ;
    float arg5 ;
    float arg6 ;
    PyObject * argo0 =0 ;
    PyObject * argo3 =0 ;
    ThreeValueDielectricByAtoms *result ;
    
    if(!PyArg_ParseTuple(args,"OffOfff:new_ThreeValueDielectricByAtoms__L29",&argo0,&arg1,&arg2,&argo3,&arg4,&arg5,&arg6)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo3,(void **) &arg3,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (ThreeValueDielectricByAtoms *)new ThreeValueDielectricByAtoms((AtomSet const &)*arg0,arg1,arg2,(AtomSet const &)*arg3,arg4,arg5,arg6);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ThreeValueDielectricByAtoms);
    return resultobj;
}


static PyObject *_wrap_new_ThreeValueDielectricByAtoms__L30(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SolvAccVol *arg0 ;
    float arg1 ;
    SolvAccVol *arg2 ;
    float arg3 ;
    PyObject * argo0 =0 ;
    PyObject * argo2 =0 ;
    ThreeValueDielectricByAtoms *result ;
    
    if(!PyArg_ParseTuple(args,"OfOf:new_ThreeValueDielectricByAtoms__L30",&argo0,&arg1,&argo2,&arg3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_SolvAccVol,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo2,(void **) &arg2,SWIGTYPE_p_SolvAccVol,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (ThreeValueDielectricByAtoms *)new ThreeValueDielectricByAtoms((SolvAccVol const &)*arg0,arg1,(SolvAccVol const &)*arg2,arg3);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ThreeValueDielectricByAtoms);
    return resultobj;
}


static PyObject *_wrap_new_ThreeValueDielectricByAtoms__L31(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SolvAccVol *arg0 ;
    float arg1 ;
    SolvAccVol *arg2 ;
    float arg3 ;
    float arg4 ;
    PyObject * argo0 =0 ;
    PyObject * argo2 =0 ;
    ThreeValueDielectricByAtoms *result ;
    
    if(!PyArg_ParseTuple(args,"OfOff:new_ThreeValueDielectricByAtoms__L31",&argo0,&arg1,&argo2,&arg3,&arg4)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_SolvAccVol,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo2,(void **) &arg2,SWIGTYPE_p_SolvAccVol,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (ThreeValueDielectricByAtoms *)new ThreeValueDielectricByAtoms((SolvAccVol const &)*arg0,arg1,(SolvAccVol const &)*arg2,arg3,arg4);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ThreeValueDielectricByAtoms);
    return resultobj;
}


static PyObject *_wrap_delete_ThreeValueDielectricByAtoms(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ThreeValueDielectricByAtoms *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_ThreeValueDielectricByAtoms",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ThreeValueDielectricByAtoms,1)) == -1) return NULL;
    {
        MEAD_try_catch(delete arg0;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_ThreeValueDielectricByAtoms_epsext_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ThreeValueDielectricByAtoms *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:ThreeValueDielectricByAtoms_epsext_value",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ThreeValueDielectricByAtoms,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )arg0->epsext_value();
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_new_TwoValueDielMembAtoms(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *arg0 ;
    float arg1 ;
    float arg2 ;
    float arg3 ;
    Coord *arg4 ;
    float arg5 ;
    PyObject * argo0 =0 ;
    PyObject * argo4 =0 ;
    TwoValueDielMembAtoms *result ;
    
    if(!PyArg_ParseTuple(args,"OfffOf:new_TwoValueDielMembAtoms",&argo0,&arg1,&arg2,&arg3,&argo4,&arg5)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo4,(void **) &arg4,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (TwoValueDielMembAtoms *)new TwoValueDielMembAtoms((AtomSet const &)*arg0,arg1,arg2,arg3,*arg4,arg5);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_TwoValueDielMembAtoms);
    return resultobj;
}


static PyObject *_wrap_new_TwoValueDielMembAtoms__L16(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SolvAccVol *arg0 ;
    float arg1 ;
    float arg2 ;
    float arg3 ;
    Coord *arg4 ;
    float arg5 ;
    PyObject * argo0 =0 ;
    PyObject * argo4 =0 ;
    TwoValueDielMembAtoms *result ;
    
    if(!PyArg_ParseTuple(args,"OfffOf:new_TwoValueDielMembAtoms__L16",&argo0,&arg1,&arg2,&arg3,&argo4,&arg5)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_SolvAccVol,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo4,(void **) &arg4,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (TwoValueDielMembAtoms *)new TwoValueDielMembAtoms((SolvAccVol const &)*arg0,arg1,arg2,arg3,*arg4,arg5);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_TwoValueDielMembAtoms);
    return resultobj;
}


static PyObject *_wrap_delete_TwoValueDielMembAtoms(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TwoValueDielMembAtoms *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_TwoValueDielMembAtoms",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_TwoValueDielMembAtoms,1)) == -1) return NULL;
    {
        MEAD_try_catch(delete arg0;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_TwoValueDielMembAtoms_epsext_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TwoValueDielMembAtoms *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:TwoValueDielMembAtoms_epsext_value",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_TwoValueDielMembAtoms,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )arg0->epsext_value();
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_new_ThreeValueDielMembAtomsAtoms(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *arg0 ;
    float arg1 ;
    AtomSet *arg2 ;
    float arg3 ;
    float arg4 ;
    float arg5 ;
    Coord *arg6 ;
    float arg7 ;
    float arg8 ;
    float arg9 ;
    float arg10 ;
    PyObject * argo0 =0 ;
    PyObject * argo2 =0 ;
    PyObject * argo6 =0 ;
    ThreeValueDielMembAtomsAtoms *result ;
    
    if(!PyArg_ParseTuple(args,"OfOfffOffff:new_ThreeValueDielMembAtomsAtoms",&argo0,&arg1,&argo2,&arg3,&arg4,&arg5,&argo6,&arg7,&arg8,&arg9,&arg10)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo2,(void **) &arg2,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo6,(void **) &arg6,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (ThreeValueDielMembAtomsAtoms *)new ThreeValueDielMembAtomsAtoms((AtomSet const &)*arg0,arg1,(AtomSet const &)*arg2,arg3,arg4,arg5,*arg6,arg7,arg8,arg9,arg10);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ThreeValueDielMembAtomsAtoms);
    return resultobj;
}


static PyObject *_wrap_delete_ThreeValueDielMembAtomsAtoms(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ThreeValueDielMembAtomsAtoms *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_ThreeValueDielMembAtomsAtoms",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ThreeValueDielMembAtomsAtoms,1)) == -1) return NULL;
    {
        MEAD_try_catch(delete arg0;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_ThreeValueDielMembAtomsAtoms_epsext_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ThreeValueDielMembAtomsAtoms *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:ThreeValueDielMembAtomsAtoms_epsext_value",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ThreeValueDielMembAtomsAtoms,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )arg0->epsext_value();
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_new_UniformElectrolyte(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    float arg0 ;
    UniformElectrolyte *result ;
    
    if(!PyArg_ParseTuple(args,"f:new_UniformElectrolyte",&arg0)) return NULL;
    {
        MEAD_try_catch(result = (UniformElectrolyte *)new UniformElectrolyte(arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_UniformElectrolyte);
    return resultobj;
}


static PyObject *_wrap_delete_UniformElectrolyte(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    UniformElectrolyte *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_UniformElectrolyte",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_UniformElectrolyte,1)) == -1) return NULL;
    {
        MEAD_try_catch(delete arg0;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_UniformElectrolyte_ionic_strength(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    UniformElectrolyte *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:UniformElectrolyte_ionic_strength",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_UniformElectrolyte,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )arg0->ionic_strength();
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_new_ElySphere(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    float arg0 ;
    Coord *arg1 ;
    float arg2 ;
    PyObject * argo1 =0 ;
    ElySphere *result ;
    
    if(!PyArg_ParseTuple(args,"fOf:new_ElySphere",&arg0,&argo1,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (ElySphere *)new ElySphere(arg0,*arg1,arg2);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ElySphere);
    return resultobj;
}


static PyObject *_wrap_delete_ElySphere(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ElySphere *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_ElySphere",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ElySphere,1)) == -1) return NULL;
    {
        MEAD_try_catch(delete arg0;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_ElySphere_ionic_strength(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ElySphere *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:ElySphere_ionic_strength",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ElySphere,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )arg0->ionic_strength();
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_ElySphere_get_radius(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ElySphere *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:ElySphere_get_radius",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ElySphere,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )arg0->get_radius();
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_ElySphere_get_center(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ElySphere *arg0 ;
    PyObject * argo0 =0 ;
    Coord *result ;
    
    if(!PyArg_ParseTuple(args,"O:ElySphere_get_center",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ElySphere,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Coord (arg0->get_center());)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Coord);
    return resultobj;
}


static PyObject *_wrap_new_ElectrolyteByAtoms(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *arg0 ;
    float arg1 ;
    float arg2 ;
    PyObject * argo0 =0 ;
    ElectrolyteByAtoms *result ;
    
    if(!PyArg_ParseTuple(args,"Off:new_ElectrolyteByAtoms",&argo0,&arg1,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (ElectrolyteByAtoms *)new ElectrolyteByAtoms((AtomSet const &)*arg0,arg1,arg2);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ElectrolyteByAtoms);
    return resultobj;
}


static PyObject *_wrap_new_ElectrolyteByAtoms__L18(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *arg0 ;
    float arg1 ;
    SolvAccVol *arg2 ;
    PyObject * argo0 =0 ;
    PyObject * argo2 =0 ;
    ElectrolyteByAtoms *result ;
    
    if(!PyArg_ParseTuple(args,"OfO:new_ElectrolyteByAtoms__L18",&argo0,&arg1,&argo2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo2,(void **) &arg2,SWIGTYPE_p_SolvAccVol,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (ElectrolyteByAtoms *)new ElectrolyteByAtoms((AtomSet const &)*arg0,arg1,(SolvAccVol const &)*arg2);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ElectrolyteByAtoms);
    return resultobj;
}


static PyObject *_wrap_delete_ElectrolyteByAtoms(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ElectrolyteByAtoms *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_ElectrolyteByAtoms",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ElectrolyteByAtoms,1)) == -1) return NULL;
    {
        MEAD_try_catch(delete arg0;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_ElectrolyteByAtoms_ionic_strength(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ElectrolyteByAtoms *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:ElectrolyteByAtoms_ionic_strength",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ElectrolyteByAtoms,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )arg0->ionic_strength();
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_new_ElectrolyteByAtoms__L31(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *arg0 ;
    PyObject * argo0 =0 ;
    ElectrolyteByAtoms *result ;
    
    if(!PyArg_ParseTuple(args,"O:new_ElectrolyteByAtoms__L31",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (ElectrolyteByAtoms *)new_ElectrolyteByAtoms((AtomSet const &)*arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ElectrolyteByAtoms);
    return resultobj;
}


static PyObject *_wrap_new_ElectrolyteByAtoms__L32(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    ElectrolyteByAtoms *result ;
    
    if(!PyArg_ParseTuple(args,"Of:new_ElectrolyteByAtoms__L32",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (ElectrolyteByAtoms *)new_ElectrolyteByAtoms((AtomSet const &)*arg0,arg1);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ElectrolyteByAtoms);
    return resultobj;
}


static PyObject *_wrap_new_SolvAccVol(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *arg0 ;
    PyObject * argo0 =0 ;
    SolvAccVol *result ;
    
    if(!PyArg_ParseTuple(args,"O:new_SolvAccVol",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (SolvAccVol *)new SolvAccVol((AtomSet const &)*arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_SolvAccVol);
    return resultobj;
}


static PyObject *_wrap_new_SolvAccVol__L16(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AtomSet *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    SolvAccVol *result ;
    
    if(!PyArg_ParseTuple(args,"Of:new_SolvAccVol__L16",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AtomSet,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (SolvAccVol *)new SolvAccVol((AtomSet const &)*arg0,arg1);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_SolvAccVol);
    return resultobj;
}


static PyObject *_wrap_new_SolvAccVol__deepcopy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SolvAccVol *arg0 ;
    PyObject * argo0 =0 ;
    SolvAccVol *result ;
    
    if(!PyArg_ParseTuple(args,"O:new_SolvAccVol__deepcopy",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_SolvAccVol,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (SolvAccVol *)new SolvAccVol((SolvAccVol const &)*arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_SolvAccVol);
    return resultobj;
}


static PyObject *_wrap_new_SolvAccVol__L17(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SolvAccVol *arg0 ;
    PyObject * argo0 =0 ;
    SolvAccVol *result ;
    
    if(!PyArg_ParseTuple(args,"O:new_SolvAccVol__L17",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_SolvAccVol,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (SolvAccVol *)new SolvAccVol((SolvAccVol const &)*arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_SolvAccVol);
    return resultobj;
}


static PyObject *_wrap_delete_SolvAccVol(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SolvAccVol *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_SolvAccVol",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_SolvAccVol,1)) == -1) return NULL;
    {
        MEAD_try_catch(delete arg0;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SolvAccVol_anal_calc(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SolvAccVol *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:SolvAccVol_anal_calc",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_SolvAccVol,1)) == -1) return NULL;
    {
        MEAD_try_catch(arg0->anal_calc();
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SolvAccVol_accessible(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SolvAccVol *arg0 ;
    Coord *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"OO:SolvAccVol_accessible",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_SolvAccVol,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int )arg0->accessible((Coord const &)*arg1);
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_SolvAccVol_check_is_calculated(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SolvAccVol *arg0 ;
    PyObject * argo0 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"O:SolvAccVol_check_is_calculated",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_SolvAccVol,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int )arg0->check_is_calculated();
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_SolvAccVol_write_top_in_binary(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SolvAccVol *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:SolvAccVol_write_top_in_binary",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_SolvAccVol,1)) == -1) return NULL;
    {
        MEAD_try_catch(arg0->write_top_in_binary();
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SolvAccVol_write_top_in_ascii(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SolvAccVol *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:SolvAccVol_write_top_in_ascii",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_SolvAccVol,1)) == -1) return NULL;
    {
        MEAD_try_catch(arg0->write_top_in_ascii();
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SolvAccVol_read_top_in_binary(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SolvAccVol *arg0 ;
    PyObject * argo0 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"O:SolvAccVol_read_top_in_binary",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_SolvAccVol,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int )arg0->read_top_in_binary();
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_SolvAccVol_read_top_in_ascii(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SolvAccVol *arg0 ;
    PyObject * argo0 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"O:SolvAccVol_read_top_in_ascii",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_SolvAccVol,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int )arg0->read_top_in_ascii();
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_SolvAccVol_write_top_in_binary__L30(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SolvAccVol *arg0 ;
    string *arg1 ;
    PyObject * argo0 =0 ;
    string str ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,"OO:SolvAccVol_write_top_in_binary__L30",&argo0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_SolvAccVol,1)) == -1) return NULL;
    {
        if (PyString_Check(obj1)) {
            str = string(PyString_AsString(obj1));
            arg1 = &str;
        }
        else {
            PyErr_SetString(PyExc_TypeError, "arg must be a string");
            return NULL;
        }
    }
    {
        MEAD_try_catch(arg0->write_top_in_binary((string const &)*arg1);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SolvAccVol_write_top_in_ascii__L31(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SolvAccVol *arg0 ;
    string *arg1 ;
    PyObject * argo0 =0 ;
    string str ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,"OO:SolvAccVol_write_top_in_ascii__L31",&argo0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_SolvAccVol,1)) == -1) return NULL;
    {
        if (PyString_Check(obj1)) {
            str = string(PyString_AsString(obj1));
            arg1 = &str;
        }
        else {
            PyErr_SetString(PyExc_TypeError, "arg must be a string");
            return NULL;
        }
    }
    {
        MEAD_try_catch(arg0->write_top_in_ascii((string const &)*arg1);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SolvAccVol_read_top_in_binary__L32(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SolvAccVol *arg0 ;
    string *arg1 ;
    PyObject * argo0 =0 ;
    string str ;
    PyObject * obj1  = 0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"OO:SolvAccVol_read_top_in_binary__L32",&argo0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_SolvAccVol,1)) == -1) return NULL;
    {
        if (PyString_Check(obj1)) {
            str = string(PyString_AsString(obj1));
            arg1 = &str;
        }
        else {
            PyErr_SetString(PyExc_TypeError, "arg must be a string");
            return NULL;
        }
    }
    {
        MEAD_try_catch(result = (int )arg0->read_top_in_binary((string const &)*arg1);
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_SolvAccVol_read_top_in_ascii__L33(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SolvAccVol *arg0 ;
    string *arg1 ;
    PyObject * argo0 =0 ;
    string str ;
    PyObject * obj1  = 0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"OO:SolvAccVol_read_top_in_ascii__L33",&argo0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_SolvAccVol,1)) == -1) return NULL;
    {
        if (PyString_Check(obj1)) {
            str = string(PyString_AsString(obj1));
            arg1 = &str;
        }
        else {
            PyErr_SetString(PyExc_TypeError, "arg must be a string");
            return NULL;
        }
    }
    {
        MEAD_try_catch(result = (int )arg0->read_top_in_ascii((string const &)*arg1);
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


Numeric_3D_Array_INT * SolvAccVol_get_cuberep(SolvAccVol *self,CubeLatSpec const &cls) {
    {
        int ngr = cls.get_grid_dim();
        int nsq = ngr * ngr;
        int ncube = nsq * ngr;
        Numeric_3D_Array_INT *array_data = new Numeric_3D_Array_INT [ncube];
        if (array_data != 0) {
            self->calc_cuberep(cls, (AccTag *) array_data);
            // Swap from C array to Fortran array representation
            for (int h = 0, i = 0; i < ngr; i++) {
                for (int j = 0; j < ngr; j++) {
                    for (int k = 0; k < ngr; j++) {
                        int fortind = i + j*ngr + k*nsq;
                        if (fortind != h) {
                            int tmp = array_data[fortind];
                            array_data[fortind] = array_data[h];
                            array_data[h] = tmp;
                        }
                        ++h;
                    }
                }
            }
        }
        return array_data;
    }
}


static PyObject *_wrap_SolvAccVol_get_cuberep(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SolvAccVol *arg0 ;
    CubeLatSpec *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    Numeric_3D_Array_INT *result ;
    
    if(!PyArg_ParseTuple(args,"OO:SolvAccVol_get_cuberep",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_SolvAccVol,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_CubeLatSpec,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (Numeric_3D_Array_INT *)SolvAccVol_get_cuberep(arg0,(CubeLatSpec const &)*arg1);
        )
    }{
        if (result != 0) {
            int dims[3];      dims[0] = dims[1] = dims[2] = arg1->get_grid_dim();      PyArrayObject * array_data = (PyArrayObject *) PyArray_FromDimsAndData (3, dims, PyArray_INT, (char *) result);      if (!array_data) return NULL;      array_data->flags |= OWN_DATA;      resultobj = (PyObject *) array_data;    
        }    else {
            PyErr_SetString (PyExc_RuntimeError, "Numeric_Array_""INT"": memory alloc failed");      resultobj = 0;    
        }  
    }
    return resultobj;
}


Numeric_1D_Array_INT * SolvAccVol_tag_points(SolvAccVol *self,int npts,Coord const *pt) {
    {
        Numeric_1D_Array_INT *array_data = new Numeric_1D_Array_INT [npts];
        if (array_data != 0) {
            self->tag_points(npts, pt, (AccTag *) array_data);
        }
        return array_data;
    }
}


static PyObject *_wrap_SolvAccVol_tag_points(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SolvAccVol *arg0 ;
    int arg1 ;
    Coord *arg2 ;
    PyObject * argo0 =0 ;
    PyObject * argo2 =0 ;
    Numeric_1D_Array_INT *result ;
    
    if(!PyArg_ParseTuple(args,"OiO:SolvAccVol_tag_points",&argo0,&arg1,&argo2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_SolvAccVol,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo2,(void **) &arg2,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (Numeric_1D_Array_INT *)SolvAccVol_tag_points(arg0,arg1,(Coord const *)arg2);
        )
    }{
        if (result != 0) {
            int dim = arg1;      PyArrayObject * array_data = (PyArrayObject *) PyArray_FromDimsAndData (1, &dim, PyArray_INT, (char *) result);      if (!array_data) return NULL;      array_data->flags |= OWN_DATA;      resultobj = (PyObject *) array_data;    
        }    else {
            PyErr_SetString (PyExc_RuntimeError, "Numeric_Array_""INT"": memory alloc failed");      resultobj = 0;    
        }  
    }
    return resultobj;
}


static PyObject *_wrap_new_Poly(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Poly *result ;
    
    if(!PyArg_ParseTuple(args,":new_Poly")) return NULL;
    {
        MEAD_try_catch(result = (Poly *)new Poly();
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Poly);
    return resultobj;
}


static PyObject *_wrap_new_Poly__L16(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    double arg0 ;
    Poly *result ;
    
    if(!PyArg_ParseTuple(args,"d:new_Poly__L16",&arg0)) return NULL;
    {
        MEAD_try_catch(result = (Poly *)new Poly(arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Poly);
    return resultobj;
}


static PyObject *_wrap_new_Poly__L17(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    double arg0 ;
    double arg1 ;
    Poly *result ;
    
    if(!PyArg_ParseTuple(args,"dd:new_Poly__L17",&arg0,&arg1)) return NULL;
    {
        MEAD_try_catch(result = (Poly *)new Poly(arg0,arg1);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Poly);
    return resultobj;
}


static PyObject *_wrap_new_Poly__L18(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    vector_double *arg0 ;
    PyObject * argo0 =0 ;
    Poly *result ;
    
    if(!PyArg_ParseTuple(args,"O:new_Poly__L18",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_vector_double,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (Poly *)new Poly((vector_double const &)*arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Poly);
    return resultobj;
}


static PyObject *_wrap_new_Poly__deepcopy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Poly *arg0 ;
    PyObject * argo0 =0 ;
    Poly *result ;
    
    if(!PyArg_ParseTuple(args,"O:new_Poly__deepcopy",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Poly,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (Poly *)new Poly((Poly const &)*arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Poly);
    return resultobj;
}


static PyObject *_wrap_new_Poly__L19(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Poly *arg0 ;
    PyObject * argo0 =0 ;
    Poly *result ;
    
    if(!PyArg_ParseTuple(args,"O:new_Poly__L19",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Poly,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (Poly *)new Poly((Poly const &)*arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Poly);
    return resultobj;
}


static PyObject *_wrap_Poly_derivative(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Poly *arg0 ;
    PyObject * argo0 =0 ;
    Poly *result ;
    
    if(!PyArg_ParseTuple(args,"O:Poly_derivative",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Poly,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Poly (arg0->derivative());)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Poly);
    return resultobj;
}


static PyObject *_wrap_Poly_degree(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Poly *arg0 ;
    PyObject * argo0 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"O:Poly_degree",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Poly,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int )arg0->degree();
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_Poly_size(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Poly *arg0 ;
    PyObject * argo0 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"O:Poly_size",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Poly,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int )arg0->size();
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_Poly_coefficients(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Poly *arg0 ;
    PyObject * argo0 =0 ;
    vector_double *result ;
    
    if(!PyArg_ParseTuple(args,"O:Poly_coefficients",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Poly,1)) == -1) return NULL;
    {
        MEAD_try_catch(vector_double const &_result_ref = arg0->coefficients();
        result = (vector_double *) &_result_ref;
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_vector_double);
    return resultobj;
}


static PyObject *_wrap_Poly_set_varstring(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Poly *arg0 ;
    string *arg1 ;
    PyObject * argo0 =0 ;
    string str ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,"OO:Poly_set_varstring",&argo0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Poly,1)) == -1) return NULL;
    {
        if (PyString_Check(obj1)) {
            str = string(PyString_AsString(obj1));
            arg1 = &str;
        }
        else {
            PyErr_SetString(PyExc_TypeError, "arg must be a string");
            return NULL;
        }
    }
    {
        MEAD_try_catch(arg0->set_varstring(*arg1);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_Poly_varstring(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Poly *arg0 ;
    PyObject * argo0 =0 ;
    string *result ;
    
    if(!PyArg_ParseTuple(args,"O:Poly_varstring",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Poly,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new string (arg0->varstring());)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_string);
    return resultobj;
}


static PyObject *_wrap_Poly_output(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Poly *arg0 ;
    ostream *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    ostream *result ;
    
    if(!PyArg_ParseTuple(args,"OO:Poly_output",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Poly,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_ostream,1)) == -1) return NULL;
    {
        MEAD_try_catch(ostream &_result_ref = arg0->output(*arg1);
        result = (ostream *) &_result_ref;
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ostream);
    return resultobj;
}


void  Poly_write(Poly *self) {
    {
        cout << *self << endl;
    }
}


static PyObject *_wrap_Poly_write(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Poly *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:Poly_write",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Poly,1)) == -1) return NULL;
    {
        MEAD_try_catch(Poly_write(arg0);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


double  Poly___call__(Poly *self,double oprnd2) {
    {
        return (*self)(oprnd2);
    }
}


static PyObject *_wrap_Poly___call__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Poly *arg0 ;
    double arg1 ;
    PyObject * argo0 =0 ;
    double result ;
    
    if(!PyArg_ParseTuple(args,"Od:Poly___call__",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Poly,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (double )Poly___call__(arg0,arg1);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


BEGIN_CPLUSPLUS_SECTION
Poly  Poly___neg__(Poly *self) {
    {
        return -(*self);
    }
}
END_CPLUSPLUS_SECTION


static PyObject *_wrap_Poly___neg__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Poly *arg0 ;
    PyObject * argo0 =0 ;
    Poly *result ;
    
    if(!PyArg_ParseTuple(args,"O:Poly___neg__",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Poly,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Poly (Poly___neg__(arg0));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Poly);
    return resultobj;
}


BEGIN_CPLUSPLUS_SECTION
Poly  Poly___add__(Poly *self,Poly const &oprnd2) {
    {
        return *self + oprnd2;
    }
}
END_CPLUSPLUS_SECTION


static PyObject *_wrap_Poly___add__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Poly *arg0 ;
    Poly *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    Poly *result ;
    
    if(!PyArg_ParseTuple(args,"OO:Poly___add__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Poly,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Poly,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Poly (Poly___add__(arg0,(Poly const &)*arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Poly);
    return resultobj;
}


BEGIN_CPLUSPLUS_SECTION
Poly  Poly___sub__(Poly *self,Poly const &oprnd2) {
    {
        return *self - oprnd2;
    }
}
END_CPLUSPLUS_SECTION


static PyObject *_wrap_Poly___sub__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Poly *arg0 ;
    Poly *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    Poly *result ;
    
    if(!PyArg_ParseTuple(args,"OO:Poly___sub__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Poly,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Poly,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Poly (Poly___sub__(arg0,(Poly const &)*arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Poly);
    return resultobj;
}


static PyObject *_wrap_Poly___mul__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Poly *arg0 ;
    Poly *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    Poly *result ;
    
    if(!PyArg_ParseTuple(args,"OO:Poly___mul__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Poly,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Poly,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Poly (Poly___mul__(arg0,(Poly const &)*arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Poly);
    return resultobj;
}


static PyObject *_wrap_Poly___mul____L82(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Poly *arg0 ;
    double arg1 ;
    PyObject * argo0 =0 ;
    Poly *result ;
    
    if(!PyArg_ParseTuple(args,"Od:Poly___mul____L82",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Poly,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Poly (Poly___mul__(arg0,arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Poly);
    return resultobj;
}


BEGIN_CPLUSPLUS_SECTION
Poly  Poly___div__(Poly *self,double oprnd2) {
    {
        return *self / oprnd2;
    }
}
END_CPLUSPLUS_SECTION


static PyObject *_wrap_Poly___div__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Poly *arg0 ;
    double arg1 ;
    PyObject * argo0 =0 ;
    Poly *result ;
    
    if(!PyArg_ParseTuple(args,"Od:Poly___div__",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Poly,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Poly (Poly___div__(arg0,arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Poly);
    return resultobj;
}


bool  Poly___eq__(Poly *self,Poly const &oprnd2) {
    {
        return *self == oprnd2;
    }
}


static PyObject *_wrap_Poly___eq__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Poly *arg0 ;
    Poly *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"OO:Poly___eq__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Poly,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Poly,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (bool )Poly___eq__(arg0,(Poly const &)*arg1);
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


BEGIN_CPLUSPLUS_SECTION
Poly  Poly___rmul__(Poly *self,double oprnd2) {
    {
        return *self * oprnd2;
    }
}
END_CPLUSPLUS_SECTION

static PyObject *_wrap_Poly___rmul__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Poly *arg0 ;
    double arg1 ;
    PyObject * argo0 =0 ;
    Poly *result ;
    
    if(!PyArg_ParseTuple(args,"Od:Poly___rmul__",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Poly,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Poly (Poly___rmul__(arg0,arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Poly);
    return resultobj;
}


BEGIN_CPLUSPLUS_SECTION
Poly  Poly___pos__(Poly *self) {
    {
        return *self;
    }
}
END_CPLUSPLUS_SECTION


static PyObject *_wrap_Poly___pos__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Poly *arg0 ;
    PyObject * argo0 =0 ;
    Poly *result ;
    
    if(!PyArg_ParseTuple(args,"O:Poly___pos__",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Poly,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Poly (Poly___pos__(arg0));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Poly);
    return resultobj;
}


static PyObject *_wrap_new_Legendre(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Legendre *result ;
    
    if(!PyArg_ParseTuple(args,":new_Legendre")) return NULL;
    {
        MEAD_try_catch(result = (Legendre *)new Legendre();
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Legendre);
    return resultobj;
}


static PyObject *_wrap_new_Legendre__L41(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg0 ;
    Legendre *result ;
    
    if(!PyArg_ParseTuple(args,"i:new_Legendre__L41",&arg0)) return NULL;
    {
        MEAD_try_catch(result = (Legendre *)new Legendre(arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Legendre);
    return resultobj;
}


static PyObject *_wrap_new_Legendre__deepcopy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Legendre *arg0 ;
    PyObject * argo0 =0 ;
    Legendre *result ;
    
    if(!PyArg_ParseTuple(args,"O:new_Legendre__deepcopy",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Legendre,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (Legendre *)new Legendre((Legendre const &)*arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Legendre);
    return resultobj;
}


static PyObject *_wrap_new_Legendre__L42(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Legendre *arg0 ;
    PyObject * argo0 =0 ;
    Legendre *result ;
    
    if(!PyArg_ParseTuple(args,"O:new_Legendre__L42",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Legendre,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (Legendre *)new Legendre((Legendre const &)*arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Legendre);
    return resultobj;
}


static PyObject *_wrap_Legendre_ell(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Legendre *arg0 ;
    PyObject * argo0 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"O:Legendre_ell",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Legendre,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int )arg0->ell();
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_new_CubeLatSpec(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg0 ;
    float arg1 ;
    Coord *arg2 ;
    PyObject * argo2 =0 ;
    CubeLatSpec *result ;
    
    if(!PyArg_ParseTuple(args,"ifO:new_CubeLatSpec",&arg0,&arg1,&argo2)) return NULL;
    if ((SWIG_ConvertPtr(argo2,(void **) &arg2,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (CubeLatSpec *)new CubeLatSpec(arg0,arg1,*arg2);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_CubeLatSpec);
    return resultobj;
}


static PyObject *_wrap_new_CubeLatSpec__deepcopy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CubeLatSpec *arg0 ;
    PyObject * argo0 =0 ;
    CubeLatSpec *result ;
    
    if(!PyArg_ParseTuple(args,"O:new_CubeLatSpec__deepcopy",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_CubeLatSpec,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (CubeLatSpec *)new CubeLatSpec((CubeLatSpec const &)*arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_CubeLatSpec);
    return resultobj;
}


static PyObject *_wrap_new_CubeLatSpec__L17(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CubeLatSpec *arg0 ;
    PyObject * argo0 =0 ;
    CubeLatSpec *result ;
    
    if(!PyArg_ParseTuple(args,"O:new_CubeLatSpec__L17",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_CubeLatSpec,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (CubeLatSpec *)new CubeLatSpec((CubeLatSpec const &)*arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_CubeLatSpec);
    return resultobj;
}


static PyObject *_wrap_delete_CubeLatSpec(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CubeLatSpec *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_CubeLatSpec",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_CubeLatSpec,1)) == -1) return NULL;
    {
        MEAD_try_catch(delete arg0;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_CubeLatSpec_resolve(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CubeLatSpec *arg0 ;
    Coord *arg1 ;
    Coord *arg2 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    PyObject * argo2 =0 ;
    
    if(!PyArg_ParseTuple(args,"OOO:CubeLatSpec_resolve",&argo0,&argo1,&argo2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_CubeLatSpec,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo2,(void **) &arg2,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(arg0->resolve(*arg1,*arg2);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_CubeLatSpec_get_grid_dim(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CubeLatSpec *arg0 ;
    PyObject * argo0 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"O:CubeLatSpec_get_grid_dim",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_CubeLatSpec,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int )arg0->get_grid_dim();
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_CubeLatSpec_get_spacing(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CubeLatSpec *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:CubeLatSpec_get_spacing",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_CubeLatSpec,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )arg0->get_spacing();
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_CubeLatSpec_is_resolved(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CubeLatSpec *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:CubeLatSpec_is_resolved",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_CubeLatSpec,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (bool )arg0->is_resolved();
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_new_CubeLatSpec__L33(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg0 ;
    float arg1 ;
    int arg2 ;
    CubeLatSpec *result ;
    
    if(!PyArg_ParseTuple(args,"ifi:new_CubeLatSpec__L33",&arg0,&arg1,&arg2)) return NULL;
    {
        MEAD_try_catch(result = (CubeLatSpec *)new_CubeLatSpec(arg0,arg1,arg2);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_CubeLatSpec);
    return resultobj;
}


int  CubeLatSpec_get_centering_style(CubeLatSpec *self) {
    {
        return (int) self->get_centering_style(); 
    }
}


static PyObject *_wrap_CubeLatSpec_get_centering_style(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CubeLatSpec *arg0 ;
    PyObject * argo0 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"O:CubeLatSpec_get_centering_style",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_CubeLatSpec,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int )CubeLatSpec_get_centering_style(arg0);
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


void  CubeLatSpec_write(CubeLatSpec *self) {
    {
        self->print(cout); 
    }
}


static PyObject *_wrap_CubeLatSpec_write(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CubeLatSpec *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:CubeLatSpec_write",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_CubeLatSpec,1)) == -1) return NULL;
    {
        MEAD_try_catch(CubeLatSpec_write(arg0);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


BEGIN_CPLUSPLUS_SECTION
Coord  CubeLatSpec_get_center(CubeLatSpec *self) {
    {
        Coord c = self->get_center(); return c; 
    }
}
END_CPLUSPLUS_SECTION


static PyObject *_wrap_CubeLatSpec_get_center(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CubeLatSpec *arg0 ;
    PyObject * argo0 =0 ;
    Coord *result ;
    
    if(!PyArg_ParseTuple(args,"O:CubeLatSpec_get_center",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_CubeLatSpec,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Coord (CubeLatSpec_get_center(arg0));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Coord);
    return resultobj;
}


int  CubeLatSpec___eq__(CubeLatSpec *self,CubeLatSpec const &oprnd2) {
    {
        return *self == oprnd2;
    }
}


static PyObject *_wrap_CubeLatSpec___eq__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CubeLatSpec *arg0 ;
    CubeLatSpec *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"OO:CubeLatSpec___eq__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_CubeLatSpec,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_CubeLatSpec,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int )CubeLatSpec___eq__(arg0,(CubeLatSpec const &)*arg1);
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


int  CubeLatSpec___lt__(CubeLatSpec *self,CubeLatSpec const &oprnd2) {
    {
        return *self < oprnd2;
    }
}


static PyObject *_wrap_CubeLatSpec___lt__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CubeLatSpec *arg0 ;
    CubeLatSpec *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"OO:CubeLatSpec___lt__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_CubeLatSpec,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_CubeLatSpec,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int )CubeLatSpec___lt__(arg0,(CubeLatSpec const &)*arg1);
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


int  CubeLatSpec___gt__(CubeLatSpec *self,CubeLatSpec const &oprnd2) {
    {
        return *self > oprnd2;
    }
}


static PyObject *_wrap_CubeLatSpec___gt__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CubeLatSpec *arg0 ;
    CubeLatSpec *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"OO:CubeLatSpec___gt__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_CubeLatSpec,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_CubeLatSpec,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int )CubeLatSpec___gt__(arg0,(CubeLatSpec const &)*arg1);
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


int  CubeLatSpec___cmp__(CubeLatSpec *self,CubeLatSpec const &oprnd2) {
    {
        int retval;
        if (*self == oprnd2)
        retval = 0;
        else if (*self < oprnd2)
        retval = -1;
        else if (*self > oprnd2)
        retval = 1;
        return retval;
    }
}


static PyObject *_wrap_CubeLatSpec___cmp__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CubeLatSpec *arg0 ;
    CubeLatSpec *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"OO:CubeLatSpec___cmp__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_CubeLatSpec,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_CubeLatSpec,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int )CubeLatSpec___cmp__(arg0,(CubeLatSpec const &)*arg1);
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


PhysCond * new_PhysCond() {
    {
        return (PhysCond *) 0x01;
    }
}


static PyObject *_wrap_new_PhysCond(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PhysCond *result ;
    
    if(!PyArg_ParseTuple(args,":new_PhysCond")) return NULL;
    {
        MEAD_try_catch(result = (PhysCond *)new_PhysCond();
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_PhysCond);
    return resultobj;
}


static PyObject *_wrap_PhysCond_epsext_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PhysCond *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Of:PhysCond_epsext_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_PhysCond,1)) == -1) return NULL;
    {
        MEAD_try_catch(PhysCond_epsext_set(arg0,arg1);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_PhysCond_epsext_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PhysCond *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:PhysCond_epsext_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_PhysCond,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )PhysCond_epsext_get(arg0);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_PhysCond_solrad_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PhysCond *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Of:PhysCond_solrad_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_PhysCond,1)) == -1) return NULL;
    {
        MEAD_try_catch(PhysCond_solrad_set(arg0,arg1);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_PhysCond_solrad_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PhysCond *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:PhysCond_solrad_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_PhysCond,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )PhysCond_solrad_get(arg0);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_PhysCond_sterln_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PhysCond *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Of:PhysCond_sterln_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_PhysCond,1)) == -1) return NULL;
    {
        MEAD_try_catch(PhysCond_sterln_set(arg0,arg1);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_PhysCond_sterln_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PhysCond *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:PhysCond_sterln_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_PhysCond,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )PhysCond_sterln_get(arg0);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_PhysCond_ionicstr_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PhysCond *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Of:PhysCond_ionicstr_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_PhysCond,1)) == -1) return NULL;
    {
        MEAD_try_catch(PhysCond_ionicstr_set(arg0,arg1);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_PhysCond_ionicstr_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PhysCond *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:PhysCond_ionicstr_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_PhysCond,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )PhysCond_ionicstr_get(arg0);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_PhysCond_T_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PhysCond *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Of:PhysCond_T_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_PhysCond,1)) == -1) return NULL;
    {
        MEAD_try_catch(PhysCond_T_set(arg0,arg1);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_PhysCond_T_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PhysCond *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:PhysCond_T_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_PhysCond,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )PhysCond_T_get(arg0);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_PhysCond_kBolt_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PhysCond *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Of:PhysCond_kBolt_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_PhysCond,1)) == -1) return NULL;
    {
        MEAD_try_catch(PhysCond_kBolt_set(arg0,arg1);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_PhysCond_kBolt_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PhysCond *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:PhysCond_kBolt_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_PhysCond,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )PhysCond_kBolt_get(arg0);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_PhysCond_conconv_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PhysCond *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Of:PhysCond_conconv_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_PhysCond,1)) == -1) return NULL;
    {
        MEAD_try_catch(PhysCond_conconv_set(arg0,arg1);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_PhysCond_conconv_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PhysCond *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:PhysCond_conconv_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_PhysCond,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )PhysCond_conconv_get(arg0);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_PhysCond_econv_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PhysCond *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Of:PhysCond_econv_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_PhysCond,1)) == -1) return NULL;
    {
        MEAD_try_catch(PhysCond_econv_set(arg0,arg1);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_PhysCond_econv_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PhysCond *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:PhysCond_econv_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_PhysCond,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )PhysCond_econv_get(arg0);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_PhysCond_bohr_radius_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PhysCond *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Of:PhysCond_bohr_radius_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_PhysCond,1)) == -1) return NULL;
    {
        MEAD_try_catch(PhysCond_bohr_radius_set(arg0,arg1);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_PhysCond_bohr_radius_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PhysCond *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:PhysCond_bohr_radius_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_PhysCond,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )PhysCond_bohr_radius_get(arg0);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_PhysCond_proton_charge_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PhysCond *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Of:PhysCond_proton_charge_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_PhysCond,1)) == -1) return NULL;
    {
        MEAD_try_catch(PhysCond_proton_charge_set(arg0,arg1);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_PhysCond_proton_charge_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PhysCond *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:PhysCond_proton_charge_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_PhysCond,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )PhysCond_proton_charge_get(arg0);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_PhysCond_hueck_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PhysCond *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Of:PhysCond_hueck_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_PhysCond,1)) == -1) return NULL;
    {
        MEAD_try_catch(PhysCond_hueck_set(arg0,arg1);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_PhysCond_hueck_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PhysCond *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:PhysCond_hueck_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_PhysCond,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )PhysCond_hueck_get(arg0);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_PhysCond_kappasq_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PhysCond *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Of:PhysCond_kappasq_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_PhysCond,1)) == -1) return NULL;
    {
        MEAD_try_catch(PhysCond_kappasq_set(arg0,arg1);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_PhysCond_kappasq_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PhysCond *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:PhysCond_kappasq_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_PhysCond,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )PhysCond_kappasq_get(arg0);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_PhysCond_ln10kT_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PhysCond *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Of:PhysCond_ln10kT_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_PhysCond,1)) == -1) return NULL;
    {
        MEAD_try_catch(PhysCond_ln10kT_set(arg0,arg1);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_PhysCond_ln10kT_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PhysCond *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:PhysCond_ln10kT_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_PhysCond,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )PhysCond_ln10kT_get(arg0);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


void  PhysCond_write(PhysCond *self) {
    {
        PhysCond::print();
    }
}


static PyObject *_wrap_PhysCond_write(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PhysCond *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:PhysCond_write",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_PhysCond,1)) == -1) return NULL;
    {
        MEAD_try_catch(PhysCond_write(arg0);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_Blab(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Blab *result ;
    
    if(!PyArg_ParseTuple(args,":new_Blab")) return NULL;
    {
        MEAD_try_catch(result = (Blab *)new Blab();
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Blab);
    return resultobj;
}


static PyObject *_wrap_Blab_get_level(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Blab *arg0 ;
    PyObject * argo0 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"O:Blab_get_level",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Blab,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int )arg0->get_level();
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_Blab_set_level(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Blab *arg0 ;
    int arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Oi:Blab_set_level",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Blab,1)) == -1) return NULL;
    {
        MEAD_try_catch(arg0->set_level(arg1);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_Blab_level_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Blab *arg0 ;
    int arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Oi:Blab_level_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Blab,1)) == -1) return NULL;
    {
        MEAD_try_catch(Blab_level_set(arg0,arg1);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_Blab_level_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Blab *arg0 ;
    PyObject * argo0 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"O:Blab_level_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Blab,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int )Blab_level_get(arg0);
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_new_FinDiffMethod(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FinDiffMethod *result ;
    
    if(!PyArg_ParseTuple(args,":new_FinDiffMethod")) return NULL;
    {
        MEAD_try_catch(result = (FinDiffMethod *)new FinDiffMethod();
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_FinDiffMethod);
    return resultobj;
}


static PyObject *_wrap_new_FinDiffMethod__deepcopy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FinDiffMethod *arg0 ;
    PyObject * argo0 =0 ;
    FinDiffMethod *result ;
    
    if(!PyArg_ParseTuple(args,"O:new_FinDiffMethod__deepcopy",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_FinDiffMethod,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (FinDiffMethod *)new FinDiffMethod((FinDiffMethod const &)*arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_FinDiffMethod);
    return resultobj;
}


static PyObject *_wrap_new_FinDiffMethod__L16(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FinDiffMethod *arg0 ;
    PyObject * argo0 =0 ;
    FinDiffMethod *result ;
    
    if(!PyArg_ParseTuple(args,"O:new_FinDiffMethod__L16",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_FinDiffMethod,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (FinDiffMethod *)new FinDiffMethod((FinDiffMethod const &)*arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_FinDiffMethod);
    return resultobj;
}


static PyObject *_wrap_delete_FinDiffMethod(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FinDiffMethod *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_FinDiffMethod",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_FinDiffMethod,1)) == -1) return NULL;
    {
        MEAD_try_catch(delete arg0;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_FinDiffMethod_read(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FinDiffMethod *arg0 ;
    string *arg1 ;
    PyObject * argo0 =0 ;
    string str ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,"OO:FinDiffMethod_read",&argo0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_FinDiffMethod,1)) == -1) return NULL;
    {
        if (PyString_Check(obj1)) {
            str = string(PyString_AsString(obj1));
            arg1 = &str;
        }
        else {
            PyErr_SetString(PyExc_TypeError, "arg must be a string");
            return NULL;
        }
    }
    {
        MEAD_try_catch(arg0->read((string const &)*arg1);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_FinDiffMethod_add_level(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FinDiffMethod *arg0 ;
    int arg1 ;
    float arg2 ;
    Coord *arg3 ;
    PyObject * argo0 =0 ;
    PyObject * argo3 =0 ;
    
    if(!PyArg_ParseTuple(args,"OifO:FinDiffMethod_add_level",&argo0,&arg1,&arg2,&argo3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_FinDiffMethod,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo3,(void **) &arg3,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(arg0->add_level(arg1,arg2,*arg3);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_FinDiffMethod_resolve(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FinDiffMethod *arg0 ;
    Coord *arg1 ;
    Coord *arg2 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    PyObject * argo2 =0 ;
    
    if(!PyArg_ParseTuple(args,"OOO:FinDiffMethod_resolve",&argo0,&argo1,&argo2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_FinDiffMethod,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo2,(void **) &arg2,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(arg0->resolve(*arg1,*arg2);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_FinDiffMethod_is_resolved(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FinDiffMethod *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:FinDiffMethod_is_resolved",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_FinDiffMethod,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (bool )arg0->is_resolved();
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_FinDiffMethod_add_level__L29(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FinDiffMethod *arg0 ;
    int arg1 ;
    float arg2 ;
    int arg3 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Oifi:FinDiffMethod_add_level__L29",&argo0,&arg1,&arg2,&arg3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_FinDiffMethod,1)) == -1) return NULL;
    {
        MEAD_try_catch(FinDiffMethod_add_level(arg0,arg1,arg2,arg3);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


void  FinDiffMethod_write(FinDiffMethod *self) {
    {
        self->print(cout); 
    }
}


static PyObject *_wrap_FinDiffMethod_write(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FinDiffMethod *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:FinDiffMethod_write",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_FinDiffMethod,1)) == -1) return NULL;
    {
        MEAD_try_catch(FinDiffMethod_write(arg0);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


list_CubeLatSpec * FinDiffMethod_levels(FinDiffMethod *self) {
    {
        list_CubeLatSpec *lcls = new list_CubeLatSpec(0);
        CubeLatSpec *cls = 0;
        if (cls = self->get_coarsest()) {
            lcls->push_back(*cls);
            while (cls = self->get_finer()) {
                lcls->push_back(*cls);
            }
        }
        return lcls;
    }
}


static PyObject *_wrap_FinDiffMethod_levels(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FinDiffMethod *arg0 ;
    PyObject * argo0 =0 ;
    list_CubeLatSpec *result ;
    
    if(!PyArg_ParseTuple(args,"O:FinDiffMethod_levels",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_FinDiffMethod,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (list_CubeLatSpec *)FinDiffMethod_levels(arg0);
        )
    }{
        resultobj = PyList_New(0);    if (!resultobj) return NULL;    for (list_CubeLatSpec::const_iterator p = result->begin(); p!=result->end(); ++p) {
            CubeLatSpec *fp = new CubeLatSpec(*p);      PyObject *optr = CubeLatSpecPtr((void *) fp, 1);      PyList_Append(resultobj, optr);      Py_DECREF(optr);    
        }    delete result;  
    }
    return resultobj;
}


static PyObject *_wrap_delete_AnalySphere(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AnalySphere *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_AnalySphere",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AnalySphere,1)) == -1) return NULL;
    {
        MEAD_try_catch(delete arg0;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_AnalySphere_solve(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AnalySphere *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:AnalySphere_solve",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AnalySphere,1)) == -1) return NULL;
    {
        MEAD_try_catch(arg0->solve();
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_AnalySphere_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AnalySphere *arg0 ;
    Coord *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"OO:AnalySphere_value",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AnalySphere,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )arg0->value(*arg1);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_AnalySphere_field(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AnalySphere *arg0 ;
    Coord *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    Coord *result ;
    
    if(!PyArg_ParseTuple(args,"OO:AnalySphere_field",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AnalySphere,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Coord (arg0->field(*arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Coord);
    return resultobj;
}


static PyObject *_wrap_AnalySphere_displacement(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AnalySphere *arg0 ;
    Coord *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    Coord *result ;
    
    if(!PyArg_ParseTuple(args,"OO:AnalySphere_displacement",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AnalySphere,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Coord (arg0->displacement(*arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Coord);
    return resultobj;
}


static PyObject *_wrap_AnalySphere_get_rad_diel(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AnalySphere *arg0 ;
    PyObject * argo0 =0 ;
    double result ;
    
    if(!PyArg_ParseTuple(args,"O:AnalySphere_get_rad_diel",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AnalySphere,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (double )arg0->get_rad_diel();
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_AnalySphere_get_rad_ely(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AnalySphere *arg0 ;
    PyObject * argo0 =0 ;
    double result ;
    
    if(!PyArg_ParseTuple(args,"O:AnalySphere_get_rad_ely",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AnalySphere,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (double )arg0->get_rad_ely();
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_AnalySphere_get_maxterm(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AnalySphere *arg0 ;
    PyObject * argo0 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"O:AnalySphere_get_maxterm",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AnalySphere,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int )arg0->get_maxterm();
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_new_AnalySphere(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DielectricSphere *arg0 ;
    ChargeDist_lett *arg1 ;
    ElySphere *arg2 ;
    int arg3 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    PyObject * argo2 =0 ;
    AnalySphere *result ;
    
    if(!PyArg_ParseTuple(args,"OOOi:new_AnalySphere",&argo0,&argo1,&argo2,&arg3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_DielectricSphere,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_ChargeDist_lett,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo2,(void **) &arg2,SWIGTYPE_p_ElySphere,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (AnalySphere *)new_AnalySphere(arg0,arg1,arg2,arg3);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_AnalySphere);
    return resultobj;
}


static PyObject *_wrap_new_AnalySphere__L33(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DielectricSphere *arg0 ;
    ChargeDist_lett *arg1 ;
    ElySphere *arg2 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    PyObject * argo2 =0 ;
    AnalySphere *result ;
    
    if(!PyArg_ParseTuple(args,"OOO:new_AnalySphere__L33",&argo0,&argo1,&argo2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_DielectricSphere,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_ChargeDist_lett,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo2,(void **) &arg2,SWIGTYPE_p_ElySphere,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (AnalySphere *)new_AnalySphere(arg0,arg1,arg2);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_AnalySphere);
    return resultobj;
}


static PyObject *_wrap_AnalySphere___mul__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AnalySphere *arg0 ;
    ChargeDist_lett *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"OO:AnalySphere___mul__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AnalySphere,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_ChargeDist_lett,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )AnalySphere___mul__(arg0,(ChargeDist_lett const &)*arg1);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_AnalySphere___mul____L69(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AnalySphere *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    ElstatPotCombination *result ;
    
    if(!PyArg_ParseTuple(args,"Of:AnalySphere___mul____L69",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AnalySphere,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new ElstatPotCombination (AnalySphere___mul__(arg0,arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_ElstatPotCombination);
    return resultobj;
}


BEGIN_CPLUSPLUS_SECTION
ElstatPotCombination  AnalySphere___rmul__(AnalySphere *self,float oprnd2) {
    {
        return *self * oprnd2;
    }
}
END_CPLUSPLUS_SECTION


static PyObject *_wrap_AnalySphere___rmul__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AnalySphere *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    ElstatPotCombination *result ;
    
    if(!PyArg_ParseTuple(args,"Of:AnalySphere___rmul__",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AnalySphere,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new ElstatPotCombination (AnalySphere___rmul__(arg0,arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_ElstatPotCombination);
    return resultobj;
}


BEGIN_CPLUSPLUS_SECTION
ElstatPotCombination  AnalySphere___div__(AnalySphere *self,float oprnd2) {
    {
        return *self / oprnd2;
    }
}
END_CPLUSPLUS_SECTION


static PyObject *_wrap_AnalySphere___div__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AnalySphere *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    ElstatPotCombination *result ;
    
    if(!PyArg_ParseTuple(args,"Of:AnalySphere___div__",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AnalySphere,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new ElstatPotCombination (AnalySphere___div__(arg0,arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_ElstatPotCombination);
    return resultobj;
}


static PyObject *_wrap_delete_AnalySlab(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AnalySlab *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_AnalySlab",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AnalySlab,1)) == -1) return NULL;
    {
        MEAD_try_catch(delete arg0;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_AnalySlab_solve(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AnalySlab *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:AnalySlab_solve",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AnalySlab,1)) == -1) return NULL;
    {
        MEAD_try_catch(arg0->solve();
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_AnalySlab_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AnalySlab *arg0 ;
    Coord *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"OO:AnalySlab_value",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AnalySlab,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )arg0->value(*arg1);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_AnalySlab_field(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AnalySlab *arg0 ;
    Coord *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    Coord *result ;
    
    if(!PyArg_ParseTuple(args,"OO:AnalySlab_field",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AnalySlab,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Coord (arg0->field(*arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Coord);
    return resultobj;
}


static PyObject *_wrap_AnalySlab_displacement(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AnalySlab *arg0 ;
    Coord *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    Coord *result ;
    
    if(!PyArg_ParseTuple(args,"OO:AnalySlab_displacement",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AnalySlab,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Coord (arg0->displacement(*arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Coord);
    return resultobj;
}


static PyObject *_wrap_AnalySlab_get_zlower(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AnalySlab *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:AnalySlab_get_zlower",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AnalySlab,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )arg0->get_zlower();
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_AnalySlab_get_zupper(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AnalySlab *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:AnalySlab_get_zupper",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AnalySlab,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )arg0->get_zupper();
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_AnalySlab_get_maxterm(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AnalySlab *arg0 ;
    PyObject * argo0 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"O:AnalySlab_get_maxterm",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AnalySlab,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (int )arg0->get_maxterm();
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_new_AnalySlab(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DielectricSlab *arg0 ;
    ChargeDist_lett *arg1 ;
    ElectrolyteEnvironment_lett *arg2 ;
    int arg3 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    PyObject * argo2 =0 ;
    AnalySlab *result ;
    
    if(!PyArg_ParseTuple(args,"OOOi:new_AnalySlab",&argo0,&argo1,&argo2,&arg3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_DielectricSlab,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_ChargeDist_lett,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo2,(void **) &arg2,SWIGTYPE_p_ElectrolyteEnvironment_lett,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (AnalySlab *)new_AnalySlab(arg0,arg1,arg2,arg3);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_AnalySlab);
    return resultobj;
}


static PyObject *_wrap_new_AnalySlab__L35(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DielectricSlab *arg0 ;
    ChargeDist_lett *arg1 ;
    ElectrolyteEnvironment_lett *arg2 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    PyObject * argo2 =0 ;
    AnalySlab *result ;
    
    if(!PyArg_ParseTuple(args,"OOO:new_AnalySlab__L35",&argo0,&argo1,&argo2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_DielectricSlab,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_ChargeDist_lett,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo2,(void **) &arg2,SWIGTYPE_p_ElectrolyteEnvironment_lett,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (AnalySlab *)new_AnalySlab(arg0,arg1,arg2);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_AnalySlab);
    return resultobj;
}


static PyObject *_wrap_AnalySlab___mul__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AnalySlab *arg0 ;
    ChargeDist_lett *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"OO:AnalySlab___mul__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AnalySlab,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_ChargeDist_lett,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )AnalySlab___mul__(arg0,(ChargeDist_lett const &)*arg1);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_AnalySlab___mul____L71(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AnalySlab *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    ElstatPotCombination *result ;
    
    if(!PyArg_ParseTuple(args,"Of:AnalySlab___mul____L71",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AnalySlab,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new ElstatPotCombination (AnalySlab___mul__(arg0,arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_ElstatPotCombination);
    return resultobj;
}


BEGIN_CPLUSPLUS_SECTION
ElstatPotCombination  AnalySlab___rmul__(AnalySlab *self,float oprnd2) {
    {
        return *self * oprnd2;
    }
}
END_CPLUSPLUS_SECTION


static PyObject *_wrap_AnalySlab___rmul__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AnalySlab *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    ElstatPotCombination *result ;
    
    if(!PyArg_ParseTuple(args,"Of:AnalySlab___rmul__",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AnalySlab,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new ElstatPotCombination (AnalySlab___rmul__(arg0,arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_ElstatPotCombination);
    return resultobj;
}


BEGIN_CPLUSPLUS_SECTION
ElstatPotCombination  AnalySlab___div__(AnalySlab *self,float oprnd2) {
    {
        return *self / oprnd2;
    }
}
END_CPLUSPLUS_SECTION


static PyObject *_wrap_AnalySlab___div__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    AnalySlab *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    ElstatPotCombination *result ;
    
    if(!PyArg_ParseTuple(args,"Of:AnalySlab___div__",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_AnalySlab,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new ElstatPotCombination (AnalySlab___div__(arg0,arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_ElstatPotCombination);
    return resultobj;
}


static PyObject *_wrap_new_Debye(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    UniformDielectric *arg0 ;
    ChargeDist_lett *arg1 ;
    ElectrolyteEnvironment_lett *arg2 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    PyObject * argo2 =0 ;
    Debye *result ;
    
    if(!PyArg_ParseTuple(args,"OOO:new_Debye",&argo0,&argo1,&argo2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_UniformDielectric,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_ChargeDist_lett,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo2,(void **) &arg2,SWIGTYPE_p_ElectrolyteEnvironment_lett,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (Debye *)new Debye(arg0,arg1,arg2);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Debye);
    return resultobj;
}


static PyObject *_wrap_delete_Debye(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Debye *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_Debye",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Debye,1)) == -1) return NULL;
    {
        MEAD_try_catch(delete arg0;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_Debye_solve(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Debye *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:Debye_solve",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Debye,1)) == -1) return NULL;
    {
        MEAD_try_catch(arg0->solve();
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_Debye_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Debye *arg0 ;
    Coord *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"OO:Debye_value",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Debye,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )arg0->value(*arg1);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_Debye_field(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Debye *arg0 ;
    Coord *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    Coord *result ;
    
    if(!PyArg_ParseTuple(args,"OO:Debye_field",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Debye,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Coord (arg0->field(*arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Coord);
    return resultobj;
}


static PyObject *_wrap_Debye_displacement(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Debye *arg0 ;
    Coord *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    Coord *result ;
    
    if(!PyArg_ParseTuple(args,"OO:Debye_displacement",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Debye,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Coord (arg0->displacement(*arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Coord);
    return resultobj;
}


static PyObject *_wrap_Debye_get_kappa(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Debye *arg0 ;
    PyObject * argo0 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"O:Debye_get_kappa",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Debye,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )arg0->get_kappa();
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_Debye___mul__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Debye *arg0 ;
    ChargeDist_lett *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"OO:Debye___mul__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Debye,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_ChargeDist_lett,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )Debye___mul__(arg0,(ChargeDist_lett const &)*arg1);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_Debye___mul____L47(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Debye *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    ElstatPotCombination *result ;
    
    if(!PyArg_ParseTuple(args,"Of:Debye___mul____L47",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Debye,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new ElstatPotCombination (Debye___mul__(arg0,arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_ElstatPotCombination);
    return resultobj;
}


BEGIN_CPLUSPLUS_SECTION
ElstatPotCombination  Debye___rmul__(Debye *self,float oprnd2) {
    {
        return *self * oprnd2;
    }
}
END_CPLUSPLUS_SECTION


static PyObject *_wrap_Debye___rmul__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Debye *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    ElstatPotCombination *result ;
    
    if(!PyArg_ParseTuple(args,"Of:Debye___rmul__",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Debye,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new ElstatPotCombination (Debye___rmul__(arg0,arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_ElstatPotCombination);
    return resultobj;
}


BEGIN_CPLUSPLUS_SECTION
ElstatPotCombination  Debye___div__(Debye *self,float oprnd2) {
    {
        return *self / oprnd2;
    }
}
END_CPLUSPLUS_SECTION


static PyObject *_wrap_Debye___div__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Debye *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    ElstatPotCombination *result ;
    
    if(!PyArg_ParseTuple(args,"Of:Debye___div__",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Debye,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new ElstatPotCombination (Debye___div__(arg0,arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_ElstatPotCombination);
    return resultobj;
}


static PyObject *_wrap_new_FinDiffElstatPot(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FinDiffMethod *arg0 ;
    DielectricEnvironment_lett *arg1 ;
    ChargeDist_lett *arg2 ;
    ElectrolyteEnvironment_lett *arg3 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    PyObject * argo2 =0 ;
    PyObject * argo3 =0 ;
    FinDiffElstatPot *result ;
    
    if(!PyArg_ParseTuple(args,"OOOO:new_FinDiffElstatPot",&argo0,&argo1,&argo2,&argo3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_FinDiffMethod,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_DielectricEnvironment_lett,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo2,(void **) &arg2,SWIGTYPE_p_ChargeDist_lett,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo3,(void **) &arg3,SWIGTYPE_p_ElectrolyteEnvironment_lett,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (FinDiffElstatPot *)new FinDiffElstatPot(*arg0,arg1,arg2,arg3);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_FinDiffElstatPot);
    return resultobj;
}


static PyObject *_wrap_new_FinDiffElstatPot__L17(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DielectricEnvironment_lett *arg0 ;
    ChargeDist_lett *arg1 ;
    ElectrolyteEnvironment_lett *arg2 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    PyObject * argo2 =0 ;
    FinDiffElstatPot *result ;
    
    if(!PyArg_ParseTuple(args,"OOO:new_FinDiffElstatPot__L17",&argo0,&argo1,&argo2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_DielectricEnvironment_lett,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_ChargeDist_lett,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo2,(void **) &arg2,SWIGTYPE_p_ElectrolyteEnvironment_lett,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (FinDiffElstatPot *)new FinDiffElstatPot(arg0,arg1,arg2);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_FinDiffElstatPot);
    return resultobj;
}


static PyObject *_wrap_delete_FinDiffElstatPot(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FinDiffElstatPot *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_FinDiffElstatPot",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_FinDiffElstatPot,1)) == -1) return NULL;
    {
        MEAD_try_catch(delete arg0;
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_FinDiffElstatPot_solve(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FinDiffElstatPot *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:FinDiffElstatPot_solve",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_FinDiffElstatPot,1)) == -1) return NULL;
    {
        MEAD_try_catch(arg0->solve();
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_FinDiffElstatPot_solve_using_coarse_init(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FinDiffElstatPot *arg0 ;
    string *arg1 ;
    PyObject * argo0 =0 ;
    string str ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,"OO:FinDiffElstatPot_solve_using_coarse_init",&argo0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_FinDiffElstatPot,1)) == -1) return NULL;
    {
        if (PyString_Check(obj1)) {
            str = string(PyString_AsString(obj1));
            arg1 = &str;
        }
        else {
            PyErr_SetString(PyExc_TypeError, "arg must be a string");
            return NULL;
        }
    }
    {
        MEAD_try_catch(arg0->solve_using_coarse_init(*arg1);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_FinDiffElstatPot_write_coarse_field(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FinDiffElstatPot *arg0 ;
    string *arg1 ;
    PyObject * argo0 =0 ;
    string str ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,"OO:FinDiffElstatPot_write_coarse_field",&argo0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_FinDiffElstatPot,1)) == -1) return NULL;
    {
        if (PyString_Check(obj1)) {
            str = string(PyString_AsString(obj1));
            arg1 = &str;
        }
        else {
            PyErr_SetString(PyExc_TypeError, "arg must be a string");
            return NULL;
        }
    }
    {
        MEAD_try_catch(arg0->write_coarse_field((string const &)*arg1);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_FinDiffElstatPot_coarse_lattice_spec(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FinDiffElstatPot *arg0 ;
    PyObject * argo0 =0 ;
    CubeLatSpec *result ;
    
    if(!PyArg_ParseTuple(args,"O:FinDiffElstatPot_coarse_lattice_spec",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_FinDiffElstatPot,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new CubeLatSpec (arg0->coarse_lattice_spec());)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_CubeLatSpec);
    return resultobj;
}


static PyObject *_wrap_FinDiffElstatPot_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FinDiffElstatPot *arg0 ;
    Coord *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"OO:FinDiffElstatPot_value",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_FinDiffElstatPot,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )arg0->value(*arg1);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_FinDiffElstatPot_field(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FinDiffElstatPot *arg0 ;
    Coord *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    Coord *result ;
    
    if(!PyArg_ParseTuple(args,"OO:FinDiffElstatPot_field",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_FinDiffElstatPot,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Coord (arg0->field(*arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Coord);
    return resultobj;
}


static PyObject *_wrap_FinDiffElstatPot_displacement(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FinDiffElstatPot *arg0 ;
    Coord *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    Coord *result ;
    
    if(!PyArg_ParseTuple(args,"OO:FinDiffElstatPot_displacement",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_FinDiffElstatPot,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Coord (arg0->displacement(*arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Coord);
    return resultobj;
}


Numeric_3D_Array_FLOAT * FinDiffElstatPot_get_cuberep(FinDiffElstatPot *self,CubeLatSpec const &cls) {
    {
        FDGridLevel* finest = self->get_fine_grid_pot();
        list<FDGridLevel*> levels(0);
        int ngr = cls.get_grid_dim();
        int ncube = ngr * ngr * ngr;
        Numeric_3D_Array_FLOAT * data_array = 0;
        // Look for the cls in the grid levels of this FinDiffElstatPot.
        if (finest != 0) {
            while (finest) {
                levels.push_back(finest);
                finest = self->get_coarser(finest);
            }
            FinDiffMethod theMethod(self->get_method());
            CubeLatSpec *theLattice = const_cast<CubeLatSpec*>(&cls);
            CubeLatSpec *FDlattice = theMethod.get_coarsest();
            int level=0;
            while (FDlattice) {
                if (*theLattice == *FDlattice) {
                    list<FDGridLevel*>::reverse_iterator rind=levels.rbegin();
                    for (; rind != levels.rend() && level > 0; ++rind, --level);
                    if (rind != levels.rend() && level == 0) {
                        data_array = new Numeric_3D_Array_FLOAT [ncube];
                        FDGridLevel* theLevel = *rind;
                        self->get_val_array(theLevel, data_array);
                    }
                    break;
                }
                FDlattice = theMethod.get_finer();
                ++level;
            }
        }
// If the cls level wasn't found then use the base class method
    if (data_array == 0) {
      data_array = ElstatPot_lett_get_cuberep(self, cls);
    }
    return data_array;
  }
}


static PyObject *_wrap_FinDiffElstatPot_get_cuberep(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FinDiffElstatPot *arg0 ;
    CubeLatSpec *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    Numeric_3D_Array_FLOAT *result ;
    
    if(!PyArg_ParseTuple(args,"OO:FinDiffElstatPot_get_cuberep",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_FinDiffElstatPot,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_CubeLatSpec,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (Numeric_3D_Array_FLOAT *)FinDiffElstatPot_get_cuberep(arg0,(CubeLatSpec const &)*arg1);
        )
    }{
        if (result != 0) {
            int dims[3];      dims[0] = dims[1] = dims[2] = arg1->get_grid_dim();      PyArrayObject * array_data = (PyArrayObject *) PyArray_FromDimsAndData (3, dims, PyArray_FLOAT, (char *) result);      if (!array_data) return NULL;      array_data->flags |= OWN_DATA;      resultobj = (PyObject *) array_data;    
        }    else {
            PyErr_SetString (PyExc_RuntimeError, "Numeric_Array_""FLOAT"": memory alloc failed");      resultobj = 0;    
        }  
    }
    return resultobj;
}


static PyObject *_wrap_FinDiffElstatPot___mul__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FinDiffElstatPot *arg0 ;
    ChargeDist_lett *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"OO:FinDiffElstatPot___mul__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_FinDiffElstatPot,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_ChargeDist_lett,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )FinDiffElstatPot___mul__(arg0,(ChargeDist_lett const &)*arg1);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_FinDiffElstatPot___mul____L97(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FinDiffElstatPot *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    ElstatPotCombination *result ;
    
    if(!PyArg_ParseTuple(args,"Of:FinDiffElstatPot___mul____L97",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_FinDiffElstatPot,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new ElstatPotCombination (FinDiffElstatPot___mul__(arg0,arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_ElstatPotCombination);
    return resultobj;
}


BEGIN_CPLUSPLUS_SECTION
ElstatPotCombination  FinDiffElstatPot___rmul__(FinDiffElstatPot *self,float oprnd2) {
    {
        return *self * oprnd2;
    }
}
END_CPLUSPLUS_SECTION


static PyObject *_wrap_FinDiffElstatPot___rmul__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FinDiffElstatPot *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    ElstatPotCombination *result ;
    
    if(!PyArg_ParseTuple(args,"Of:FinDiffElstatPot___rmul__",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_FinDiffElstatPot,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new ElstatPotCombination (FinDiffElstatPot___rmul__(arg0,arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_ElstatPotCombination);
    return resultobj;
}


BEGIN_CPLUSPLUS_SECTION
ElstatPotCombination  FinDiffElstatPot___div__(FinDiffElstatPot *self,float oprnd2) {
    {
        return *self / oprnd2;
    }
}
END_CPLUSPLUS_SECTION


static PyObject *_wrap_FinDiffElstatPot___div__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FinDiffElstatPot *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    ElstatPotCombination *result ;
    
    if(!PyArg_ParseTuple(args,"Of:FinDiffElstatPot___div__",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_FinDiffElstatPot,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new ElstatPotCombination (FinDiffElstatPot___div__(arg0,arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_ElstatPotCombination);
    return resultobj;
}


static PyObject *_wrap_new_ElstatPotCombination(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ElstatPotCombination *result ;
    
    if(!PyArg_ParseTuple(args,":new_ElstatPotCombination")) return NULL;
    {
        MEAD_try_catch(result = (ElstatPotCombination *)new ElstatPotCombination();
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ElstatPotCombination);
    return resultobj;
}


static PyObject *_wrap_new_ElstatPotCombination__deepcopy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ElstatPotCombination *arg0 ;
    PyObject * argo0 =0 ;
    ElstatPotCombination *result ;
    
    if(!PyArg_ParseTuple(args,"O:new_ElstatPotCombination__deepcopy",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ElstatPotCombination,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (ElstatPotCombination *)new ElstatPotCombination((ElstatPotCombination const &)*arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ElstatPotCombination);
    return resultobj;
}


static PyObject *_wrap_new_ElstatPotCombination__L16(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ElstatPotCombination *arg0 ;
    PyObject * argo0 =0 ;
    ElstatPotCombination *result ;
    
    if(!PyArg_ParseTuple(args,"O:new_ElstatPotCombination__L16",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ElstatPotCombination,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (ElstatPotCombination *)new ElstatPotCombination((ElstatPotCombination const &)*arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ElstatPotCombination);
    return resultobj;
}


static PyObject *_wrap_ElstatPotCombination_solve(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ElstatPotCombination *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:ElstatPotCombination_solve",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ElstatPotCombination,1)) == -1) return NULL;
    {
        MEAD_try_catch(arg0->solve();
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_ElstatPotCombination_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ElstatPotCombination *arg0 ;
    Coord *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"OO:ElstatPotCombination_value",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ElstatPotCombination,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )arg0->value(*arg1);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_ElstatPotCombination_field(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ElstatPotCombination *arg0 ;
    Coord *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    Coord *result ;
    
    if(!PyArg_ParseTuple(args,"OO:ElstatPotCombination_field",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ElstatPotCombination,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Coord (arg0->field(*arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Coord);
    return resultobj;
}


static PyObject *_wrap_ElstatPotCombination_displacement(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ElstatPotCombination *arg0 ;
    Coord *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    Coord *result ;
    
    if(!PyArg_ParseTuple(args,"OO:ElstatPotCombination_displacement",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ElstatPotCombination,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Coord,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Coord (arg0->displacement(*arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Coord);
    return resultobj;
}


void  delete_ElstatPotCombination(ElstatPotCombination *self) {
    {
        
    }
}


static PyObject *_wrap_delete_ElstatPotCombination(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ElstatPotCombination *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_ElstatPotCombination",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ElstatPotCombination,1)) == -1) return NULL;
    {
        MEAD_try_catch(delete_ElstatPotCombination(arg0);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_ElstatPotCombination___iadd__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ElstatPotCombination *arg0 ;
    ElstatPotCombination *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    ElstatPotCombination *result ;
    
    if(!PyArg_ParseTuple(args,"OO:ElstatPotCombination___iadd__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ElstatPotCombination,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_ElstatPotCombination,1)) == -1) return NULL;
    {
        MEAD_try_catch(ElstatPotCombination &_result_ref = ElstatPotCombination___iadd__(arg0,(ElstatPotCombination const &)*arg1);
        result = (ElstatPotCombination *) &_result_ref;
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ElstatPotCombination);
    return resultobj;
}


static PyObject *_wrap_ElstatPotCombination___iadd____L90(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ElstatPotCombination *arg0 ;
    ElstatPot_lett *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    ElstatPotCombination *result ;
    
    if(!PyArg_ParseTuple(args,"OO:ElstatPotCombination___iadd____L90",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ElstatPotCombination,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_ElstatPot_lett,1)) == -1) return NULL;
    {
        MEAD_try_catch(ElstatPotCombination &_result_ref = ElstatPotCombination___iadd__(arg0,*arg1);
        result = (ElstatPotCombination *) &_result_ref;
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ElstatPotCombination);
    return resultobj;
}


ElstatPotCombination & ElstatPotCombination___imul__(ElstatPotCombination *self,float oprnd2) {
    {
        return *self *= oprnd2;
    }
}


static PyObject *_wrap_ElstatPotCombination___imul__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ElstatPotCombination *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    ElstatPotCombination *result ;
    
    if(!PyArg_ParseTuple(args,"Of:ElstatPotCombination___imul__",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ElstatPotCombination,1)) == -1) return NULL;
    {
        MEAD_try_catch(ElstatPotCombination &_result_ref = ElstatPotCombination___imul__(arg0,arg1);
        result = (ElstatPotCombination *) &_result_ref;
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ElstatPotCombination);
    return resultobj;
}


ElstatPotCombination & ElstatPotCombination___idiv__(ElstatPotCombination *self,float oprnd2) {
    {
        return *self /= oprnd2;
    }
}


static PyObject *_wrap_ElstatPotCombination___idiv__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ElstatPotCombination *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    ElstatPotCombination *result ;
    
    if(!PyArg_ParseTuple(args,"Of:ElstatPotCombination___idiv__",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ElstatPotCombination,1)) == -1) return NULL;
    {
        MEAD_try_catch(ElstatPotCombination &_result_ref = ElstatPotCombination___idiv__(arg0,arg1);
        result = (ElstatPotCombination *) &_result_ref;
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ElstatPotCombination);
    return resultobj;
}


static PyObject *_wrap_ElstatPotCombination___add__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ElstatPotCombination *arg0 ;
    ElstatPotCombination *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    ElstatPotCombination *result ;
    
    if(!PyArg_ParseTuple(args,"OO:ElstatPotCombination___add__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ElstatPotCombination,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_ElstatPotCombination,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new ElstatPotCombination (ElstatPotCombination___add__(arg0,(ElstatPotCombination const &)*arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_ElstatPotCombination);
    return resultobj;
}


static PyObject *_wrap_ElstatPotCombination___add____L98(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ElstatPotCombination *arg0 ;
    ElstatPot_lett *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    ElstatPotCombination *result ;
    
    if(!PyArg_ParseTuple(args,"OO:ElstatPotCombination___add____L98",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ElstatPotCombination,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_ElstatPot_lett,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new ElstatPotCombination (ElstatPotCombination___add__(arg0,*arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_ElstatPotCombination);
    return resultobj;
}


static PyObject *_wrap_ElstatPotCombination___mul__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ElstatPotCombination *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    ElstatPotCombination *result ;
    
    if(!PyArg_ParseTuple(args,"Of:ElstatPotCombination___mul__",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ElstatPotCombination,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new ElstatPotCombination (ElstatPotCombination___mul__(arg0,arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_ElstatPotCombination);
    return resultobj;
}


BEGIN_CPLUSPLUS_SECTION
ElstatPotCombination  ElstatPotCombination___rmul__(ElstatPotCombination *self,float oprnd2) {
    {
        return *self * oprnd2;
    }
}
END_CPLUSPLUS_SECTION


static PyObject *_wrap_ElstatPotCombination___rmul__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ElstatPotCombination *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    ElstatPotCombination *result ;
    
    if(!PyArg_ParseTuple(args,"Of:ElstatPotCombination___rmul__",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ElstatPotCombination,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new ElstatPotCombination (ElstatPotCombination___rmul__(arg0,arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_ElstatPotCombination);
    return resultobj;
}


BEGIN_CPLUSPLUS_SECTION
ElstatPotCombination  ElstatPotCombination___div__(ElstatPotCombination *self,float oprnd2) {
    {
        return *self / oprnd2;
    }
}
END_CPLUSPLUS_SECTION


static PyObject *_wrap_ElstatPotCombination___div__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ElstatPotCombination *arg0 ;
    float arg1 ;
    PyObject * argo0 =0 ;
    ElstatPotCombination *result ;
    
    if(!PyArg_ParseTuple(args,"Of:ElstatPotCombination___div__",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ElstatPotCombination,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new ElstatPotCombination (ElstatPotCombination___div__(arg0,arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_ElstatPotCombination);
    return resultobj;
}


static PyObject *_wrap_ElstatPotCombination___mul____L106(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ElstatPotCombination *arg0 ;
    ChargeDist_lett *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    float result ;
    
    if(!PyArg_ParseTuple(args,"OO:ElstatPotCombination___mul____L106",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ElstatPotCombination,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_ChargeDist_lett,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (float )ElstatPotCombination___mul__(arg0,(ChargeDist_lett const &)*arg1);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_new_Moments(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg0 ;
    Moments *result ;
    
    if(!PyArg_ParseTuple(args,"i:new_Moments",&arg0)) return NULL;
    {
        MEAD_try_catch(result = (Moments *)new Moments(arg0);
        )
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Moments);
    return resultobj;
}


static PyObject *_wrap_Moments_ellmax(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Moments *arg0 ;
    PyObject * argo0 =0 ;
    unsigned int result ;
    
    if(!PyArg_ParseTuple(args,"O:Moments_ellmax",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Moments,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (unsigned int )arg0->ellmax();
        )
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


double  Moments_get_imag(Moments *self,int ell,int m) {
    {
        return imag((*self)(ell,m)); 
    }
}


static PyObject *_wrap_Moments_get_imag(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Moments *arg0 ;
    int arg1 ;
    int arg2 ;
    PyObject * argo0 =0 ;
    double result ;
    
    if(!PyArg_ParseTuple(args,"Oii:Moments_get_imag",&argo0,&arg1,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Moments,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = (double )Moments_get_imag(arg0,arg1,arg2);
        )
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


void  Moments_set(Moments *self,int ell,int m,double real,double imag) {
    {
        (*self)(ell, m) = Moments::momtype(real, imag); 
    }
}


static PyObject *_wrap_Moments_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Moments *arg0 ;
    int arg1 ;
    int arg2 ;
    double arg3 ;
    double arg4 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Oiidd:Moments_set",&argo0,&arg1,&arg2,&arg3,&arg4)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Moments,1)) == -1) return NULL;
    {
        MEAD_try_catch(Moments_set(arg0,arg1,arg2,arg3,arg4);
        )
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


BEGIN_CPLUSPLUS_SECTION
Moments  Moments___neg__(Moments *self) {
    {
        return -(*self);
    }
}
END_CPLUSPLUS_SECTION


static PyObject *_wrap_Moments___neg__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Moments *arg0 ;
    PyObject * argo0 =0 ;
    Moments *result ;
    
    if(!PyArg_ParseTuple(args,"O:Moments___neg__",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Moments,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Moments (Moments___neg__(arg0));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Moments);
    return resultobj;
}


BEGIN_CPLUSPLUS_SECTION
Moments  Moments___add__(Moments *self,Moments const oprnd2) {
    {
        return *self + oprnd2;
    }
}
END_CPLUSPLUS_SECTION


static PyObject *_wrap_Moments___add__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Moments *arg0 ;
    Moments *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    Moments *result ;
    
    if(!PyArg_ParseTuple(args,"OO:Moments___add__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Moments,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Moments,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Moments (Moments___add__(arg0,*arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Moments);
    return resultobj;
}


BEGIN_CPLUSPLUS_SECTION
Moments  Moments___sub__(Moments *self,Moments const oprnd2) {
    {
        return *self - oprnd2;
    }
}
END_CPLUSPLUS_SECTION


static PyObject *_wrap_Moments___sub__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Moments *arg0 ;
    Moments *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    Moments *result ;
    
    if(!PyArg_ParseTuple(args,"OO:Moments___sub__",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Moments,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Moments,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Moments (Moments___sub__(arg0,*arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Moments);
    return resultobj;
}


BEGIN_CPLUSPLUS_SECTION
Moments  Moments___mul__(Moments *self,double oprnd2) {
    {
        return *self * oprnd2;
    }
}
END_CPLUSPLUS_SECTION


static PyObject *_wrap_Moments___mul__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Moments *arg0 ;
    double arg1 ;
    PyObject * argo0 =0 ;
    Moments *result ;
    
    if(!PyArg_ParseTuple(args,"Od:Moments___mul__",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Moments,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Moments (Moments___mul__(arg0,arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Moments);
    return resultobj;
}


BEGIN_CPLUSPLUS_SECTION
Moments  Moments___rmul__(Moments *self,double oprnd2) {
    {
        return *self * oprnd2;
    }
}
END_CPLUSPLUS_SECTION


static PyObject *_wrap_Moments___rmul__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Moments *arg0 ;
    double arg1 ;
    PyObject * argo0 =0 ;
    Moments *result ;
    
    if(!PyArg_ParseTuple(args,"Od:Moments___rmul__",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Moments,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Moments (Moments___rmul__(arg0,arg1));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Moments);
    return resultobj;
}


BEGIN_CPLUSPLUS_SECTION
Moments  Moments___pos__(Moments *self) {
    {
        return *self;
    }
}
END_CPLUSPLUS_SECTION


static PyObject *_wrap_Moments___pos__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Moments *arg0 ;
    PyObject * argo0 =0 ;
    Moments *result ;
    
    if(!PyArg_ParseTuple(args,"O:Moments___pos__",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Moments,1)) == -1) return NULL;
    {
        MEAD_try_catch(result = new Moments (Moments___pos__(arg0));)
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Moments);
    return resultobj;
}


static PyMethodDef MEADcMethods[] = {
	 { "order_one_Legendre", _wrap_order_one_Legendre, METH_VARARGS },
	 { "next_Legendre_using_prev2", _wrap_next_Legendre_using_prev2, METH_VARARGS },
	 { "create_legendre_series", _wrap_create_legendre_series, METH_VARARGS },
	 { "momentsOfElstatPot", _wrap_momentsOfElstatPot, METH_VARARGS },
	 { "print_moments", _wrap_print_moments, METH_VARARGS },
	 { "compare_moments", _wrap_compare_moments, METH_VARARGS },
	 { "momentsOfChargeDist", _wrap_momentsOfChargeDist, METH_VARARGS },
	 { "new_Coord", _wrap_new_Coord, METH_VARARGS },
	 { "new_Coord__L16", _wrap_new_Coord__L16, METH_VARARGS },
	 { "new_Coord__deepcopy", _wrap_new_Coord__deepcopy, METH_VARARGS },
	 { "new_Coord__L17", _wrap_new_Coord__L17, METH_VARARGS },
	 { "delete_Coord", _wrap_delete_Coord, METH_VARARGS },
	 { "Coord_x_set", _wrap_Coord_x_set, METH_VARARGS },
	 { "Coord_x_get", _wrap_Coord_x_get, METH_VARARGS },
	 { "Coord_y_set", _wrap_Coord_y_set, METH_VARARGS },
	 { "Coord_y_get", _wrap_Coord_y_get, METH_VARARGS },
	 { "Coord_z_set", _wrap_Coord_z_set, METH_VARARGS },
	 { "Coord_z_get", _wrap_Coord_z_get, METH_VARARGS },
	 { "Coord_write", _wrap_Coord_write, METH_VARARGS },
	 { "Coord_cross", _wrap_Coord_cross, METH_VARARGS },
	 { "Coord_dot", _wrap_Coord_dot, METH_VARARGS },
	 { "Coord___iadd__", _wrap_Coord___iadd__, METH_VARARGS },
	 { "Coord___isub__", _wrap_Coord___isub__, METH_VARARGS },
	 { "Coord___imul__", _wrap_Coord___imul__, METH_VARARGS },
	 { "Coord___idiv__", _wrap_Coord___idiv__, METH_VARARGS },
	 { "Coord___neg__", _wrap_Coord___neg__, METH_VARARGS },
	 { "Coord___gt__", _wrap_Coord___gt__, METH_VARARGS },
	 { "Coord___lt__", _wrap_Coord___lt__, METH_VARARGS },
	 { "Coord___add__", _wrap_Coord___add__, METH_VARARGS },
	 { "Coord___sub__", _wrap_Coord___sub__, METH_VARARGS },
	 { "Coord___mul__", _wrap_Coord___mul__, METH_VARARGS },
	 { "Coord___rmul__", _wrap_Coord___rmul__, METH_VARARGS },
	 { "Coord___mul____L86", _wrap_Coord___mul____L86, METH_VARARGS },
	 { "Coord___div__", _wrap_Coord___div__, METH_VARARGS },
	 { "Coord___eq__", _wrap_Coord___eq__, METH_VARARGS },
	 { "Coord___ne__", _wrap_Coord___ne__, METH_VARARGS },
	 { "Coord___pos__", _wrap_Coord___pos__, METH_VARARGS },
	 { "Coord___cmp__", _wrap_Coord___cmp__, METH_VARARGS },
	 { "DielectricEnvironment_lett_get_cuberep", _wrap_DielectricEnvironment_lett_get_cuberep, METH_VARARGS },
	 { "ElectrolyteEnvironment_lett_get_cuberep", _wrap_ElectrolyteEnvironment_lett_get_cuberep, METH_VARARGS },
	 { "ElstatPot_lett_get_cuberep", _wrap_ElstatPot_lett_get_cuberep, METH_VARARGS },
	 { "ElstatPot_lett___add__", _wrap_ElstatPot_lett___add__, METH_VARARGS },
	 { "ElstatPot_lett___add____L80", _wrap_ElstatPot_lett___add____L80, METH_VARARGS },
	 { "Atom_coord_set", _wrap_Atom_coord_set, METH_VARARGS },
	 { "Atom_coord_get", _wrap_Atom_coord_get, METH_VARARGS },
	 { "Atom_rad_set", _wrap_Atom_rad_set, METH_VARARGS },
	 { "Atom_rad_get", _wrap_Atom_rad_get, METH_VARARGS },
	 { "Atom_charge_set", _wrap_Atom_charge_set, METH_VARARGS },
	 { "Atom_charge_get", _wrap_Atom_charge_get, METH_VARARGS },
	 { "Atom_atname_set", _wrap_Atom_atname_set, METH_VARARGS },
	 { "Atom_atname_get", _wrap_Atom_atname_get, METH_VARARGS },
	 { "Atom_resname_set", _wrap_Atom_resname_set, METH_VARARGS },
	 { "Atom_resname_get", _wrap_Atom_resname_get, METH_VARARGS },
	 { "Atom_chainid_set", _wrap_Atom_chainid_set, METH_VARARGS },
	 { "Atom_chainid_get", _wrap_Atom_chainid_get, METH_VARARGS },
	 { "Atom_resnum_set", _wrap_Atom_resnum_set, METH_VARARGS },
	 { "Atom_resnum_get", _wrap_Atom_resnum_get, METH_VARARGS },
	 { "new_Atom", _wrap_new_Atom, METH_VARARGS },
	 { "new_Atom__deepcopy", _wrap_new_Atom__deepcopy, METH_VARARGS },
	 { "new_Atom__L23", _wrap_new_Atom__L23, METH_VARARGS },
	 { "delete_Atom", _wrap_delete_Atom, METH_VARARGS },
	 { "Atom_write", _wrap_Atom_write, METH_VARARGS },
	 { "Atom___eq__", _wrap_Atom___eq__, METH_VARARGS },
	 { "Atom___ne__", _wrap_Atom___ne__, METH_VARARGS },
	 { "Atom___lt__", _wrap_Atom___lt__, METH_VARARGS },
	 { "Atom___gt__", _wrap_Atom___gt__, METH_VARARGS },
	 { "Atom___cmp__", _wrap_Atom___cmp__, METH_VARARGS },
	 { "new_AtomID", _wrap_new_AtomID, METH_VARARGS },
	 { "new_AtomID__L16", _wrap_new_AtomID__L16, METH_VARARGS },
	 { "new_AtomID__deepcopy", _wrap_new_AtomID__deepcopy, METH_VARARGS },
	 { "new_AtomID__L17", _wrap_new_AtomID__L17, METH_VARARGS },
	 { "new_AtomID__L18", _wrap_new_AtomID__L18, METH_VARARGS },
	 { "delete_AtomID", _wrap_delete_AtomID, METH_VARARGS },
	 { "AtomID_resnum_set", _wrap_AtomID_resnum_set, METH_VARARGS },
	 { "AtomID_resnum_get", _wrap_AtomID_resnum_get, METH_VARARGS },
	 { "AtomID_atname_set", _wrap_AtomID_atname_set, METH_VARARGS },
	 { "AtomID_atname_get", _wrap_AtomID_atname_get, METH_VARARGS },
	 { "AtomID_chainid_set", _wrap_AtomID_chainid_set, METH_VARARGS },
	 { "AtomID_chainid_get", _wrap_AtomID_chainid_get, METH_VARARGS },
	 { "new_AtomID__L41", _wrap_new_AtomID__L41, METH_VARARGS },
	 { "AtomID___eq__", _wrap_AtomID___eq__, METH_VARARGS },
	 { "AtomID___ne__", _wrap_AtomID___ne__, METH_VARARGS },
	 { "AtomID___lt__", _wrap_AtomID___lt__, METH_VARARGS },
	 { "AtomID___gt__", _wrap_AtomID___gt__, METH_VARARGS },
	 { "AtomID___cmp__", _wrap_AtomID___cmp__, METH_VARARGS },
	 { "new_AtomSet", _wrap_new_AtomSet, METH_VARARGS },
	 { "new_AtomSet__L16", _wrap_new_AtomSet__L16, METH_VARARGS },
	 { "new_AtomSet__L17", _wrap_new_AtomSet__L17, METH_VARARGS },
	 { "new_AtomSet__deepcopy", _wrap_new_AtomSet__deepcopy, METH_VARARGS },
	 { "new_AtomSet__L18", _wrap_new_AtomSet__L18, METH_VARARGS },
	 { "delete_AtomSet", _wrap_delete_AtomSet, METH_VARARGS },
	 { "AtomSet_read", _wrap_AtomSet_read, METH_VARARGS },
	 { "AtomSet_read__L21", _wrap_AtomSet_read__L21, METH_VARARGS },
	 { "AtomSet_geom_cent", _wrap_AtomSet_geom_cent, METH_VARARGS },
	 { "AtomSet_set_coords_to", _wrap_AtomSet_set_coords_to, METH_VARARGS },
	 { "AtomSet_name_set", _wrap_AtomSet_name_set, METH_VARARGS },
	 { "AtomSet_name_get", _wrap_AtomSet_name_get, METH_VARARGS },
	 { "AtomSet_build_from_vectors", _wrap_AtomSet_build_from_vectors, METH_VARARGS },
	 { "AtomSet_insert", _wrap_AtomSet_insert, METH_VARARGS },
	 { "AtomSet_clear", _wrap_AtomSet_clear, METH_VARARGS },
	 { "AtomSet_copy", _wrap_AtomSet_copy, METH_VARARGS },
	 { "AtomSet_has_key", _wrap_AtomSet_has_key, METH_VARARGS },
	 { "AtomSet___len__", _wrap_AtomSet___len__, METH_VARARGS },
	 { "AtomSet___delitem__", _wrap_AtomSet___delitem__, METH_VARARGS },
	 { "AtomSet_update", _wrap_AtomSet_update, METH_VARARGS },
	 { "AtomSet_keys", _wrap_AtomSet_keys, METH_VARARGS },
	 { "AtomSet_values", _wrap_AtomSet_values, METH_VARARGS },
	 { "AtomSet___getitem__", _wrap_AtomSet___getitem__, METH_VARARGS },
	 { "AtomSet___setitem__", _wrap_AtomSet___setitem__, METH_VARARGS },
	 { "new_PointCharge", _wrap_new_PointCharge, METH_VARARGS },
	 { "new_PointCharge__L16", _wrap_new_PointCharge__L16, METH_VARARGS },
	 { "new_PointCharge__L17", _wrap_new_PointCharge__L17, METH_VARARGS },
	 { "delete_PointCharge", _wrap_delete_PointCharge, METH_VARARGS },
	 { "PointCharge_charge_set", _wrap_PointCharge_charge_set, METH_VARARGS },
	 { "PointCharge_charge_get", _wrap_PointCharge_charge_get, METH_VARARGS },
	 { "PointCharge_coord_set", _wrap_PointCharge_coord_set, METH_VARARGS },
	 { "PointCharge_coord_get", _wrap_PointCharge_coord_get, METH_VARARGS },
	 { "PointCharge___eq__", _wrap_PointCharge___eq__, METH_VARARGS },
	 { "new_AtomChargeSet", _wrap_new_AtomChargeSet, METH_VARARGS },
	 { "new_AtomChargeSet__L16", _wrap_new_AtomChargeSet__L16, METH_VARARGS },
	 { "new_AtomChargeSet__deepcopy", _wrap_new_AtomChargeSet__deepcopy, METH_VARARGS },
	 { "new_AtomChargeSet__L17", _wrap_new_AtomChargeSet__L17, METH_VARARGS },
	 { "delete_AtomChargeSet", _wrap_delete_AtomChargeSet, METH_VARARGS },
	 { "AtomChargeSet_total_charge", _wrap_AtomChargeSet_total_charge, METH_VARARGS },
	 { "AtomChargeSet_has_charges", _wrap_AtomChargeSet_has_charges, METH_VARARGS },
	 { "AtomChargeSet_vacuum_coulomb", _wrap_AtomChargeSet_vacuum_coulomb, METH_VARARGS },
	 { "AtomChargeSet_number_points", _wrap_AtomChargeSet_number_points, METH_VARARGS },
	 { "AtomChargeSet___mul__", _wrap_AtomChargeSet___mul__, METH_VARARGS },
	 { "AtomChargeSet___rmul__", _wrap_AtomChargeSet___rmul__, METH_VARARGS },
	 { "AtomChargeSet___div__", _wrap_AtomChargeSet___div__, METH_VARARGS },
	 { "AtomChargeSet___add__", _wrap_AtomChargeSet___add__, METH_VARARGS },
	 { "AtomChargeSet___add____L68", _wrap_AtomChargeSet___add____L68, METH_VARARGS },
	 { "AtomChargeSet___add____L69", _wrap_AtomChargeSet___add____L69, METH_VARARGS },
	 { "AtomChargeSet_pointcharges", _wrap_AtomChargeSet_pointcharges, METH_VARARGS },
	 { "AtomChargeSet___mul____L113", _wrap_AtomChargeSet___mul____L113, METH_VARARGS },
	 { "AtomChargeSet___mul____L114", _wrap_AtomChargeSet___mul____L114, METH_VARARGS },
	 { "AtomChargeSet_name_set", _wrap_AtomSet_name_set, METH_VARARGS },
	 { "AtomChargeSet_name_get", _wrap_AtomSet_name_get, METH_VARARGS },
	 { "new_ManyPointCharge", _wrap_new_ManyPointCharge, METH_VARARGS },
	 { "new_ManyPointCharge__L16", _wrap_new_ManyPointCharge__L16, METH_VARARGS },
	 { "new_ManyPointCharge__L17", _wrap_new_ManyPointCharge__L17, METH_VARARGS },
	 { "delete_ManyPointCharge", _wrap_delete_ManyPointCharge, METH_VARARGS },
	 { "ManyPointCharge_total_charge", _wrap_ManyPointCharge_total_charge, METH_VARARGS },
	 { "ManyPointCharge_has_charges", _wrap_ManyPointCharge_has_charges, METH_VARARGS },
	 { "ManyPointCharge_vacuum_coulomb", _wrap_ManyPointCharge_vacuum_coulomb, METH_VARARGS },
	 { "ManyPointCharge_number_points", _wrap_ManyPointCharge_number_points, METH_VARARGS },
	 { "ManyPointCharge___mul__", _wrap_ManyPointCharge___mul__, METH_VARARGS },
	 { "ManyPointCharge___rmul__", _wrap_ManyPointCharge___rmul__, METH_VARARGS },
	 { "ManyPointCharge___div__", _wrap_ManyPointCharge___div__, METH_VARARGS },
	 { "ManyPointCharge___add__", _wrap_ManyPointCharge___add__, METH_VARARGS },
	 { "ManyPointCharge___add____L55", _wrap_ManyPointCharge___add____L55, METH_VARARGS },
	 { "ManyPointCharge___add____L56", _wrap_ManyPointCharge___add____L56, METH_VARARGS },
	 { "ManyPointCharge_pointcharges", _wrap_ManyPointCharge_pointcharges, METH_VARARGS },
	 { "ManyPointCharge_append", _wrap_ManyPointCharge_append, METH_VARARGS },
	 { "ManyPointCharge___len__", _wrap_ManyPointCharge___len__, METH_VARARGS },
	 { "ManyPointCharge_extend", _wrap_ManyPointCharge_extend, METH_VARARGS },
	 { "ManyPointCharge_count", _wrap_ManyPointCharge_count, METH_VARARGS },
	 { "ManyPointCharge_index", _wrap_ManyPointCharge_index, METH_VARARGS },
	 { "ManyPointCharge_insert", _wrap_ManyPointCharge_insert, METH_VARARGS },
	 { "ManyPointCharge_remove", _wrap_ManyPointCharge_remove, METH_VARARGS },
	 { "ManyPointCharge___getitem__", _wrap_ManyPointCharge___getitem__, METH_VARARGS },
	 { "ManyPointCharge___setitem__", _wrap_ManyPointCharge___setitem__, METH_VARARGS },
	 { "ManyPointCharge___delitem__", _wrap_ManyPointCharge___delitem__, METH_VARARGS },
	 { "ManyPointCharge___mul____L119", _wrap_ManyPointCharge___mul____L119, METH_VARARGS },
	 { "ManyPointCharge___mul____L120", _wrap_ManyPointCharge___mul____L120, METH_VARARGS },
	 { "new_OnePointCharge", _wrap_new_OnePointCharge, METH_VARARGS },
	 { "new_OnePointCharge__L16", _wrap_new_OnePointCharge__L16, METH_VARARGS },
	 { "delete_OnePointCharge", _wrap_delete_OnePointCharge, METH_VARARGS },
	 { "OnePointCharge_vacuum_coulomb", _wrap_OnePointCharge_vacuum_coulomb, METH_VARARGS },
	 { "OnePointCharge_total_charge", _wrap_OnePointCharge_total_charge, METH_VARARGS },
	 { "OnePointCharge_has_charges", _wrap_OnePointCharge_has_charges, METH_VARARGS },
	 { "OnePointCharge_number_points", _wrap_OnePointCharge_number_points, METH_VARARGS },
	 { "OnePointCharge_get_charge", _wrap_OnePointCharge_get_charge, METH_VARARGS },
	 { "OnePointCharge_get_coord", _wrap_OnePointCharge_get_coord, METH_VARARGS },
	 { "OnePointCharge_pointcharge", _wrap_OnePointCharge_pointcharge, METH_VARARGS },
	 { "OnePointCharge___mul__", _wrap_OnePointCharge___mul__, METH_VARARGS },
	 { "OnePointCharge___rmul__", _wrap_OnePointCharge___rmul__, METH_VARARGS },
	 { "OnePointCharge___div__", _wrap_OnePointCharge___div__, METH_VARARGS },
	 { "OnePointCharge___add__", _wrap_OnePointCharge___add__, METH_VARARGS },
	 { "OnePointCharge___add____L66", _wrap_OnePointCharge___add____L66, METH_VARARGS },
	 { "OnePointCharge___add____L69", _wrap_OnePointCharge___add____L69, METH_VARARGS },
	 { "OnePointCharge___mul____L123", _wrap_OnePointCharge___mul____L123, METH_VARARGS },
	 { "OnePointCharge___mul____L124", _wrap_OnePointCharge___mul____L124, METH_VARARGS },
	 { "new_UniformDielectric", _wrap_new_UniformDielectric, METH_VARARGS },
	 { "delete_UniformDielectric", _wrap_delete_UniformDielectric, METH_VARARGS },
	 { "UniformDielectric_epsext_value", _wrap_UniformDielectric_epsext_value, METH_VARARGS },
	 { "new_DielectricSphere", _wrap_new_DielectricSphere, METH_VARARGS },
	 { "delete_DielectricSphere", _wrap_delete_DielectricSphere, METH_VARARGS },
	 { "DielectricSphere_epsext_value", _wrap_DielectricSphere_epsext_value, METH_VARARGS },
	 { "DielectricSphere_radius_value", _wrap_DielectricSphere_radius_value, METH_VARARGS },
	 { "DielectricSphere_epsin_value", _wrap_DielectricSphere_epsin_value, METH_VARARGS },
	 { "DielectricSphere_get_center", _wrap_DielectricSphere_get_center, METH_VARARGS },
	 { "new_DielectricSlab", _wrap_new_DielectricSlab, METH_VARARGS },
	 { "delete_DielectricSlab", _wrap_delete_DielectricSlab, METH_VARARGS },
	 { "DielectricSlab_epsslab_value", _wrap_DielectricSlab_epsslab_value, METH_VARARGS },
	 { "DielectricSlab_epsext_value", _wrap_DielectricSlab_epsext_value, METH_VARARGS },
	 { "DielectricSlab_zupper_value", _wrap_DielectricSlab_zupper_value, METH_VARARGS },
	 { "DielectricSlab_zlower_value", _wrap_DielectricSlab_zlower_value, METH_VARARGS },
	 { "new_TwoValueDielectricByAtoms", _wrap_new_TwoValueDielectricByAtoms, METH_VARARGS },
	 { "new_TwoValueDielectricByAtoms__L17", _wrap_new_TwoValueDielectricByAtoms__L17, METH_VARARGS },
	 { "new_TwoValueDielectricByAtoms__L18", _wrap_new_TwoValueDielectricByAtoms__L18, METH_VARARGS },
	 { "new_TwoValueDielectricByAtoms__L19", _wrap_new_TwoValueDielectricByAtoms__L19, METH_VARARGS },
	 { "delete_TwoValueDielectricByAtoms", _wrap_delete_TwoValueDielectricByAtoms, METH_VARARGS },
	 { "TwoValueDielectricByAtoms_epsext_value", _wrap_TwoValueDielectricByAtoms_epsext_value, METH_VARARGS },
	 { "TwoValueDielectricByAtoms_epsin_value", _wrap_TwoValueDielectricByAtoms_epsin_value, METH_VARARGS },
	 { "new_ThreeValueDielectricByAtoms", _wrap_new_ThreeValueDielectricByAtoms, METH_VARARGS },
	 { "new_ThreeValueDielectricByAtoms__L29", _wrap_new_ThreeValueDielectricByAtoms__L29, METH_VARARGS },
	 { "new_ThreeValueDielectricByAtoms__L30", _wrap_new_ThreeValueDielectricByAtoms__L30, METH_VARARGS },
	 { "new_ThreeValueDielectricByAtoms__L31", _wrap_new_ThreeValueDielectricByAtoms__L31, METH_VARARGS },
	 { "delete_ThreeValueDielectricByAtoms", _wrap_delete_ThreeValueDielectricByAtoms, METH_VARARGS },
	 { "ThreeValueDielectricByAtoms_epsext_value", _wrap_ThreeValueDielectricByAtoms_epsext_value, METH_VARARGS },
	 { "new_TwoValueDielMembAtoms", _wrap_new_TwoValueDielMembAtoms, METH_VARARGS },
	 { "new_TwoValueDielMembAtoms__L16", _wrap_new_TwoValueDielMembAtoms__L16, METH_VARARGS },
	 { "delete_TwoValueDielMembAtoms", _wrap_delete_TwoValueDielMembAtoms, METH_VARARGS },
	 { "TwoValueDielMembAtoms_epsext_value", _wrap_TwoValueDielMembAtoms_epsext_value, METH_VARARGS },
	 { "new_ThreeValueDielMembAtomsAtoms", _wrap_new_ThreeValueDielMembAtomsAtoms, METH_VARARGS },
	 { "delete_ThreeValueDielMembAtomsAtoms", _wrap_delete_ThreeValueDielMembAtomsAtoms, METH_VARARGS },
	 { "ThreeValueDielMembAtomsAtoms_epsext_value", _wrap_ThreeValueDielMembAtomsAtoms_epsext_value, METH_VARARGS },
	 { "new_UniformElectrolyte", _wrap_new_UniformElectrolyte, METH_VARARGS },
	 { "delete_UniformElectrolyte", _wrap_delete_UniformElectrolyte, METH_VARARGS },
	 { "UniformElectrolyte_ionic_strength", _wrap_UniformElectrolyte_ionic_strength, METH_VARARGS },
	 { "new_ElySphere", _wrap_new_ElySphere, METH_VARARGS },
	 { "delete_ElySphere", _wrap_delete_ElySphere, METH_VARARGS },
	 { "ElySphere_ionic_strength", _wrap_ElySphere_ionic_strength, METH_VARARGS },
	 { "ElySphere_get_radius", _wrap_ElySphere_get_radius, METH_VARARGS },
	 { "ElySphere_get_center", _wrap_ElySphere_get_center, METH_VARARGS },
	 { "new_ElectrolyteByAtoms", _wrap_new_ElectrolyteByAtoms, METH_VARARGS },
	 { "new_ElectrolyteByAtoms__L18", _wrap_new_ElectrolyteByAtoms__L18, METH_VARARGS },
	 { "delete_ElectrolyteByAtoms", _wrap_delete_ElectrolyteByAtoms, METH_VARARGS },
	 { "ElectrolyteByAtoms_ionic_strength", _wrap_ElectrolyteByAtoms_ionic_strength, METH_VARARGS },
	 { "new_ElectrolyteByAtoms__L31", _wrap_new_ElectrolyteByAtoms__L31, METH_VARARGS },
	 { "new_ElectrolyteByAtoms__L32", _wrap_new_ElectrolyteByAtoms__L32, METH_VARARGS },
	 { "new_SolvAccVol", _wrap_new_SolvAccVol, METH_VARARGS },
	 { "new_SolvAccVol__L16", _wrap_new_SolvAccVol__L16, METH_VARARGS },
	 { "new_SolvAccVol__deepcopy", _wrap_new_SolvAccVol__deepcopy, METH_VARARGS },
	 { "new_SolvAccVol__L17", _wrap_new_SolvAccVol__L17, METH_VARARGS },
	 { "delete_SolvAccVol", _wrap_delete_SolvAccVol, METH_VARARGS },
	 { "SolvAccVol_anal_calc", _wrap_SolvAccVol_anal_calc, METH_VARARGS },
	 { "SolvAccVol_accessible", _wrap_SolvAccVol_accessible, METH_VARARGS },
	 { "SolvAccVol_check_is_calculated", _wrap_SolvAccVol_check_is_calculated, METH_VARARGS },
	 { "SolvAccVol_write_top_in_binary", _wrap_SolvAccVol_write_top_in_binary, METH_VARARGS },
	 { "SolvAccVol_write_top_in_ascii", _wrap_SolvAccVol_write_top_in_ascii, METH_VARARGS },
	 { "SolvAccVol_read_top_in_binary", _wrap_SolvAccVol_read_top_in_binary, METH_VARARGS },
	 { "SolvAccVol_read_top_in_ascii", _wrap_SolvAccVol_read_top_in_ascii, METH_VARARGS },
	 { "SolvAccVol_write_top_in_binary__L30", _wrap_SolvAccVol_write_top_in_binary__L30, METH_VARARGS },
	 { "SolvAccVol_write_top_in_ascii__L31", _wrap_SolvAccVol_write_top_in_ascii__L31, METH_VARARGS },
	 { "SolvAccVol_read_top_in_binary__L32", _wrap_SolvAccVol_read_top_in_binary__L32, METH_VARARGS },
	 { "SolvAccVol_read_top_in_ascii__L33", _wrap_SolvAccVol_read_top_in_ascii__L33, METH_VARARGS },
	 { "SolvAccVol_get_cuberep", _wrap_SolvAccVol_get_cuberep, METH_VARARGS },
	 { "SolvAccVol_tag_points", _wrap_SolvAccVol_tag_points, METH_VARARGS },
	 { "new_Poly", _wrap_new_Poly, METH_VARARGS },
	 { "new_Poly__L16", _wrap_new_Poly__L16, METH_VARARGS },
	 { "new_Poly__L17", _wrap_new_Poly__L17, METH_VARARGS },
	 { "new_Poly__L18", _wrap_new_Poly__L18, METH_VARARGS },
	 { "new_Poly__deepcopy", _wrap_new_Poly__deepcopy, METH_VARARGS },
	 { "new_Poly__L19", _wrap_new_Poly__L19, METH_VARARGS },
	 { "Poly_derivative", _wrap_Poly_derivative, METH_VARARGS },
	 { "Poly_degree", _wrap_Poly_degree, METH_VARARGS },
	 { "Poly_size", _wrap_Poly_size, METH_VARARGS },
	 { "Poly_coefficients", _wrap_Poly_coefficients, METH_VARARGS },
	 { "Poly_set_varstring", _wrap_Poly_set_varstring, METH_VARARGS },
	 { "Poly_varstring", _wrap_Poly_varstring, METH_VARARGS },
	 { "Poly_output", _wrap_Poly_output, METH_VARARGS },
	 { "Poly_write", _wrap_Poly_write, METH_VARARGS },
	 { "Poly___call__", _wrap_Poly___call__, METH_VARARGS },
	 { "Poly___neg__", _wrap_Poly___neg__, METH_VARARGS },
	 { "Poly___add__", _wrap_Poly___add__, METH_VARARGS },
	 { "Poly___sub__", _wrap_Poly___sub__, METH_VARARGS },
	 { "Poly___mul__", _wrap_Poly___mul__, METH_VARARGS },
	 { "Poly___mul____L82", _wrap_Poly___mul____L82, METH_VARARGS },
	 { "Poly___div__", _wrap_Poly___div__, METH_VARARGS },
	 { "Poly___eq__", _wrap_Poly___eq__, METH_VARARGS },
	 { "Poly___rmul__", _wrap_Poly___rmul__, METH_VARARGS },
	 { "Poly___pos__", _wrap_Poly___pos__, METH_VARARGS },
	 { "new_Legendre", _wrap_new_Legendre, METH_VARARGS },
	 { "new_Legendre__L41", _wrap_new_Legendre__L41, METH_VARARGS },
	 { "new_Legendre__deepcopy", _wrap_new_Legendre__deepcopy, METH_VARARGS },
	 { "new_Legendre__L42", _wrap_new_Legendre__L42, METH_VARARGS },
	 { "Legendre_ell", _wrap_Legendre_ell, METH_VARARGS },
	 { "new_CubeLatSpec", _wrap_new_CubeLatSpec, METH_VARARGS },
	 { "new_CubeLatSpec__deepcopy", _wrap_new_CubeLatSpec__deepcopy, METH_VARARGS },
	 { "new_CubeLatSpec__L17", _wrap_new_CubeLatSpec__L17, METH_VARARGS },
	 { "delete_CubeLatSpec", _wrap_delete_CubeLatSpec, METH_VARARGS },
	 { "CubeLatSpec_resolve", _wrap_CubeLatSpec_resolve, METH_VARARGS },
	 { "CubeLatSpec_get_grid_dim", _wrap_CubeLatSpec_get_grid_dim, METH_VARARGS },
	 { "CubeLatSpec_get_spacing", _wrap_CubeLatSpec_get_spacing, METH_VARARGS },
	 { "CubeLatSpec_is_resolved", _wrap_CubeLatSpec_is_resolved, METH_VARARGS },
	 { "new_CubeLatSpec__L33", _wrap_new_CubeLatSpec__L33, METH_VARARGS },
	 { "CubeLatSpec_get_centering_style", _wrap_CubeLatSpec_get_centering_style, METH_VARARGS },
	 { "CubeLatSpec_write", _wrap_CubeLatSpec_write, METH_VARARGS },
	 { "CubeLatSpec_get_center", _wrap_CubeLatSpec_get_center, METH_VARARGS },
	 { "CubeLatSpec___eq__", _wrap_CubeLatSpec___eq__, METH_VARARGS },
	 { "CubeLatSpec___lt__", _wrap_CubeLatSpec___lt__, METH_VARARGS },
	 { "CubeLatSpec___gt__", _wrap_CubeLatSpec___gt__, METH_VARARGS },
	 { "CubeLatSpec___cmp__", _wrap_CubeLatSpec___cmp__, METH_VARARGS },
	 { "new_PhysCond", _wrap_new_PhysCond, METH_VARARGS },
	 { "PhysCond_epsext_set", _wrap_PhysCond_epsext_set, METH_VARARGS },
	 { "PhysCond_epsext_get", _wrap_PhysCond_epsext_get, METH_VARARGS },
	 { "PhysCond_solrad_set", _wrap_PhysCond_solrad_set, METH_VARARGS },
	 { "PhysCond_solrad_get", _wrap_PhysCond_solrad_get, METH_VARARGS },
	 { "PhysCond_sterln_set", _wrap_PhysCond_sterln_set, METH_VARARGS },
	 { "PhysCond_sterln_get", _wrap_PhysCond_sterln_get, METH_VARARGS },
	 { "PhysCond_ionicstr_set", _wrap_PhysCond_ionicstr_set, METH_VARARGS },
	 { "PhysCond_ionicstr_get", _wrap_PhysCond_ionicstr_get, METH_VARARGS },
	 { "PhysCond_T_set", _wrap_PhysCond_T_set, METH_VARARGS },
	 { "PhysCond_T_get", _wrap_PhysCond_T_get, METH_VARARGS },
	 { "PhysCond_kBolt_set", _wrap_PhysCond_kBolt_set, METH_VARARGS },
	 { "PhysCond_kBolt_get", _wrap_PhysCond_kBolt_get, METH_VARARGS },
	 { "PhysCond_conconv_set", _wrap_PhysCond_conconv_set, METH_VARARGS },
	 { "PhysCond_conconv_get", _wrap_PhysCond_conconv_get, METH_VARARGS },
	 { "PhysCond_econv_set", _wrap_PhysCond_econv_set, METH_VARARGS },
	 { "PhysCond_econv_get", _wrap_PhysCond_econv_get, METH_VARARGS },
	 { "PhysCond_bohr_radius_set", _wrap_PhysCond_bohr_radius_set, METH_VARARGS },
	 { "PhysCond_bohr_radius_get", _wrap_PhysCond_bohr_radius_get, METH_VARARGS },
	 { "PhysCond_proton_charge_set", _wrap_PhysCond_proton_charge_set, METH_VARARGS },
	 { "PhysCond_proton_charge_get", _wrap_PhysCond_proton_charge_get, METH_VARARGS },
	 { "PhysCond_hueck_set", _wrap_PhysCond_hueck_set, METH_VARARGS },
	 { "PhysCond_hueck_get", _wrap_PhysCond_hueck_get, METH_VARARGS },
	 { "PhysCond_kappasq_set", _wrap_PhysCond_kappasq_set, METH_VARARGS },
	 { "PhysCond_kappasq_get", _wrap_PhysCond_kappasq_get, METH_VARARGS },
	 { "PhysCond_ln10kT_set", _wrap_PhysCond_ln10kT_set, METH_VARARGS },
	 { "PhysCond_ln10kT_get", _wrap_PhysCond_ln10kT_get, METH_VARARGS },
	 { "PhysCond_write", _wrap_PhysCond_write, METH_VARARGS },
	 { "new_Blab", _wrap_new_Blab, METH_VARARGS },
	 { "Blab_get_level", _wrap_Blab_get_level, METH_VARARGS },
	 { "Blab_set_level", _wrap_Blab_set_level, METH_VARARGS },
	 { "Blab_level_set", _wrap_Blab_level_set, METH_VARARGS },
	 { "Blab_level_get", _wrap_Blab_level_get, METH_VARARGS },
	 { "new_FinDiffMethod", _wrap_new_FinDiffMethod, METH_VARARGS },
	 { "new_FinDiffMethod__deepcopy", _wrap_new_FinDiffMethod__deepcopy, METH_VARARGS },
	 { "new_FinDiffMethod__L16", _wrap_new_FinDiffMethod__L16, METH_VARARGS },
	 { "delete_FinDiffMethod", _wrap_delete_FinDiffMethod, METH_VARARGS },
	 { "FinDiffMethod_read", _wrap_FinDiffMethod_read, METH_VARARGS },
	 { "FinDiffMethod_add_level", _wrap_FinDiffMethod_add_level, METH_VARARGS },
	 { "FinDiffMethod_resolve", _wrap_FinDiffMethod_resolve, METH_VARARGS },
	 { "FinDiffMethod_is_resolved", _wrap_FinDiffMethod_is_resolved, METH_VARARGS },
	 { "FinDiffMethod_add_level__L29", _wrap_FinDiffMethod_add_level__L29, METH_VARARGS },
	 { "FinDiffMethod_write", _wrap_FinDiffMethod_write, METH_VARARGS },
	 { "FinDiffMethod_levels", _wrap_FinDiffMethod_levels, METH_VARARGS },
	 { "delete_AnalySphere", _wrap_delete_AnalySphere, METH_VARARGS },
	 { "AnalySphere_solve", _wrap_AnalySphere_solve, METH_VARARGS },
	 { "AnalySphere_value", _wrap_AnalySphere_value, METH_VARARGS },
	 { "AnalySphere_field", _wrap_AnalySphere_field, METH_VARARGS },
	 { "AnalySphere_displacement", _wrap_AnalySphere_displacement, METH_VARARGS },
	 { "AnalySphere_get_rad_diel", _wrap_AnalySphere_get_rad_diel, METH_VARARGS },
	 { "AnalySphere_get_rad_ely", _wrap_AnalySphere_get_rad_ely, METH_VARARGS },
	 { "AnalySphere_get_maxterm", _wrap_AnalySphere_get_maxterm, METH_VARARGS },
	 { "new_AnalySphere", _wrap_new_AnalySphere, METH_VARARGS },
	 { "new_AnalySphere__L33", _wrap_new_AnalySphere__L33, METH_VARARGS },
	 { "AnalySphere___mul__", _wrap_AnalySphere___mul__, METH_VARARGS },
	 { "AnalySphere___mul____L69", _wrap_AnalySphere___mul____L69, METH_VARARGS },
	 { "AnalySphere___rmul__", _wrap_AnalySphere___rmul__, METH_VARARGS },
	 { "AnalySphere___div__", _wrap_AnalySphere___div__, METH_VARARGS },
	 { "delete_AnalySlab", _wrap_delete_AnalySlab, METH_VARARGS },
	 { "AnalySlab_solve", _wrap_AnalySlab_solve, METH_VARARGS },
	 { "AnalySlab_value", _wrap_AnalySlab_value, METH_VARARGS },
	 { "AnalySlab_field", _wrap_AnalySlab_field, METH_VARARGS },
	 { "AnalySlab_displacement", _wrap_AnalySlab_displacement, METH_VARARGS },
	 { "AnalySlab_get_zlower", _wrap_AnalySlab_get_zlower, METH_VARARGS },
	 { "AnalySlab_get_zupper", _wrap_AnalySlab_get_zupper, METH_VARARGS },
	 { "AnalySlab_get_maxterm", _wrap_AnalySlab_get_maxterm, METH_VARARGS },
	 { "new_AnalySlab", _wrap_new_AnalySlab, METH_VARARGS },
	 { "new_AnalySlab__L35", _wrap_new_AnalySlab__L35, METH_VARARGS },
	 { "AnalySlab___mul__", _wrap_AnalySlab___mul__, METH_VARARGS },
	 { "AnalySlab___mul____L71", _wrap_AnalySlab___mul____L71, METH_VARARGS },
	 { "AnalySlab___rmul__", _wrap_AnalySlab___rmul__, METH_VARARGS },
	 { "AnalySlab___div__", _wrap_AnalySlab___div__, METH_VARARGS },
	 { "new_Debye", _wrap_new_Debye, METH_VARARGS },
	 { "delete_Debye", _wrap_delete_Debye, METH_VARARGS },
	 { "Debye_solve", _wrap_Debye_solve, METH_VARARGS },
	 { "Debye_value", _wrap_Debye_value, METH_VARARGS },
	 { "Debye_field", _wrap_Debye_field, METH_VARARGS },
	 { "Debye_displacement", _wrap_Debye_displacement, METH_VARARGS },
	 { "Debye_get_kappa", _wrap_Debye_get_kappa, METH_VARARGS },
	 { "Debye___mul__", _wrap_Debye___mul__, METH_VARARGS },
	 { "Debye___mul____L47", _wrap_Debye___mul____L47, METH_VARARGS },
	 { "Debye___rmul__", _wrap_Debye___rmul__, METH_VARARGS },
	 { "Debye___div__", _wrap_Debye___div__, METH_VARARGS },
	 { "new_FinDiffElstatPot", _wrap_new_FinDiffElstatPot, METH_VARARGS },
	 { "new_FinDiffElstatPot__L17", _wrap_new_FinDiffElstatPot__L17, METH_VARARGS },
	 { "delete_FinDiffElstatPot", _wrap_delete_FinDiffElstatPot, METH_VARARGS },
	 { "FinDiffElstatPot_solve", _wrap_FinDiffElstatPot_solve, METH_VARARGS },
	 { "FinDiffElstatPot_solve_using_coarse_init", _wrap_FinDiffElstatPot_solve_using_coarse_init, METH_VARARGS },
	 { "FinDiffElstatPot_write_coarse_field", _wrap_FinDiffElstatPot_write_coarse_field, METH_VARARGS },
	 { "FinDiffElstatPot_coarse_lattice_spec", _wrap_FinDiffElstatPot_coarse_lattice_spec, METH_VARARGS },
	 { "FinDiffElstatPot_value", _wrap_FinDiffElstatPot_value, METH_VARARGS },
	 { "FinDiffElstatPot_field", _wrap_FinDiffElstatPot_field, METH_VARARGS },
	 { "FinDiffElstatPot_displacement", _wrap_FinDiffElstatPot_displacement, METH_VARARGS },
	 { "FinDiffElstatPot_get_cuberep", _wrap_FinDiffElstatPot_get_cuberep, METH_VARARGS },
	 { "FinDiffElstatPot___mul__", _wrap_FinDiffElstatPot___mul__, METH_VARARGS },
	 { "FinDiffElstatPot___mul____L97", _wrap_FinDiffElstatPot___mul____L97, METH_VARARGS },
	 { "FinDiffElstatPot___rmul__", _wrap_FinDiffElstatPot___rmul__, METH_VARARGS },
	 { "FinDiffElstatPot___div__", _wrap_FinDiffElstatPot___div__, METH_VARARGS },
	 { "new_ElstatPotCombination", _wrap_new_ElstatPotCombination, METH_VARARGS },
	 { "new_ElstatPotCombination__deepcopy", _wrap_new_ElstatPotCombination__deepcopy, METH_VARARGS },
	 { "new_ElstatPotCombination__L16", _wrap_new_ElstatPotCombination__L16, METH_VARARGS },
	 { "ElstatPotCombination_solve", _wrap_ElstatPotCombination_solve, METH_VARARGS },
	 { "ElstatPotCombination_value", _wrap_ElstatPotCombination_value, METH_VARARGS },
	 { "ElstatPotCombination_field", _wrap_ElstatPotCombination_field, METH_VARARGS },
	 { "ElstatPotCombination_displacement", _wrap_ElstatPotCombination_displacement, METH_VARARGS },
	 { "delete_ElstatPotCombination", _wrap_delete_ElstatPotCombination, METH_VARARGS },
	 { "ElstatPotCombination___iadd__", _wrap_ElstatPotCombination___iadd__, METH_VARARGS },
	 { "ElstatPotCombination___iadd____L90", _wrap_ElstatPotCombination___iadd____L90, METH_VARARGS },
	 { "ElstatPotCombination___imul__", _wrap_ElstatPotCombination___imul__, METH_VARARGS },
	 { "ElstatPotCombination___idiv__", _wrap_ElstatPotCombination___idiv__, METH_VARARGS },
	 { "ElstatPotCombination___add__", _wrap_ElstatPotCombination___add__, METH_VARARGS },
	 { "ElstatPotCombination___add____L98", _wrap_ElstatPotCombination___add____L98, METH_VARARGS },
	 { "ElstatPotCombination___mul__", _wrap_ElstatPotCombination___mul__, METH_VARARGS },
	 { "ElstatPotCombination___rmul__", _wrap_ElstatPotCombination___rmul__, METH_VARARGS },
	 { "ElstatPotCombination___div__", _wrap_ElstatPotCombination___div__, METH_VARARGS },
	 { "ElstatPotCombination___mul____L106", _wrap_ElstatPotCombination___mul____L106, METH_VARARGS },
	 { "new_Moments", _wrap_new_Moments, METH_VARARGS },
	 { "Moments_ellmax", _wrap_Moments_ellmax, METH_VARARGS },
	 { "Moments_get_imag", _wrap_Moments_get_imag, METH_VARARGS },
	 { "Moments_set", _wrap_Moments_set, METH_VARARGS },
	 { "Moments___neg__", _wrap_Moments___neg__, METH_VARARGS },
	 { "Moments___add__", _wrap_Moments___add__, METH_VARARGS },
	 { "Moments___sub__", _wrap_Moments___sub__, METH_VARARGS },
	 { "Moments___mul__", _wrap_Moments___mul__, METH_VARARGS },
	 { "Moments___rmul__", _wrap_Moments___rmul__, METH_VARARGS },
	 { "Moments___pos__", _wrap_Moments___pos__, METH_VARARGS },
	 { NULL, NULL }
};

#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_AtomChargeSetTo_p_AtomSet(void *x) {
    return (void *)((AtomSet *) ((AtomChargeSet *) x));
}
static void *_p_FinDiffElstatPotTo_p_ElstatPot_lett(void *x) {
    return (void *)((ElstatPot_lett *) ((FinDiffElstatPot *) x));
}
static void *_p_AnalyticEPTo_p_ElstatPot_lett(void *x) {
    return (void *)((ElstatPot_lett *) ((AnalyticEP *) x));
}
static void *_p_AnalySlabTo_p_ElstatPot_lett(void *x) {
    return (void *)((ElstatPot_lett *) ((AnalySlab *) x));
}
static void *_p_AnalySphereTo_p_ElstatPot_lett(void *x) {
    return (void *)((ElstatPot_lett *) ((AnalySphere *) x));
}
static void *_p_DebyeTo_p_ElstatPot_lett(void *x) {
    return (void *)((ElstatPot_lett *) ((Debye *) x));
}
static void *_p_LegendreTo_p_Poly(void *x) {
    return (void *)((Poly *) ((Legendre *) x));
}
static void *_p_ManyPointChargeTo_p_ChargeDist_lett(void *x) {
    return (void *)((ChargeDist_lett *) ((ManyPointCharge *) x));
}
static void *_p_OnePointChargeTo_p_ChargeDist_lett(void *x) {
    return (void *)((ChargeDist_lett *) ((OnePointCharge *) x));
}
static void *_p_AtomChargeSetTo_p_ChargeDist_lett(void *x) {
    return (void *)((ChargeDist_lett *) ((AtomChargeSet *) x));
}
static void *_p_UniformDielectricTo_p_DielectricEnvironment_lett(void *x) {
    return (void *)((DielectricEnvironment_lett *) ((UniformDielectric *) x));
}
static void *_p_DielectricSlabTo_p_DielectricEnvironment_lett(void *x) {
    return (void *)((DielectricEnvironment_lett *) ((DielectricSlab *) x));
}
static void *_p_TwoValueDielectricByAtomsTo_p_DielectricEnvironment_lett(void *x) {
    return (void *)((DielectricEnvironment_lett *) ((TwoValueDielectricByAtoms *) x));
}
static void *_p_ThreeValueDielectricByAtomsTo_p_DielectricEnvironment_lett(void *x) {
    return (void *)((DielectricEnvironment_lett *) ((ThreeValueDielectricByAtoms *) x));
}
static void *_p_ThreeValueDielMembAtomsAtomsTo_p_DielectricEnvironment_lett(void *x) {
    return (void *)((DielectricEnvironment_lett *) ((ThreeValueDielMembAtomsAtoms *) x));
}
static void *_p_TwoValueDielMembAtomsTo_p_DielectricEnvironment_lett(void *x) {
    return (void *)((DielectricEnvironment_lett *) ((TwoValueDielMembAtoms *) x));
}
static void *_p_DielectricSphereTo_p_DielectricEnvironment_lett(void *x) {
    return (void *)((DielectricEnvironment_lett *) ((DielectricSphere *) x));
}
static void *_p_UniformElectrolyteTo_p_ElectrolyteEnvironment_lett(void *x) {
    return (void *)((ElectrolyteEnvironment_lett *) ((UniformElectrolyte *) x));
}
static void *_p_ElectrolyteByAtomsTo_p_ElectrolyteEnvironment_lett(void *x) {
    return (void *)((ElectrolyteEnvironment_lett *) ((ElectrolyteByAtoms *) x));
}
static void *_p_ElySphereTo_p_ElectrolyteEnvironment_lett(void *x) {
    return (void *)((ElectrolyteEnvironment_lett *) ((ElySphere *) x));
}
static swig_type_info _swigt__p_ElstatPotCombination[] = {{"_p_ElstatPotCombination", 0, "ElstatPotCombination *"},{"_p_ElstatPotCombination"},{0}};
static swig_type_info _swigt__p_Atom[] = {{"_p_Atom", 0, "Atom *"},{"_p_Atom"},{0}};
static swig_type_info _swigt__p_Legendre[] = {{"_p_Legendre", 0, "Legendre *"},{"_p_Legendre"},{0}};
static swig_type_info _swigt__p_AtomSet[] = {{"_p_AtomSet", 0, "AtomSet *"},{"_p_AtomChargeSet", _p_AtomChargeSetTo_p_AtomSet},{"_p_AtomSet"},{0}};
static swig_type_info _swigt__p_FinDiffMethod[] = {{"_p_FinDiffMethod", 0, "FinDiffMethod *"},{"_p_FinDiffMethod"},{0}};
static swig_type_info _swigt__p_vector_double[] = {{"_p_vector_double", 0, "vector_double *"},{"_p_vector_double"},{0}};
static swig_type_info _swigt__p_ElectrolyteByAtoms[] = {{"_p_ElectrolyteByAtoms", 0, "ElectrolyteByAtoms *"},{"_p_ElectrolyteByAtoms"},{0}};
static swig_type_info _swigt__p_ThreeValueDielectricByAtoms[] = {{"_p_ThreeValueDielectricByAtoms", 0, "ThreeValueDielectricByAtoms *"},{"_p_ThreeValueDielectricByAtoms"},{0}};
static swig_type_info _swigt__p_TwoValueDielectricByAtoms[] = {{"_p_TwoValueDielectricByAtoms", 0, "TwoValueDielectricByAtoms *"},{"_p_TwoValueDielectricByAtoms"},{0}};
static swig_type_info _swigt__p_ElstatPot_lett[] = {{"_p_ElstatPot_lett", 0, "ElstatPot_lett *"},{"_p_ElstatPot_lett"},{"_p_FinDiffElstatPot", _p_FinDiffElstatPotTo_p_ElstatPot_lett},{"_p_AnalyticEP", _p_AnalyticEPTo_p_ElstatPot_lett},{"_p_AnalySlab", _p_AnalySlabTo_p_ElstatPot_lett},{"_p_Debye", _p_DebyeTo_p_ElstatPot_lett},{"_p_AnalySphere", _p_AnalySphereTo_p_ElstatPot_lett},{0}};
static swig_type_info _swigt__p_ChargeDist_lett[] = {{"_p_ChargeDist_lett", 0, "ChargeDist_lett *"},{"_p_ManyPointCharge", _p_ManyPointChargeTo_p_ChargeDist_lett},{"_p_OnePointCharge", _p_OnePointChargeTo_p_ChargeDist_lett},{"_p_ChargeDist_lett"},{"_p_AtomChargeSet", _p_AtomChargeSetTo_p_ChargeDist_lett},{0}};
static swig_type_info _swigt__p_SolvAccVol[] = {{"_p_SolvAccVol", 0, "SolvAccVol *"},{"_p_SolvAccVol"},{0}};
static swig_type_info _swigt__p_string[] = {{"_p_string", 0, "string *"},{"_p_string"},{0}};
static swig_type_info _swigt__p_OnePointCharge[] = {{"_p_OnePointCharge", 0, "OnePointCharge *"},{"_p_OnePointCharge"},{0}};
static swig_type_info _swigt__p_ManyPointCharge[] = {{"_p_ManyPointCharge", 0, "ManyPointCharge *"},{"_p_ManyPointCharge"},{0}};
static swig_type_info _swigt__p_PointCharge[] = {{"_p_PointCharge", 0, "PointCharge *"},{"_p_PointCharge"},{0}};
static swig_type_info _swigt__p_AnalySlab[] = {{"_p_AnalySlab", 0, "AnalySlab *"},{"_p_AnalySlab"},{0}};
static swig_type_info _swigt__p_TwoValueDielMembAtoms[] = {{"_p_TwoValueDielMembAtoms", 0, "TwoValueDielMembAtoms *"},{"_p_TwoValueDielMembAtoms"},{0}};
static swig_type_info _swigt__p_DielectricSlab[] = {{"_p_DielectricSlab", 0, "DielectricSlab *"},{"_p_DielectricSlab"},{0}};
static swig_type_info _swigt__p_CubeLatSpec[] = {{"_p_CubeLatSpec", 0, "CubeLatSpec *"},{"_p_CubeLatSpec"},{0}};
static swig_type_info _swigt__p_ElstatPot[] = {{"_p_ElstatPot", 0, "ElstatPot *"},{"_p_ElstatPot"},{0}};
static swig_type_info _swigt__p_FinDiffElstatPot[] = {{"_p_FinDiffElstatPot", 0, "FinDiffElstatPot *"},{"_p_FinDiffElstatPot"},{0}};
static swig_type_info _swigt__p_ElySphere[] = {{"_p_ElySphere", 0, "ElySphere *"},{"_p_ElySphere"},{0}};
static swig_type_info _swigt__p_DielectricSphere[] = {{"_p_DielectricSphere", 0, "DielectricSphere *"},{"_p_DielectricSphere"},{0}};
static swig_type_info _swigt__p_DielectricEnvironment_lett[] = {{"_p_DielectricEnvironment_lett", 0, "DielectricEnvironment_lett *"},{"_p_DielectricEnvironment_lett"},{"_p_UniformDielectric", _p_UniformDielectricTo_p_DielectricEnvironment_lett},{"_p_DielectricSlab", _p_DielectricSlabTo_p_DielectricEnvironment_lett},{"_p_TwoValueDielectricByAtoms", _p_TwoValueDielectricByAtomsTo_p_DielectricEnvironment_lett},{"_p_ThreeValueDielectricByAtoms", _p_ThreeValueDielectricByAtomsTo_p_DielectricEnvironment_lett},{"_p_ThreeValueDielMembAtomsAtoms", _p_ThreeValueDielMembAtomsAtomsTo_p_DielectricEnvironment_lett},{"_p_TwoValueDielMembAtoms", _p_TwoValueDielMembAtomsTo_p_DielectricEnvironment_lett},{"_p_DielectricSphere", _p_DielectricSphereTo_p_DielectricEnvironment_lett},{0}};
static swig_type_info _swigt__p_ElectrolyteEnvironment_lett[] = {{"_p_ElectrolyteEnvironment_lett", 0, "ElectrolyteEnvironment_lett *"},{"_p_ElectrolyteEnvironment_lett"},{"_p_UniformElectrolyte", _p_UniformElectrolyteTo_p_ElectrolyteEnvironment_lett},{"_p_ElectrolyteByAtoms", _p_ElectrolyteByAtomsTo_p_ElectrolyteEnvironment_lett},{"_p_ElySphere", _p_ElySphereTo_p_ElectrolyteEnvironment_lett},{0}};
static swig_type_info _swigt__p_ostream[] = {{"_p_ostream", 0, "ostream *"},{"_p_ostream"},{0}};
static swig_type_info _swigt__p_AnalySphere[] = {{"_p_AnalySphere", 0, "AnalySphere *"},{"_p_AnalySphere"},{0}};
static swig_type_info _swigt__p_ThreeValueDielMembAtomsAtoms[] = {{"_p_ThreeValueDielMembAtomsAtoms", 0, "ThreeValueDielMembAtomsAtoms *"},{"_p_ThreeValueDielMembAtomsAtoms"},{0}};
static swig_type_info _swigt__p_Poly[] = {{"_p_Poly", 0, "Poly *"},{"_p_Poly"},{"_p_Legendre", _p_LegendreTo_p_Poly},{0}};
static swig_type_info _swigt__p_Debye[] = {{"_p_Debye", 0, "Debye *"},{"_p_Debye"},{0}};
static swig_type_info _swigt__p_Coord[] = {{"_p_Coord", 0, "Coord *"},{"_p_Coord"},{0}};
static swig_type_info _swigt__p_Moments[] = {{"_p_Moments", 0, "Moments *"},{"_p_Moments"},{0}};
static swig_type_info _swigt__p_PhysCond[] = {{"_p_PhysCond", 0, "PhysCond *"},{"_p_PhysCond"},{0}};
static swig_type_info _swigt__p_float[] = {{"_p_float", 0, "float *"},{"_p_float"},{0}};
static swig_type_info _swigt__p_AtomID[] = {{"_p_AtomID", 0, "AtomID *"},{"_p_AtomID"},{0}};
static swig_type_info _swigt__p_UniformDielectric[] = {{"_p_UniformDielectric", 0, "UniformDielectric *"},{"_p_UniformDielectric"},{0}};
static swig_type_info _swigt__p_Blab[] = {{"_p_Blab", 0, "Blab *"},{"_p_Blab"},{0}};
static swig_type_info _swigt__p_AtomChargeSet[] = {{"_p_AtomChargeSet", 0, "AtomChargeSet *"},{"_p_AtomChargeSet"},{0}};
static swig_type_info _swigt__p_UniformElectrolyte[] = {{"_p_UniformElectrolyte", 0, "UniformElectrolyte *"},{"_p_UniformElectrolyte"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_ElstatPotCombination, 
_swigt__p_Atom, 
_swigt__p_Legendre, 
_swigt__p_AtomSet, 
_swigt__p_FinDiffMethod, 
_swigt__p_vector_double, 
_swigt__p_ElectrolyteByAtoms, 
_swigt__p_ThreeValueDielectricByAtoms, 
_swigt__p_TwoValueDielectricByAtoms, 
_swigt__p_ElstatPot_lett, 
_swigt__p_ChargeDist_lett, 
_swigt__p_SolvAccVol, 
_swigt__p_string, 
_swigt__p_OnePointCharge, 
_swigt__p_ManyPointCharge, 
_swigt__p_PointCharge, 
_swigt__p_AnalySlab, 
_swigt__p_TwoValueDielMembAtoms, 
_swigt__p_DielectricSlab, 
_swigt__p_CubeLatSpec, 
_swigt__p_ElstatPot, 
_swigt__p_FinDiffElstatPot, 
_swigt__p_ElySphere, 
_swigt__p_DielectricSphere, 
_swigt__p_DielectricEnvironment_lett, 
_swigt__p_ElectrolyteEnvironment_lett, 
_swigt__p_ostream, 
_swigt__p_AnalySphere, 
_swigt__p_ThreeValueDielMembAtomsAtoms, 
_swigt__p_Poly, 
_swigt__p_Debye, 
_swigt__p_Coord, 
_swigt__p_Moments, 
_swigt__p_PhysCond, 
_swigt__p_float, 
_swigt__p_AtomID, 
_swigt__p_UniformDielectric, 
_swigt__p_Blab, 
_swigt__p_AtomChargeSet, 
_swigt__p_UniformElectrolyte, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
    { SWIG_PY_INT,     "AccTag_enum_interior", (long) AccTag_enum::interior, 0, 0, 0},
    { SWIG_PY_INT,     "AccTag_enum_exterior", (long) AccTag_enum::exterior, 0, 0, 0},
    { SWIG_PY_INT,     "AccTag_enum_undecided", (long) AccTag_enum::undecided, 0, 0, 0},
    { SWIG_PY_INT,     "AccTag_enum_in_tube", (long) AccTag_enum::in_tube, 0, 0, 0},
    { SWIG_PY_INT,     "CenteringStyle_enum_ON_ORIGIN", (long) CenteringStyle_enum::ON_ORIGIN, 0, 0, 0},
    { SWIG_PY_INT,     "CenteringStyle_enum_ON_CENT_OF_INTR", (long) CenteringStyle_enum::ON_CENT_OF_INTR, 0, 0, 0},
    { SWIG_PY_INT,     "CenteringStyle_enum_ON_GEOM_CENT", (long) CenteringStyle_enum::ON_GEOM_CENT, 0, 0, 0},
    { SWIG_PY_INT,     "CenteringStyle_enum_SPECIFIC", (long) CenteringStyle_enum::SPECIFIC, 0, 0, 0},
{0}};

static PyObject *SWIG_globals;
#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT(void) initMEADc(void) {
    PyObject *m, *d;
    int i;
    SWIG_globals = SWIG_newvarlink();
    m = Py_InitModule("MEADc", MEADcMethods);
    d = PyModule_GetDict(m);
    for (i = 0; swig_types_initial[i]; i++) {
        swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
    }
    
    ThisModuleName=PyImport_ImportModule(SWIG_module_name);
    import_array();
    SWIG_InstallConstants(d,swig_const_table);
}

