-- Changes for version 2.2.4

* ChainID recognized

The chain ID now can be put into .pqr files and some other files like
.sites, and is considered a distinguishing feature for atoms.  For
detials, search for "chainid" in README.  This removes a long-standing
inconvenience that required renumbering of residues of second chain of
dimers (for example) to convince MEAD that the same atoms were not
being defined twice.

-- Changes for version 2.2.3

* Bug fixes and portability

MEAD continues to move closer to a strict standard C++, so it
can be compiled with newer compilers.  Compilation with older 
non-standards-complient compilers is probably broken.

-- Changes for version 2.2.2

* Upgraded facilities for spherical systems and higher moments

This is in the libraries, and available for programming.  No standard
apps yet use these new facilities.

-- Changes for version 2.2.1

* Expansion of the Python interface.  

More functions included and better correspondence between datatypes
on the C++ and Python sides.  Unfortunatedly this is not yet documented
but the basics can be seen in some example scripts in the swig subdir,
and the whole python interface can be seen in the Mead.py file.

-- Changes for version 2.2.0 --

* Librarification and directory re-organization:

MEAD is now organized to be more conveniently used as originally
intended --- as a class library for developing electrostatics
programs.  Some details of this are given in README.

The "testing" and "examples/data" subdirectories here now are mainly for a
few automated test runs of the MEAD applications.  These are run if
you say "make check".

The files for reproducing published results are in subdirectories
of "examples".

There is now a Python interface.  See README and INSTALLATION.

-- End of news for version 2.2.0 --

-- News for version 1.1.8 --

* Utilities for preparing .pqr files and analyzing results

Some perl scripts that have proven very useful within the Bashford
group for setting up and analysing results from multiflex have been
tidied up and are now included in the ditribution.  See the
subdirectory, utilities.

* A New Configuration and Building Scheme

Configuration and building of MEAD is now managed by the use of a
configure script generated by the GNU autoconf program.  This replaces
the old scheme of using various different Makefiles and
system-specific subdirectories.  It is hoped that this will make MEAD
easier to build and more portable.  See the INSTALLATION file for
instructions.

* Multiflex's summary file output improved

In previous versions it was often necessary to run multiflex with
-blab1 and grep through the output to find certain results, such as
the breakdown of the pKint - pKmod shift in terms of Born and
background terms.  Now this will be nicely tabulated in the file
molname.summ for single-conformer runs.

* Long-Range Accuracy Improved for Large Lattices

MEAD uses the successive over-relaxation (SOR) method to solve the
finite-difference representation of the Poisson--Boltzmann equation on
a cubic lattice.  Each iteration updates the potential values of grid
points based on the potentials of their immediate neighbors.
Iteration stops when the RMS error falls below a certain level
(subject to some constraints on the minimum and maximum number of
iterations).  In previous versions of MEAD, the target RMS error is
the same number regardless of lattice parameters.  This can cause a
problem because the error measure only involves the relations between
a lattice points and their immediate neighbors.  If the error is
systematic, then the absolute error can grow as one goes from a source
charge out to farther points on the lattice, even while the local
error measure remains bounded.  Numerical tests showed that this led
to poor long-range accuracy with lattice sizes of order 100 cubed.  To
fix this, MEAD now makes the target RMS error inversly proportional
the the number of lattice points per edge (the grid_dimension
parameter given in .ogm files).  The long range accuracy is much
improved for large lattices.  In such cases, MEAD is slower because it
does more iterations to meet the smaller target RMS error.

According to the testing we have done so far, this new convergence method
has only small effects on protein pKa calculations of the kind
included in the examples here.  For example, we re-did our full set of
thioredoxin calculations and found no changes in pKint or Wij values
greater than 0.4 pK units, only a handful in the range 0.2 to 0.4
and the vast majority of changes were less than 0.1 pK units.
The changes are small because protein pK calculations are not highly
sensitive to long-range behavior

* Change in redti output behavior

The previous versions of redti checked to see whether MolName.pkout
already existed, and if so, refused to run, which avoided accidentally
stepping on a previous .pkout file.  Now this checking is no longer
done, and an old MolName.pkout file will be overwritten if it exists.
This is more portable as C code, and more consistent with the behavior
of other MEAD programs.  Caveat: this is a bit less safe than before.

